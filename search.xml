<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Rust —— 基础篇</title>
      <link href="/2023/04/09/rust/"/>
      <url>/2023/04/09/rust/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-Wrold"><a href="#Hello-Wrold" class="headerlink" title="Hello Wrold"></a>Hello Wrold</h1><p><strong>创建一个项目</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cargo new hello_world<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该项目的结构和配置文件都是由cargo生成</p><p><strong>运行项目</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cargo run<span class="token comment"># 相当于运行下面的代码</span>cargo build./target/debug/hello_world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个命令会运行当前所在文件夹的项目，它首先会对项目进行编译，然后执行。</p><p>可以看到生成的代码放在debug文件夹下，这是因为rust在默认情况下，会按照debug模式运行，这种情况下编译速度会非常快，但运行速度比较慢。</p><p>因此在生产环境中，我们会使用release模式运行代码，确保运行速度。操作也很简单，只需要在运行/编译命令中添加<code>--release</code>参数即可。</p><p>在项目大了之后，上面两个命令的速度不可避免的会变慢，此时我们可以改用<code>cargo check</code>命令，它会快速检查代码能否编译通过。</p><p><strong>项目管理</strong></p><p>Cargo.toml和Cargo.lock是cargo的核心文件。前者是cargo特有的项目数据描述文件。他存储所有项目配置的元数据。后者则是cargo工具根据同一项目下的toml文件生成的项目依赖清单。</p><p>定义项目依赖：</p><ul><li>基于 Rust 官方仓库&nbsp;<code>crates.io</code>，通过版本说明来描述</li><li>基于项目源代码的 git 仓库地址，通过 URL 来描述</li><li>基于本地项目的绝对路径或者相对路径，通过类 Unix 模式的路径来描述</li></ul><pre class="line-numbers language-toml" data-language="toml"><code class="language-toml"><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span><span class="token key property">rand</span> <span class="token punctuation">=</span> <span class="token string">"0.3"</span><span class="token key property">hammer</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">"0.5.0"</span><span class="token punctuation">}</span><span class="token key property">color</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">git</span> <span class="token punctuation">=</span> <span class="token string">"https://github.com/bjz/color-rs"</span> <span class="token punctuation">}</span><span class="token key property">geometry</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">path</span> <span class="token punctuation">=</span> <span class="token string">"crates/geometry"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>强化一下 Hello World</strong></p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// println!("Hello, world!");</span>    <span class="token function">greet_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function-definition function">greet_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> chinese <span class="token operator">=</span> <span class="token string">"你好世界"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> english <span class="token operator">=</span> <span class="token string">"Hello world"</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> regions <span class="token operator">=</span> <span class="token punctuation">[</span>chinese<span class="token punctuation">,</span> english<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> ele <span class="token keyword">in</span> regions<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>变量声明，函数声明等等都和其他语言基本一致。主要需要关注一下println之后的!，在Rust中，它是红操作符，我们目前可以认为宏是一特殊类型函数。</p><p><strong>Hello World PLUS</strong></p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">funny</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> penguin_data <span class="token operator">=</span> <span class="token string">"\   common name,length (cm)   Little penguin,33   Yellow-eyed penguin,65   Fiordland penguin,60   Invalid,data   "</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> records <span class="token operator">=</span> penguin_data<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取数组中的下标以及对应元素</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> record<span class="token punctuation">)</span> <span class="token keyword">in</span> records<span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> record<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token comment">// 声明一个变量，类型是Vector，里面的类型由编译器自行判断</span><span class="token comment">// map的参数为一个lambada表达式</span>        <span class="token keyword">let</span> fields<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span>_<span class="token operator">&gt;</span> <span class="token operator">=</span> record<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token char">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>field<span class="token closure-punctuation punctuation">|</span></span> field<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 启用debug模式时开启</span>        <span class="token keyword">if</span> <span class="token macro property">cfg!</span><span class="token punctuation">(</span>debug_assertions<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">"debug: {:?} -&gt; {:?}"</span><span class="token punctuation">,</span> record<span class="token punctuation">,</span> fields<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">let</span> name <span class="token operator">=</span> fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 尝试将切片中的某个元素转换为f32类型，如果转换成功，这个变量会被赋值给length</span>        <span class="token comment">// 右边的部分如果执行成功会返回一个Ok(f32)类型，如果失败，则会返回一个Err(e)类型，if let 的作用就是仅匹配Ok的情况</span>        <span class="token comment">// 然后if let还会做一次解构匹配，通过 Ok(length) 去匹配右边的 Ok(f32)，最终把相应的 f32 值赋给 length</span>        <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span> <span class="token operator">=</span> fields<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"{}, {}cm"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="变量绑定与解构"><a href="#变量绑定与解构" class="headerlink" title="变量绑定与解构"></a>变量绑定与解构</h1><p><strong>变量绑定</strong></p><hr><p>在其他语言中的赋值操作，在Rust中被称为变量绑定。这里面涉及Rust的核心原则 —— <strong>所有权</strong>。通俗来说就是，每块内存对象都是有主人的，并且一般情况下，它完全属于它的主人。所谓的绑定就是让某个变量称为指定对象的主人<br><strong>敲重点：这里的意思就是如果某个内存对象被赋值给了另一个变量，就代表原来的变量失去了它的所有权。这就代表着不存在引用泄露的问题，因为一个内存对象最多同时被一个变量所有。</strong></p><p><strong>变量可变性</strong></p><hr><p>Rust的变量默认情况下是<strong>不可变</strong>的。也就是说一个变量不能被多次赋值。这可以显著提高代码的安全性，并且性能也更好，因为不可变对象不需要runtime期间的一些检查。同时，它也能帮我们避免变量在不知情的情况下被修改。</p><p>但不可变变量也有一定的问题，如果每次改变都需要重新生成一个对象，那显然会带来大量的内存拷贝。因此，Rust同样支持可变变量，只需要在声明时加上<code>mut</code>即可。</p><p>通常情况下，对于一些庞大的数据结构，修改它的内部内容显示是更加高效的。而对于一些比较小的结构，通过牺牲一定的性能换取安全性是值得的。</p><p><strong>变量解构</strong></p><hr><p>定义：从一个相对复杂的变量中，匹配出该变量的一部分内容</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token keyword">mut</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">bool</span><span class="token punctuation">,</span><span class="token keyword">bool</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// a = true,不可变; b = false，可变</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"a = {:?}, b = {:?}"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>变量遮蔽</strong></p><hr><p>Rust允许声明相同的变量名，在后面声明的变量会遮蔽前面声明的。它的作用在于，如果在某个作用域内无需再使用之前的变量，就可以重复使用之前使用过的变量名。</p><h1 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h1><h2 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h2><table><thead><tr><th>长度</th><th>有符号类型</th><th>无符号类型</th></tr></thead><tbody><tr><td>8位</td><td>i8</td><td>u8</td></tr><tr><td>16位</td><td>i16</td><td>u16</td></tr><tr><td>32位</td><td>i32</td><td>u32</td></tr><tr><td>64位</td><td>i64</td><td>u64</td></tr><tr><td>128位</td><td>i128</td><td>u128</td></tr><tr><td>视架构而定</td><td>isize</td><td>usize</td></tr></tbody></table><p>Rust整型默认用<code>i32</code>。它的性能一般也是最好的。</p><p><strong>整型溢出</strong></p><p>Rust在debug模式下会检测整型溢出，而在release模式下不会。默认情况下，Rust会按照补码循环溢出的规则处理。<br>如果要显示处理可能的溢出，可以使用标准库相关函数</p><ul><li>使用&nbsp;<code>wrapping_*</code>&nbsp;方法在所有模式下都按照补码循环溢出规则处理，例如&nbsp;<code>wrapping_add</code></li><li>如果使用&nbsp;<code>checked_*</code>&nbsp;方法时发生溢出，则返回&nbsp;<code>None</code>&nbsp;值</li><li>使用&nbsp;<code>overflowing_*</code>&nbsp;方法返回该值和一个指示是否存在溢出的布尔值</li><li>使用&nbsp;<code>saturating_*</code>&nbsp;方法使值达到最小值或最大值</li></ul><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> a <span class="token punctuation">:</span> <span class="token keyword">u8</span> <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">wrapping_add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 19</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="浮点数类型"><a href="#浮点数类型" class="headerlink" title="浮点数类型"></a>浮点数类型</h2><p>浮点类型数字是带有小数点的数字，在Rust中有两种<code>f32</code>和<code>f64</code></p><p><strong>浮点数陷阱</strong></p><ol><li>浮点数往往是想要数字的近似表达</li><li>浮点数具备一些反直觉的特性，浮点数的比较运算实现的是<code>std::cmp::PartialEq</code>而非<code>std::cmp::Eq</code>。后者是其他数据类型进行相等比较使用的。</li></ol><h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><p>Rust提供了序列用来生成连续的数值，例如<code>1..5</code>代表生成1-4的连续数字，<code>1..=5</code>生成1-5。序列只允许用于数字或字符，原因是他们可以连续，并且可以在编译期检查序列是否为空</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">1</span><span class="token punctuation">..=</span><span class="token number">5</span> <span class="token punctuation">{</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="有理数和负数"><a href="#有理数和负数" class="headerlink" title="有理数和负数"></a>有理数和负数</h2><p>Rust提供了num数值库，它可以处理有理数和复数。要想使用num库，首先需要在toml文件中的dependencies中添加一行 <code>num = 0.4.0</code></p><p>然后编写代码</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">num<span class="token punctuation">::</span></span><span class="token class-name">Complex</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token class-name">Complex</span> <span class="token punctuation">{</span>re<span class="token punctuation">:</span> <span class="token number">2.1</span><span class="token punctuation">,</span> im<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">1.2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token class-name">Complex</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">11.1</span><span class="token punctuation">,</span> <span class="token number">22.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token macro property">print!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h2><p>Rust的字符不仅仅包含ASCII，所有的Unicode字符都可以作为Rust的字符。由于Unicode字符是4个字节编码，因此字符类型也是占用4个字节。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token char">'中'</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"字符'中'占用了{}字节的内存大小"</span><span class="token punctuation">,</span><span class="token namespace">std<span class="token punctuation">::</span>mem<span class="token punctuation">::</span></span><span class="token function">size_of_val</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单元类型"><a href="#单元类型" class="headerlink" title="单元类型"></a>单元类型</h2><p>Rust中的单元类型就是<code>()</code>，它的唯一取值也就是<code>()</code>。main函数的返回值就是单元类型，因此它并不算是一个无返回值的函数，在Rust中，无返回值的函数有单独定义：<strong>发散函数</strong></p><p>()也可以用作map的值，表示不关注具体的值，只关注key。这种用法类似Go的struct{}，特点是不占用任何内存。</p><blockquote><p>发散函数：把  <code>!</code> 用作返回值的函数就称作发散函数，这类函数永远不会返回，它通常用在一些会导致程序崩溃的函数。</p></blockquote><h2 id="语句和表达式"><a href="#语句和表达式" class="headerlink" title="语句和表达式"></a>语句和表达式</h2><p>语句是执行一系列操作，但最后不会有返回值。而表达式会在求值后返回一个值。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">add_with_extra</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 语句</span>    <span class="token keyword">let</span> y <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 语句</span>    x <span class="token operator">+</span> y <span class="token comment">// 表达式</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用一个函数是表达式，因为会返回一个值，调用宏也是表达式，用花括号包裹一段代码块，且这段代码块里有返回值也代表它是一个表达式。</p><p>PS：表达式不能包含分号</p><p>最后，如果编译器发现某个表达式不返回任何值，就会让他隐式返回一个<code>()</code></p><h1 id="所有权和借用"><a href="#所有权和借用" class="headerlink" title="所有权和借用"></a>所有权和借用</h1><h2 id="所有权"><a href="#所有权" class="headerlink" title="所有权"></a>所有权</h2><p>所有权规则：</p><ol><li>Rust中每一个值都只被一个变量所拥有，该变量称为值的所有者。</li><li>一个值在同一时间只能被一个变量拥有</li><li>当所有者离开作用域后，这个<strong>值</strong>就会被丢弃。（这样就不需要GC了）</li></ol><p><strong>转移所有权</strong></p><hr><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">let</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上面的代码首先将5绑定到变量x，接着拷贝x的值赋给y，最终x和y都等于5。这看上去与我们的所有权规则有点冲突，但实际上，因为基本类型的大小都是已知的，所以他们都会分配在栈上。而对于值在栈上的变量，因为一旦离开作用域就会被回收掉，所以并不需要利用所有权进行跟踪。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但上面的这段代码就有点区别了，因为String是一种复杂类型，编译期无法知晓它最终的大小，因此它黑背分配到堆上。而对于堆上的值，所有权就有用武之地了。当s1被赋给s2之后，s1就失去了对应值的所有权，也就无法在程序中接着使用他了。</p><blockquote><p>如果一个值可以有多个所有者，那么在变量离开作用域之后可能就会导致多次内存释放，这会导致内存污染。因此Rust采取了所有者规则来解决这个问题。</p></blockquote><p><strong>深拷贝</strong></p><hr><p>Rust永远不会自动创建数据的深拷贝，因此任何自动的复制操作都不会对内存有较大影响。如果我们确实需要深拷贝，那么可以调用对应的clone()方法。此时会在堆上分配一块新的内存空间，并将所有权交给新的变量，对原来变量的所有权没有影响。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"s1 = {}, s2 = {}"</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>浅拷贝</strong></p><hr><p>浅拷贝只会发生在栈上，所有在编译时已知大小的类型，都会被分配在栈上。因此栈上基本类型的拷贝并不会导致所有权丢失，因为所有权针对的是堆中的数据。</p><p>Rust有一个叫Copy的特征，它可以用在可以在栈中存储的类型，如果一个类型拥有Copy特征，就代表它的拷贝不会导致所有权的移动，拷贝以及原值都可以继续使用。</p><p><strong>函数传值与返回</strong></p><hr><p>将值传递给函数，也会发生移动或复制</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// s 进入作用域</span>    <span class="token function">takes_ownership</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// s 的值移动到函数里 ...</span>                                    <span class="token comment">// ... 所以到这里不再有效</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>                      <span class="token comment">// x 进入作用域</span>    <span class="token function">makes_copy</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// x 应该移动函数里，</span>                                    <span class="token comment">// 但 i32 是 Copy 的，所以在后面可继续使用 x</span><span class="token punctuation">}</span> <span class="token comment">// 这里, x 先移出了作用域，然后是 s。但因为 s 的值已被移走，</span>  <span class="token comment">// 所以不会有特殊操作</span><span class="token keyword">fn</span> <span class="token function-definition function">takes_ownership</span><span class="token punctuation">(</span>some_string<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// some_string 进入作用域</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> some_string<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">// 这里，some_string 移出作用域并调用 `drop` 方法。占用的内存被释放</span><span class="token keyword">fn</span> <span class="token function-definition function">makes_copy</span><span class="token punctuation">(</span>some_integer<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// some_integer 进入作用域</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> some_integer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment">// 这里，some_integer 移出作用域。不会有特殊操作</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>部分move</strong></p><p>Rust还有一个概念叫部分move，如果一个复杂类型P中包含其他复杂类型A，B，C，那么如果其中某一个变量的所有权丢失了，我们就无法访问P这个整体。但我们仍可以直接访问那些没有丢失所有权的部分。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token attribute attr-name">#[derive(Debug)]</span>    <span class="token keyword">struct</span> <span class="token type-definition class-name">Person</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">// 通过这种解构式模式匹配，person.name 的所有权被转移给新的变量 `name`</span>    <span class="token comment">// 但是，这里 `age` 变量却是对 person.age 的引用, 这里 ref 的使用相当于: let age = &amp;person.age </span>    <span class="token keyword">let</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> <span class="token keyword">ref</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> person<span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The person's age is {}"</span><span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The person's name is {}"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Error! 原因是 person 的一部分已经被转移了所有权，因此我们无法再使用它</span>    <span class="token comment">//println!("The person struct is {:?}", person);</span>    <span class="token comment">// 虽然 `person` 作为一个整体无法再被使用，但是 `person.age` 依然可以使用</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The person's age from person struct is {}"</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="引用与借用"><a href="#引用与借用" class="headerlink" title="引用与借用"></a>引用与借用</h2><p>如果Rust仅仅支持转移所有权来传递一个值，那显然是非常低效的，并且会让程序变得格外复杂。因此Rust引入了引用和借用。</p><p>常规的引用就是一个普通的指针类型，它指向了对象存储的内存地址，但并不具有指向对象的所有权。因此这不会导致我们在传递参数时就丢失指定对象的所有权，因为指针类型属于直接分配在栈上的基本类型，因此他在拷贝时不会涉及所有权的转移。下面是引用的一般用法。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> len <span class="token operator">=</span> <span class="token function">calculate_length</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The length of '{}' is {}."</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function-definition function">calculate_length</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">usize</span> <span class="token punctuation">{</span>    s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般来说，引用都是不可变引用，也就是他们无法修改指向对象中的内容。</p><p>但Rust同样也支持可变引用，只需要确保引用指向的内容是可变的，并且该引用被声明为可变引用。这样我们就可以通过引用进行修改。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">change</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function-definition function">change</span><span class="token punctuation">(</span>some_string<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    some_string<span class="token punctuation">.</span><span class="token function">push_str</span><span class="token punctuation">(</span><span class="token string">", world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但要注意的是，特定数据的可变引用在相同作用域内只能存在一个。这种限制的好处在于可以<strong>避免数据竞争</strong>。通常情况下，我们会用大括号手动限制引用的作用域，离开作用域后我们就可以创建一个新的引用。</p><p>可变引用还有一个限制就是不可以和不可变引用在相同作用域中同时存在，因为不可变引用显然不希望有谁在自己的作用域内对目标进行修改。</p><blockquote><p>Rust中引用的作用域是从它创建开始，到它被最后一次使用截止。不像变量那样以函数或花括号为界限。</p></blockquote><p>Rust还对悬垂引用做了限制，如果一个指针指向的值已经被释放，那么Rust编译器会直接报错。</p><h1 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h1><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><p>切片允许我们引用集合中部分连续的元素序列，而不是引用整个集合。而在字符串中，切片就是对String类型中某一部分的引用。</p><p>切片引用通常占用2个字（64位系统中就是16字节）大小的空间。切片的第一个字是指向数据的指针，第二个字是切片的长度。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"Hello, World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> world <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> hello<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> world<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在对字符串使用切片时必须格外小心，因为Rust字符串使用UTF-8编码，因此如果字符串中有中文，必须按照1个中文3个字节的方式截取。</p></blockquote><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token attribute attr-name">#![allow(unused)]</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">"中国人"</span><span class="token punctuation">;</span> <span class="token comment">// 这里会报错，因为一个中文占3个字节，只截取两个字节无法正确解码</span> <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串就是由字符组成的连续集合，Rust中字符串是UTF-8编码。</p><p>Rust在语言级别只有一种字符串类型：<code>str</code>，它通常以引用类型出现，也就是字符串切片。str类型是硬编码进可执行文件，无法被修改的类型。但是<code>String</code>类型则是可修改，可增长的字符串类型。</p><p>二者的转换方式：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// &amp;str转String</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// String转&amp;str</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">as_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PS：Rust的字符串不提供索引，因为Rust字符串底层使用u8类型存储字符的编码，也就是说对于不同的字符，我们的访问方式也会不同。例如：英文字符串与中文字符串同时访问索引为0的位置，前者可以获取一个英文字母而后者只是获取了某个字的组成部分。</p><p>字符串的具体操作比较多，这里不多赘述，需要的时候直接查询即可 <a href="https://course.rs/basic/compound-type/string-slice.html#%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2">操作字符串</a>。要注意的一点是，字符串的所有操作全都基于底层的字节数组，因此如果操作涉及_索引_（虽然Rust没有索引，但这里懂什么意思就行），就必须要考虑存储字符的编码。</p><p><strong>操作UTF-8字符串</strong></p><hr><p>字符</p><p>如果要以Unicode字符的方式遍历字符串，最好使用<code>chars</code>方法</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token string">"中国人"</span><span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>字节</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token string">"中国人"</span><span class="token punctuation">.</span><span class="token function">bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>获取子串</p><p>如果想要准确的从UTF-8字符串中获取子串，需要使用额外的库 <a href="https://crates.io/crates/utf8_slice">utf8_slice</a></p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>定义结构体</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">User</span> <span class="token punctuation">{</span>active<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>sign_in_count<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建结构体实例</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> user1 <span class="token operator">=</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"someone@example.com"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"someusername123"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>active<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>sign_in_count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PS：<strong>初始化实例时每个字段都要初始化</strong></p><p>如果结构体字段与传入的参数名相同，可以进行简化</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 简化前</span><span class="token keyword">fn</span> <span class="token function-definition function">build_user</span><span class="token punctuation">(</span>email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token class-name">User</span> <span class="token punctuation">{</span>        email<span class="token punctuation">:</span> email<span class="token punctuation">,</span>        username<span class="token punctuation">:</span> username<span class="token punctuation">,</span>        active<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        sign_in_count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 简化后</span><span class="token keyword">fn</span> <span class="token function-definition function">build_user</span><span class="token punctuation">(</span>email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span> username<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token class-name">User</span> <span class="token punctuation">{</span>        email<span class="token punctuation">,</span>        username<span class="token punctuation">,</span>        active<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        sign_in_count<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结构体更新语法，如果我们想通过同类型的结构体实例来创建一个新的结构体实例，可以使用一种简化的语法。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token comment">// 简化前</span><span class="token keyword">let</span> user2 <span class="token operator">=</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>        active<span class="token punctuation">:</span> user1<span class="token punctuation">.</span>active<span class="token punctuation">,</span>        username<span class="token punctuation">:</span> user1<span class="token punctuation">.</span>username<span class="token punctuation">,</span>        email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"another@example.com"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        sign_in_count<span class="token punctuation">:</span> user1<span class="token punctuation">.</span>sign_in_count<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 简化后</span><span class="token keyword">let</span> user2 <span class="token operator">=</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>        email<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"another@example.com"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">..</span>user1    <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>..</code>表示凡是没有显式声明的字段，都从user1中获取（这中间会发生所有权转移哦）。</p><p><strong>元组结构体</strong></p><hr><p>结构体必须要有名称，但结构体的字段不一定要有名称，因此没有字段名称的结构体就是元组结构体，他们通常用在我们希望结构体有一个整体名称，但又不需要字段名的时候</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">Color</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> black <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> origin <span class="token operator">=</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>单元结构体</strong></p><hr><p>如果我们不关心结构体需要的字段，只关心它的行为，就可以使用单元结构体。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">AlwaysEqual</span><span class="token punctuation">;</span><span class="token keyword">let</span> subject <span class="token operator">=</span> <span class="token class-name">AlwaysEqual</span><span class="token punctuation">;</span><span class="token comment">// 我们不关心 AlwaysEqual 的字段数据，只关心它的行为，因此将它声明为单元结构体，然后再为它实现某个特征</span><span class="token keyword">impl</span> <span class="token class-name">SomeTrait</span> <span class="token keyword">for</span> <span class="token class-name">AlwaysEqual</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结构体数据的所有权</strong></p><hr><p>很多情况下我们希望结构体能够拥有专属于自身的值，而不是从其他结构体里借用一个值。如果一定要借用，我们必须要添上声明周期，避免借用值的生命周期比借用者小。</p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>枚举类型是一个类型，包含所有可能的枚举成员，枚举中的内容可以看成是一系列基础类型和复杂类型的集合。</p><p>Rust中的枚举可以直接将信息关联到枚举成员上</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">enum</span> <span class="token type-definition class-name">PokerCard</span> <span class="token punctuation">{</span>    <span class="token class-name">Clubs</span><span class="token punctuation">(</span><span class="token keyword">u8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">Spades</span><span class="token punctuation">(</span><span class="token keyword">u8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">Diamonds</span><span class="token punctuation">(</span><span class="token keyword">u8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">Hearts</span><span class="token punctuation">(</span><span class="token keyword">u8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且每个枚举成员关联的信息类型还可以有所不同。任何类型的数据都可以放入枚举中</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">enum</span> <span class="token type-definition class-name">Message</span> <span class="token punctuation">{</span>    <span class="token class-name">Quit</span><span class="token punctuation">,</span>    <span class="token class-name">Move</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token class-name">Write</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">ChangeColor</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Option枚举</strong></p><p>Option枚举是Rust中用于处理空值的一种手段，它的定义如下：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">enum</span> <span class="token type-definition class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">None</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>相比于null，Option的优势在于，它可以让可能会出现空指针异常的情况直接在编译期就被察觉。例如 a + b这个简单的运算，如果二者中有一个为空，就会导致程序出现异常，但如果使用Option，因为它不可以与其他类型进行加法运算，因此我们必须先从里面取出值，期间需要判断是否是有效值。这就保证了所有参与程序运算的值都是有效值，而被Option包裹的则可能是无效值。</p><p>一个简单的链表实现</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token class-name">List</span><span class="token punctuation">::</span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">List</span> <span class="token punctuation">{</span>    <span class="token class-name">Cons</span><span class="token punctuation">(</span><span class="token keyword">u32</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token class-name">List</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">Nil</span><span class="token punctuation">}</span><span class="token comment">// 为链表添加功能</span><span class="token keyword">impl</span> <span class="token class-name">List</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建一个空链表</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">List</span> <span class="token punctuation">{</span>        <span class="token class-name">Nil</span>    <span class="token punctuation">}</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">prepend</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> elem<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">List</span> <span class="token punctuation">{</span>        <span class="token comment">// 头插法，此时传入的是一个链表的值，以及待插入的元素</span>        <span class="token comment">// 返回一个新结点，并将self的所有权交给新的Box</span>        <span class="token class-name">Cons</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">len</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span> <span class="token punctuation">{</span>        <span class="token comment">// &amp;self是一个&amp;List，因此这里需要解除引用</span>        <span class="token comment">// 此时self里面存储的就是持有所有权的实际值,但我们不能拿走后一个节点的所有权,</span>        <span class="token comment">// 不然会导致他被drop掉,因此使用引用来处理</span>        <span class="token comment">// 如果我们不解除引用,那么就不必加上ref,因为此时的tail直接就是一个引用了</span>        <span class="token keyword">match</span> <span class="token operator">*</span><span class="token keyword">self</span> <span class="token punctuation">{</span>            <span class="token class-name">Cons</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> <span class="token keyword">ref</span> tail<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">1</span> <span class="token operator">+</span> tail<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token class-name">Nil</span> <span class="token operator">=&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">stringify</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span>        <span class="token keyword">match</span> <span class="token operator">*</span><span class="token keyword">self</span> <span class="token punctuation">{</span>            <span class="token class-name">Cons</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token keyword">ref</span> tail<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"{}, {}"</span><span class="token punctuation">,</span> head<span class="token punctuation">,</span> tail<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token class-name">Nil</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>Rust中的数组直接分配在栈上，因此拥有非常优秀的性能，但缺点就是无法扩容，这也代表着我们数组的长度必须在编译期已知，也就是我们不能通过获取运行时参数来创建数组。与之相对的，还有动态数组<code>Vec</code>，它具备动态扩容的能力，被分配在堆上。</p><p>数组类型声明</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">i32</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 初始化一个某个值重复出现N次的数组</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 3这个元素出现5次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果数组元素不是基本类型，那么就需要注意了</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面这段代码会抛出错误，因为数组的这种语法是通过Copy特征来实现的，但是对于复杂类型，由于他们没有实现Copy特征，因此不能使用这种语法。</p><p>而解决方案就是使用<code>std::array::from_fn</code>函数</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> array<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">;</span> <span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token namespace">core<span class="token punctuation">::</span>array<span class="token punctuation">::</span></span><span class="token function">from_fn</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>i<span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"rust is good!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h1><h2 id="match匹配"><a href="#match匹配" class="headerlink" title="match匹配"></a>match匹配</h2><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">match</span> target <span class="token punctuation">{</span>    模式<span class="token number">1</span> <span class="token operator">=&gt;</span> 表达式<span class="token number">1</span><span class="token punctuation">,</span>    模式<span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        语句<span class="token number">1</span><span class="token punctuation">;</span>        语句<span class="token number">2</span><span class="token punctuation">;</span>        表达式<span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    _ <span class="token operator">=&gt;</span> 表达式<span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将模式与target匹配，即为模式匹配。match后紧跟的是一个表达式，这和if很像，但是if要求表达式的返回值必须是bool。而match则可以接收任何返回值的表达式，只要能和模式进行匹配即可。</p><p>PS：match本身也是个表达式，因此可以用它来赋值。</p><p><strong>模式绑定</strong></p><hr><p>模式匹配的另一个功能是从模式中取出绑定的值。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">enum</span> <span class="token type-definition class-name">Action</span> <span class="token punctuation">{</span>    <span class="token class-name">Say</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">MoveTo</span><span class="token punctuation">(</span><span class="token keyword">i32</span><span class="token punctuation">,</span> <span class="token keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token class-name">ChangeColorRGB</span><span class="token punctuation">(</span><span class="token keyword">u16</span><span class="token punctuation">,</span> <span class="token keyword">u16</span><span class="token punctuation">,</span> <span class="token keyword">u16</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> actions <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token class-name">Action</span><span class="token punctuation">::</span><span class="token class-name">Say</span><span class="token punctuation">(</span><span class="token string">"Hello Rust"</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Action</span><span class="token punctuation">::</span><span class="token class-name">MoveTo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">Action</span><span class="token punctuation">::</span><span class="token class-name">ChangeColorRGB</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> action <span class="token keyword">in</span> actions <span class="token punctuation">{</span>        <span class="token keyword">match</span> action <span class="token punctuation">{</span>            <span class="token class-name">Action</span><span class="token punctuation">::</span><span class="token class-name">Say</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token class-name">Action</span><span class="token punctuation">::</span><span class="token class-name">MoveTo</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"point from (0, 0) move to ({}, {})"</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token class-name">Action</span><span class="token punctuation">::</span><span class="token class-name">ChangeColorRGB</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>                <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"change color into '(r:{}, g:{}, b:0)', 'b' has been ignored"</span><span class="token punctuation">,</span>                    r<span class="token punctuation">,</span> g<span class="token punctuation">,</span>                <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码中，如果action匹配<code>Action::Say</code>，就会将里面的值绑定到s中。注意，<strong>这里也会发生所有权转移</strong></p><p>Rust中match要求穷尽匹配，也就是匹配出target的所有可能结果，如果我们不需要匹配出所有的可能性，那么可以使用<code>_</code>进行匹配，它会自动匹配所有没有提到的模式。</p><p><strong>if let匹配</strong></p><p>如果我们只有一个匹配条件，那么可以使用if let实现，而不需要使用match。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">3u8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> v <span class="token punctuation">{</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"three"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>和if let类似的一种匹配语法是<code>while let</code>，它会一直匹配到模式无法匹配的时候</p><p><strong>matches!宏</strong></p><p>Rust中提供了matches!宏，它可以将一个表达式跟模式匹配，然后返回匹配结果。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token char">'f'</span><span class="token punctuation">;</span><span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token macro property">matches!</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token char">'A'</span><span class="token punctuation">..=</span><span class="token char">'Z'</span> <span class="token operator">|</span> <span class="token char">'a'</span><span class="token punctuation">..=</span><span class="token char">'z'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">assert!</span><span class="token punctuation">(</span><span class="token macro property">matches!</span><span class="token punctuation">(</span>bar<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>@绑定</strong></p><p>如果我们想要在match中对结构体中的字段进行变量绑定，方法在上文中已经提到。但如果我们想在绑定变量的同时还要限定分支范围，就需要用到@绑定</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">enum</span> <span class="token type-definition class-name">Message</span> <span class="token punctuation">{</span>    <span class="token class-name">Hello</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token keyword">i32</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">let</span> msg <span class="token operator">=</span> <span class="token class-name">Message</span><span class="token punctuation">::</span><span class="token class-name">Hello</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">match</span> msg <span class="token punctuation">{</span><span class="token comment">// 这里首先匹配id是否在3到7之内，接着将这个字段绑定到id_variable上</span>    <span class="token class-name">Message</span><span class="token punctuation">::</span><span class="token class-name">Hello</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> id_variable <span class="token operator">@</span> <span class="token number">3</span><span class="token punctuation">..=</span><span class="token number">7</span> <span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Found an id in range: {}"</span><span class="token punctuation">,</span> id_variable<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token class-name">Message</span><span class="token punctuation">::</span><span class="token class-name">Hello</span> <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">..=</span><span class="token number">12</span> <span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Found an id in another range"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">// 这里直接将id绑定到局部变量id上</span>    <span class="token class-name">Message</span><span class="token punctuation">::</span><span class="token class-name">Hello</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"Found some other id: {}"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>Rust的方法通常与结构体，枚举以及特征一起使用。示例如下：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">Circle</span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span>    y<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span>    radius<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>    <span class="token comment">// new是Circle的关联函数，因为它的第一个参数不是self，且new并不是关键字</span>    <span class="token comment">// 这种方法往往用于初始化当前结构体的实例</span>    <span class="token keyword">fn</span> <span class="token function-definition function">new</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">,</span> radius<span class="token punctuation">:</span> <span class="token keyword">f64</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>        <span class="token class-name">Circle</span> <span class="token punctuation">{</span>            x<span class="token punctuation">:</span> x<span class="token punctuation">,</span>            y<span class="token punctuation">:</span> y<span class="token punctuation">,</span>            radius<span class="token punctuation">:</span> radius<span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// Circle的方法，&amp;self表示借用当前的Circle结构体</span>    <span class="token keyword">fn</span> <span class="token function-definition function">area</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">f64</span> <span class="token punctuation">{</span>        <span class="token namespace">std<span class="token punctuation">::</span></span><span class="token keyword">f64</span><span class="token punctuation">::</span><span class="token namespace">consts<span class="token punctuation">::</span></span><span class="token constant">PI</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>radius <span class="token operator">*</span> <span class="token keyword">self</span><span class="token punctuation">.</span>radius<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，Rust中对象和方法的定义是分离的，这给我们提供了更多的灵活性（感觉有点问题）。</p><p>如果要让一个方法与某个特定的实例绑定，那就需要在参数中添加<code>self</code>，<code>&amp;self</code>，<code>&amp;mut self</code>。这个参数就代表着要执行当前方法的对应实例。而实例对应的类型则是<code>Self</code>。因此<code>self</code>实际上就是<code>self: Self</code>的简写，这里同样涉及到所有权的转移。</p><p>如果我们想要调用某个方法，可以直接使用<code>.</code>运算符，而不需要关注作用的对象是否是引用，因为Rust会自动引用或解引用。</p><p>在上面的例子中，我们还看到<code>new</code>方法的参数中没有<code>self</code>，这代表它是结构体的关联函数，可以类比为静态方法。通常，我们用new作为构造器方法的名称。</p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><p><strong>函数中使用泛型</strong></p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">largest</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>list<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">T</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">T</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果我们想要在函数中进行比较操作，那么还需要确保泛型是可以比较的，在Rust中就是要求传入的类型实现了对应的特征。</p><p><strong>结构体中使用泛型</strong></p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>    y<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>方法中使用泛型</strong></p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>    y<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function-definition function">x</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token class-name">T</span> <span class="token punctuation">{</span>        <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>x    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 为具体的泛型定义方法</span><span class="token keyword">impl</span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token keyword">f32</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function-definition function">distance_from_origin</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">f32</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">.</span>x<span class="token punctuation">.</span><span class="token function">powi</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">self</span><span class="token punctuation">.</span>y<span class="token punctuation">.</span><span class="token function">powi</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// ----------------</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>    x<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>    y<span class="token punctuation">:</span> <span class="token class-name">U</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token comment">// 方法中也可以增加额外的泛型参数</span>    <span class="token keyword">fn</span> <span class="token function-definition function">mixup</span><span class="token operator">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">W</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> other<span class="token punctuation">:</span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">V</span><span class="token punctuation">,</span> <span class="token class-name">W</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Point</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">W</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">Point</span> <span class="token punctuation">{</span>            x<span class="token punctuation">:</span> <span class="token keyword">self</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span>            y<span class="token punctuation">:</span> other<span class="token punctuation">.</span>y<span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Rust中的泛型对于运行时效率几乎没有任何影响，因为它是通过单态化实现的。编译器在编译时会获取泛型所有可能的取值，然后为他们生成对应的对象。例如<code>Option&lt;T&gt;</code>，如果我使用到了<code>Option&lt;i32&gt;</code>，那么编译器就会生成Option_i32这个数据结构。</p><p>这样做的好处是对运行时效率几乎没有任何影响，而缺点是降低了编译速度，并且增大了最终生成文件的大小。</p><p><strong>默认泛型类型参数</strong></p><hr><p>Rust中使用泛型参数时，可以为其指定一个默认的具体类型</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">trait</span> <span class="token type-definition class-name">Add</span><span class="token operator">&lt;</span><span class="token constant">RHS</span><span class="token operator">=</span><span class="token keyword">Self</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token keyword">type</span> <span class="token type-definition class-name">Output</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">add</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">,</span> rhs<span class="token punctuation">:</span> <span class="token constant">RHS</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Output</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里Add里面添加了默认的泛型参数，默认就是调用者的类型</p><p><strong>const泛型</strong></p><p><a href="https://zh.practice.rs/generics-traits/const-generics.html#%E7%A4%BA%E4%BE%8B">参考资料1</a>  <a href="https://course.rs/basic/trait/generic.html#const-%E6%B3%9B%E5%9E%8Brust-151-%E7%89%88%E6%9C%AC%E5%BC%95%E5%85%A5%E7%9A%84%E9%87%8D%E8%A6%81%E7%89%B9%E6%80%A7">参考资料2</a></p><h1 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h1><p>Rust中的接口用于将某些行为抽象出来，作用类似于接口。比如上面的加法泛型函数，我们需要限定传入参数都实现了加法特征</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">add</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token namespace">std<span class="token punctuation">::</span>ops<span class="token punctuation">::</span></span><span class="token class-name">Add</span><span class="token operator">&lt;</span><span class="token class-name">Output</span> <span class="token operator">=</span> <span class="token class-name">T</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token class-name">T</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">T</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 特征定义了一组可以被共享的行为，只要实现了特征就可以使用这组行为。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">FileOp</span> <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function-definition function">read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span><span class="token class-name">String</span><span class="token punctuation">;</span>    <span class="token keyword">fn</span> <span class="token function-definition function">write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">struct</span> <span class="token type-definition class-name">A</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">impl</span> <span class="token class-name">FileOp</span> <span class="token keyword">for</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function-definition function">read</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span><span class="token class-name">String</span> <span class="token punctuation">{</span>        <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>特征定义与实现的位置</strong></p><p>如果想要为类型A实现特征T，那么A或者T至少有一个是在当前作用域定义的（所谓当前作用域似乎可以理解为自己写的代码）。这样做的目的是确保他人的代码对于自己只起到增强的作用，而非修改的作用。因为特征与实现中至少有一个是应用在自己这的，不会影响其他部分。</p><p>Rust中的特征可以有默认实现，他的语法同普通的方法定一样。这么做的价值在于，实现类没有必要实现那些自己不需要的，或者实现类共用的部分。</p><p><strong>使用特征作为函数参数</strong></p><p>相当于将接口传递给方法，他的语法如下：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">impl</span> <span class="token class-name">Summary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>特征约束</strong></p><p>上面的那种写法仅是一种语法糖，并且它的缺陷在于传入的参数可以是任意的实现类，我们无法实现类似要求多个相同类型实现类的能力。此时就要转用完整格式，他的完整格式如下：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Summary</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>&lt;T: Summary&gt;就是特征约束，他表示这个泛型必须是Summary的实现类。</p><p>多重约束</p><hr><p>如果我们想要指定多个约束条件，可以使用如下语法：</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token keyword">impl</span> <span class="token class-name">Summary</span> <span class="token operator">+</span> <span class="token class-name">Display</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// 或</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">notify</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Summary</span> <span class="token operator">+</span> <span class="token class-name">Display</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>item<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Where 约束</p><hr><p>当约束条件变得很多时，函数的签名就会变得比较复杂，此时可以改用Where约束来进行简化</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">some_function</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Display</span> <span class="token operator">+</span> <span class="token class-name">Clone</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token punctuation">:</span> <span class="token class-name">Clone</span> <span class="token operator">+</span> <span class="token class-name">Debug</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">T</span><span class="token punctuation">,</span> u<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">U</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">// --&gt;</span><span class="token keyword">fn</span> <span class="token function-definition function">some_function</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">U</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span> u<span class="token punctuation">:</span> <span class="token class-name">U</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">i32</span><span class="token keyword">where</span> <span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Display</span> <span class="token operator">+</span> <span class="token class-name">Clone</span><span class="token punctuation">,</span>  <span class="token class-name">U</span><span class="token punctuation">:</span> <span class="token class-name">Clone</span> <span class="token operator">+</span> <span class="token class-name">Debug</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有条件的实现特征</p><hr><p>标准库为任何实现了Display特征的类型实现了ToString特性。这可以让所有实现了Display特征的类型同时实现ToString特征。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">impl</span><span class="token operator">&lt;</span><span class="token class-name">T</span><span class="token punctuation">:</span> <span class="token class-name">Display</span><span class="token operator">&gt;</span> <span class="token class-name">ToString</span> <span class="token keyword">for</span> <span class="token class-name">T</span> <span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>函数中返回特征实现</strong></p><p>可以通过<code>impl Trait</code>来说明一个函数返回了一个实现了某个特征的类型</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">impl</span> <span class="token class-name">Summary</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这就类似于多态，不过在Rust中，这个方法只能返回同种类型的值。如果在某种条件下返回了A，某种条件下返回B。那么即使他们都实现了需要的特征，也无法通过编译。</p><p><strong>通过derive派生特征</strong></p><p>derive会让编译器帮助我们自动派生出想要的特性，提供的是rust的默认实现。</p><h2 id="特征对象"><a href="#特征对象" class="headerlink" title="特征对象"></a>特征对象</h2><p>在上面的内容中讲到，Rust无法在函数中返回多种实现类，同样的，在泛型中也不能直接应用到多种实现类上。究其原因是实现类的大小不确定，如果有多种实现类，Rust无法计算出自己究竟该分配多少内存空间。</p><p>因此在需要多种返回值，且类型不确定或者不在当前作用域时可以使用特征对象来实现功能（如果满足上面的条件可以考虑枚举）。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">trait</span> <span class="token type-definition class-name">Draw</span> <span class="token punctuation">{</span><span class="token keyword">fn</span> <span class="token function-definition function">draw</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">impl</span> <span class="token class-name">Draw</span> <span class="token keyword">for</span> <span class="token keyword">u8</span> <span class="token punctuation">{</span><span class="token keyword">fn</span> <span class="token function-definition function">draw</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span><span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"u8: {}"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">impl</span> <span class="token class-name">Draw</span> <span class="token keyword">for</span> <span class="token keyword">f32</span> <span class="token punctuation">{</span><span class="token keyword">fn</span> <span class="token function-definition function">draw</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">String</span> <span class="token punctuation">{</span><span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">"f32: {}"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function-definition function">draw1</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">Draw</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>x<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function-definition function">draw2</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">dyn</span> <span class="token class-name">Draw</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>x<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>dyn</strong>的作用就是表明这是一个特征对象，他会将映射关系存储在一个表中，他可以在运行时通过特征对象查找到具体调用的方法。</p><p>不过dyn只需要在特征对象的类型声明上，他也不能单独作为特征对象的定义，因为&amp;和Box的大小都是确定的但dyn修饰的对象没有确定大小，因此它不可以单独出现。</p><h2 id="特征对象的动态分发"><a href="#特征对象的动态分发" class="headerlink" title="特征对象的动态分发"></a>特征对象的动态分发</h2><p>Rust的泛型是用静态分发实现的，也就是在编译期为每个泛型类型参数对应的具体类型生成一份代码，整个过程都是在编译期完成的，对于运行时性能没有影响。</p><p>与之相对的就是动态分发，dyn使用的就是这种方式。因为编译器无法知晓所有可能用于特征对象代码的类型，也就不知道要调用哪个类型的方法。Rust在运行时使用特征对象中的指针来知晓要调用哪个方法。</p><p><img src="https://pic1.zhimg.com/80/v2-b771fe4cfc6ebd63d9aff42840eb8e67_1440w.jpg" alt="动态分发"></p><p>特征对象中，<code>ptr</code>指向实现了特征的实际类型。<code>vptr</code>指向虚表<code>vtable</code>，他保存了实现了特征的具体类型的对应方法，当要调用时Rust就到虚标中查找对应的对象与实现。</p><p>PS：此时程序只知道它指向了一个具有某个特征的对象，但不了解他具体是什么，因此这里只能调用特征的方法。</p><h2 id="特征对象的限制"><a href="#特征对象的限制" class="headerlink" title="特征对象的限制"></a>特征对象的限制</h2><p>不是所有特征都能拥有特征对象，只有对象安全的特征才行。当一个特征的所有方法都有如下属性时，他的对象才是安全的：</p><ul><li>方法的返回类型不能是Self<br>  有了特征对象就不需要知道实现该特征的具体类型是什么。如果使用了Self，而特征对象忘记了真正的类型，就会出现问题。（这tm是什么情况）</li><li>方法没有任何泛型参数<br>  泛型使用静态分发实现，而特征对象在进行动态分发时会抹去集体类型，也就无从得知放入泛型参数的类型是什么。</li></ul><h2 id="关联类型"><a href="#关联类型" class="headerlink" title="关联类型"></a>关联类型</h2><p>关联类型是在特征定义的语句块中，申明一个自定义类型，就可以在特征的方法签名中使用该类型</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">pub</span> <span class="token keyword">trait</span> <span class="token type-definition class-name">Iterator</span> <span class="token punctuation">{</span><span class="token keyword">type</span> <span class="token type-definition class-name">Item</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>must <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Item</span><span class="token operator">&gt;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Self是指调用者的具体类型，Self::Item就是指该类型中定义的Item类型。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">impl</span> <span class="token class-name">Iterator</span> <span class="token keyword">for</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span><span class="token keyword">type</span> <span class="token type-definition class-name">Item</span> <span class="token operator">=</span> <span class="token keyword">u32</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token keyword">Self</span><span class="token punctuation">::</span><span class="token class-name">Item</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="特殊的方法调用"><a href="#特殊的方法调用" class="headerlink" title="特殊的方法调用"></a>特殊的方法调用</h2><p>不同特征很可能有同名的方法，在Rust中，他会优先调用调用者自身实现的方法。如果我们希望调用它实现的某个特征的方法，例如Human有方法A，但他又实现了特征B定义的A方法，此时如果想要调用特征B的语法，就需要用<code>B::A(&amp;human)</code>，Rust会根据传入的引用类型寻找对应的实现。</p><p>除此之外，关联函数也有可能出现同名的情况，但由于关联函数没有self参数，因此上面的语法就行不通了，此时就要使用完全限定语法。<code>&lt;Human as B&gt;::A(...)</code>。</p><h2 id="特征定义中的特征约束"><a href="#特征定义中的特征约束" class="headerlink" title="特征定义中的特征约束"></a>特征定义中的特征约束</h2><p>有时我们希望实现某些特征的类已经实现了需要的特征。比如我想要有一个能够以各种形式输出的特征，实现这个特征的前提是已经实现了Display特征，可以转为字符串。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">trait</span> <span class="token type-definition class-name">OutlinePrint</span><span class="token punctuation">:</span> <span class="token class-name">Display</span> <span class="token punctuation">{</span><span class="token keyword">fn</span> <span class="token function-definition function">outline_print</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">let</span> t <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子要求实现OutlinePrint的类实现了Display特征</p><h2 id="在外部类型上实现外部特征"><a href="#在外部类型上实现外部特征" class="headerlink" title="在外部类型上实现外部特征"></a>在外部类型上实现外部特征</h2><p>前文提到Rust特征与实现类需要遵循孤儿原则，以此避免本地代码与库的相互侵入。但如果我们确实需要绕开孤儿原则，比如给Vec实现Display特征，那我们可以给Vec进行一层封装，创建一个Wrapper结构体，然后让它去实现Display特征。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>fmt<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token type-definition class-name">Wrapper</span><span class="token punctuation">(</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">impl</span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Display</span> <span class="token keyword">for</span> <span class="token class-name">Wrapper</span> <span class="token punctuation">{</span>    <span class="token keyword">fn</span> <span class="token function-definition function">fmt</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> f<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Formatter</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">fmt<span class="token punctuation">::</span></span><span class="token class-name">Result</span> <span class="token punctuation">{</span>        <span class="token macro property">write!</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token string">"[{}]"</span><span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> w <span class="token operator">=</span> <span class="token class-name">Wrapper</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"w = {}"</span><span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>new type模式非常灵活，唯一的缺点就是调用语句略显繁琐，每次都要用self.0获取内部存储的具体数据。不过Rust提供了Deref特征，实现了它的结构可以自动封装或解包。</p><h1 id="Vec"><a href="#Vec" class="headerlink" title="Vec"></a>Vec</h1><p>Rust中的Vec是一种动态数组。</p><p><strong>新建vector</strong></p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> v<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// vec![]创建</span><span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>因为使用关联方法new创建对象时，编译器不知道里面究竟会存储什么元素，因此需要指定类型。</p><p><strong>更新vector</strong></p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token class-name">Vec</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里不需要声明的原因是，编译器可以通过下面的插入代码推断出里面存储什么元素。</p><p><strong>读取vector</strong></p><p>可以通过索引或get方法获取存储在vector中的值，区别在于索引的方式会出现数组越界的问题，而get方法返回一个Option，更加安全。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> third<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">i32</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The third element is {third}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> third<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">i32</span><span class="token operator">&gt;</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">match</span> third <span class="token punctuation">{</span>        <span class="token class-name">Some</span><span class="token punctuation">(</span>third<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The third element is {third}"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token class-name">None</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"There is no third element."</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tricks：</p><p>在对vector的读取和更新时也要考虑到所有权和借用规则，比如下面一段代码</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token operator">&amp;</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"The first element is: {first}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码中，first获取了一个不可变引用，它的作用域持续到了println语句，而在中间vec尝试获取了一个可变引用，这显然破坏了借用规则，所以无法通过编译。虽然这个限制看着非常无理，但实际上，因为vec插入元素可能导致扩容，此时会让之前获取到的引用失效，因此这个限制是很有必要的。</p><p><strong>遍历vector</strong></p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">let</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token operator">&amp;</span>v <span class="token punctuation">{</span><span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">"{i}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> <span class="token keyword">mut</span> v <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> v <span class="token punctuation">{</span><span class="token operator">*</span>i <span class="token operator">+=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>无论可变还是不可变地遍历一个vector都是安全的，因为一旦获取到了vector中的引用，那么就相当于获取到了一把锁，如果要对vector进行修改，会发现还有可变/不可变引用在作用域内。可变引用不可与不可变引用处于同一作用域，相同作用域中不能有多个可变引用。</p><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><h2 id="借用检查"><a href="#借用检查" class="headerlink" title="借用检查"></a>借用检查</h2><p>为了保证Rust的所有权和借用的正确性，Rust使用借用检查器来确保借用的正确性。当我们将一个引用赋给某个变量之后，编译器会检查这个引用变量的作用域是否小于引用对应的值的作用域，以此来避免出现悬挂引用。</p><h2 id="函数中的生命周期"><a href="#函数中的生命周期" class="headerlink" title="函数中的生命周期"></a>函数中的生命周期</h2><p>下面来看一个特殊的例子</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">longest</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> x<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> y<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    y<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面这段代码看起来非常完美，但实际上编译器会报错，表示函数的返回值来自于函数的参数，但对他而言无法确定返回值的生命周期是否小于借用参数的生命周期。</p><p>也就是说，我们必须让编译器知道这里的返回值的生命周期与借用值的生命周期，这样他才能确保调用后的引用生命周期分析。但实际情况是，即使是人也不知道返回值的生命周期，因为究竟返回哪一个值是运行时决定的。</p><p>但实际上我们未必要确切推导出实际的生命周期，我们只要让编译器知道，函数参数会活的比返回值更久即可。因此Rust引入了生命周期标注语法。</p><p><strong>重点！！！ 生命周期标注并不会改变任何引用的实际作用域。 它的唯一作用是让编译器了解到多个引用之间的关系，对于实际的作用域不会产生任何影响。</strong></p><p>修改上面的函数</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">longest</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'a</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">str</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">str</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> x<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> y<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    y<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先我们声明了一个生命周期&lt;‘a&gt;，然后标记x和y以及返回值的生命周期大于等于’a。这里’a究竟有多久并不重要，因为编译器可以根据这个标注推断出返回值的作用域会与两个参数中较小作用域的那个一致。</p><h2 id="结构体中的生命周期"><a href="#结构体中的生命周期" class="headerlink" title="结构体中的生命周期"></a>结构体中的生命周期</h2><p>之前我们在使用结构体时基本就没有用过引用类型的字段，因为非引用类型可以直接将所有权转移到结构体内，从而就不必关心生命周期的问题。</p><p>不过要想使用引用类型也并非不可，只需要给结构体中的引用标注上生命周期即可。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">struct</span> <span class="token type-definition class-name">Excerpt</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">'a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>part<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">'a</span> <span class="token keyword">str</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的这段结构体声明表示，part字段的生命周期大于等于’a，也就是它的生命周期大于结构体的生命周期。</p><h2 id="生命周期消除"><a href="#生命周期消除" class="headerlink" title="生命周期消除"></a>生命周期消除</h2><p>参数的生命周期被称为输入生命周期，返回值的生命周期被称为输出生命周期</p><p><strong>消除规则</strong></p><p>编译器按照3条消除规则来确定哪些场景不需要显示标注生命周期：</p><ol><li>每一个引用都参数会获取独自的生命周期。对于没有标注生命周期的参数，编译器会给他们每一个都分配一个生命周期。</li><li>如果只有一个输入生命周期，则该生命周期会被赋给所有输出生命周期</li><li>若存在多个生命周期，且其中有<code>&amp;self</code>或<code>&amp;mut self</code>。就会将self的生命周期赋给所有输出生命周期。</li></ol><p>如果以上规则无法确定生命周期，就会要求用户手动指定生命周期</p><h2 id="静态生命周期"><a href="#静态生命周期" class="headerlink" title="静态生命周期"></a>静态生命周期</h2><p>Rust中有一种特殊的生命周期<code>'static</code>，被他标注的引用的生命周期和整个程序一样久（实际上可能没那么久）</p><h1 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h1><h2 id="panic"><a href="#panic" class="headerlink" title="panic"></a>panic</h2><p>程序一旦抛出了panic异常，代表它碰到了不可恢复错误，只能终止程序运行。如果我们想要主动抛出panic，可以调用<code>panic!</code>，当这个宏被调用时，程序会打印出一个错误信息，然后展开函数的调用栈，最后退出程序。</p><p><strong>panic的使用时机</strong></p><ol><li>示例，原型，测试：如果正处于开发阶段，那么我们肯定希望优先加快编码速度，因此可以不专门处理错误，直接让程序被动触发panic</li><li>确定程序正确：当能够确定某个程序流是正确的时，可以直接用panic</li><li>可能导致全局有害状态<ol><li>非预期的错误</li><li>后续代码的运行受到显著影响</li><li>可能导致内存安全问题，比如数组越界</li></ol></li></ol><p><strong>panic原理</strong></p><ol><li>格式化&nbsp;<code>panic</code>&nbsp;信息，然后使用该信息作为参数，调用&nbsp;<code>std::panic::panic_any()</code>&nbsp;函数</li><li><code>panic_any</code>&nbsp;会检查应用是否使用了&nbsp;<a href="https://doc.rust-lang.org/std/panic/fn.set_hook.html"><code>panic hook</code></a>，如果使用了，该&nbsp;<code>hook</code>&nbsp;函数就会被调用（<code>hook</code>&nbsp;是一个钩子函数，是外部代码设置的，用于在&nbsp;<code>panic</code>&nbsp;触发时，执行外部代码所需的功能）</li><li>当&nbsp;<code>hook</code>&nbsp;函数返回后，当前的线程就开始进行栈展开：从&nbsp;<code>panic_any</code>&nbsp;开始，如果寄存器或者栈因为某些原因信息错乱了，那很可能该展开会发生异常，最终线程会直接停止，展开也无法继续进行</li><li>展开的过程是一帧一帧的去回溯整个栈，每个帧的数据都会随之被丢弃，但是在展开过程中，你可能会遇到被用户标记为&nbsp;<code>catching</code>&nbsp;的帧（通过&nbsp;<code>std::panic::catch_unwind()</code>&nbsp;函数标记），此时用户提供的&nbsp;<code>catch</code>&nbsp;函数会被调用，展开也随之停止：当然，如果&nbsp;<code>catch</code>&nbsp;选择在内部调用&nbsp;<code>std::panic::resume_unwind()</code>&nbsp;函数，则展开还会继续。</li></ol><h2 id="传播错误"><a href="#传播错误" class="headerlink" title="传播错误"></a>传播错误</h2><p>Rust定义了一个宏<code>?</code>用于错误传播，因为在程序中很多地方我们面对的并不是不可恢复错误，这时就需要用Result进行处理。</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">panic_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token namespace">io<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span><span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token keyword">mut</span> f <span class="token operator">=</span> <span class="token keyword">match</span> f <span class="token punctuation">{</span><span class="token class-name">Ok</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> f<span class="token punctuation">,</span><span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> res <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">match</span> res <span class="token punctuation">{</span><span class="token class-name">Ok</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码展示了如何用Result进行错误传播，可以看到代码还是非常繁琐的，并且最关键的问题是我们必须知道要调用的函数都会返回什么错误类型，这又会导致非常繁琐的错误类型转换。</p><p>因此接下来我们将介绍<code>?</code>的作用，它可以大幅简化上面的代码</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">fn</span> <span class="token function-definition function">panic_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token namespace">std<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span><span class="token keyword">let</span> <span class="token keyword">mut</span> f <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">::</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token punctuation">.</span><span class="token function">read_to_string</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> s<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span><span class="token class-name">Ok</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里<code>?</code>的作用就相当于是上面那一大段match的作用，与此同时，<code>?</code>还提供自动转型的功能，也就是说我们只要用一个足够大的错误类型包含所有可能返回的错误类型即可，<code>?</code>会自动替我们转换类型。</p><p><code>?</code>除了用于处理Result之外，还可以用于Option的处理，如果返回错误，那么就直接返回一个None。</p><p>tips：<code>?</code>必须要有一个变量来承载调用成功的返回值，只有碰到错误值时，他才会直接返回。</p><h1 id="包和模块"><a href="#包和模块" class="headerlink" title="包和模块"></a>包和模块</h1><h2 id="Crate"><a href="#Crate" class="headerlink" title="Crate"></a>Crate</h2><p>在Rust中，包是一个独立的可编译单元，它编译后会生成一个可执行文件或一个库</p><p>一个包会将相关联的功能打包在一起，方便该功能在多个项目中共享。</p><h2 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h2><p>Rust中的Package就是指一个项目，包含独立的<code>Cargo.toml</code>文件，以及因为功能性被组织在一起的一个或多个包。一个Package中只能包含一个库类型的包，但可以包含多个二进制可执行类型的包。</p><p>一个Package中可能有多个二进制包，他们往往放在src/bin下，文件名就是包名。</p><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><p>Rust中创建模块的语法是</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token keyword">mod</span> <span class="token module-declaration namespace">front_of_house</span> <span class="token punctuation">{</span>    <span class="token keyword">mod</span> <span class="token module-declaration namespace">hosting</span> <span class="token punctuation">{</span>        <span class="token keyword">fn</span> <span class="token function-definition function">add_to_waitlist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">fn</span> <span class="token function-definition function">seat_at_table</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">mod</span> <span class="token module-declaration namespace">serving</span> <span class="token punctuation">{</span>        <span class="token keyword">fn</span> <span class="token function-definition function">take_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">fn</span> <span class="token function-definition function">serve_order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">fn</span> <span class="token function-definition function">take_payment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过mod关键字来创建模块，再模块中可以定义结构体，函数，方法等。这样我们可以将功能想的代码被组织在一起。</p><p>src/main.rs与src/lib.rs是包的根，他们共同构成一个叫<code>crate</code>的模块。因此如果我们要用绝对路径引入<code>front_of_house</code>，对应的语法是<code>use crate::front_of_house</code>。</p><h2 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h2><p>Rust规定，默认情况下，所有类型都是私有的，甚至模块本身也是私有的。但是父模块对于子模块来说是完全可见的，不过父模块无法访问子模块的私有项。</p><p>如果要对外暴露，可以使用pub关键字，需要注意的是，pub修饰枚举之外的东西，都只代表外部可以引用这个东西本身，它内部的方法或变量并不会暴露出去。</p><blockquote><p>Rust查找模块的逻辑<br>从crate开始查找，看当前所处的包下有没有对应模块名的文件，如果有，那么这个文件就是要找的模块。如果模块被放在一个文件夹里，那么就会到模块名所在的文件夹内查找mod.rs文件或是与模块同名的文件，如果能找到，就代表它是要找的模块</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>netty</title>
      <link href="/2023/03/09/netty/"/>
      <url>/2023/03/09/netty/</url>
      
        <content type="html"><![CDATA[<h1 id="Java-网络编程-I-x2F-O-模型"><a href="#Java-网络编程-I-x2F-O-模型" class="headerlink" title="Java 网络编程 I/O 模型"></a>Java 网络编程 I/O 模型</h1><p>BIO：<strong>同步并阻塞</strong>，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程处理。适用于连接数目较小且固定的架构，这种方式对服务器的机器资源要求较高，但编写出来的程序比较简单。</p><p>NIO：<strong>同步非阻塞</strong>，服务器用一个线程处理多个请求，客户端发送的连接请求都会注册到多路复用器上，它以<strong>轮询</strong>的方式处理注册到该复用器上的请求。适用于<strong>连接数目较多且连接比较短——轻操作</strong>的架构，例如聊天服务器，弹幕系统，服务器间通讯等。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/netty/2022-10-10%2022-56-43%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/netty/2022-10-10%2022-56-43%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p><p>Netty是基于NIO实现的一个框架</p><blockquote><p>不同IO模型的对比</p></blockquote><table><thead><tr><th></th><th>同步阻塞I/O</th><th>伪异步I/O</th><th>非阻塞I/O</th><th>异步I/O</th></tr></thead><tbody><tr><td>客户端个数:I/O线程</td><td>1:1</td><td>M:N</td><td>M:1</td><td>M:0</td></tr><tr><td>I/O类型</td><td>阻塞</td><td>阻塞</td><td>非阻塞</td><td>非阻塞</td></tr></tbody></table><h1 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h1><h2 id="NIO与BIO的区别"><a href="#NIO与BIO的区别" class="headerlink" title="NIO与BIO的区别"></a>NIO与BIO的区别</h2><p>BIO以流的方式处理数据，NIO则以块的方式处理数据，块IO的效率比流IO的效率高很多<br>BIO阻塞，NIO不阻塞<br>BIO基于字节流和字符流进行操作，因此他只能操作单一的连接。而NIO基于Channel和Buffer进行操作数据总是从通道中写入和读取。同时NIO引入了Selector用于监听多个通道的事件，实现单个线程处理多个客户端请求的目的。</p><h2 id="NIO三大核心组件"><a href="#NIO三大核心组件" class="headerlink" title="NIO三大核心组件"></a>NIO三大核心组件</h2><ol><li>channel与buffer一一对应</li><li>Selector对应一个线程，一个线程对应多个channel</li><li>Selector会根据<strong>事件</strong>判断要切换到哪个Channel</li><li>NIO的Buffer可读可写，只需要用flip方法切换读写状态。Channel也同样是<strong>双向</strong>的</li></ol><p>Buffer与Channel的使用见on java [[on java#新IO系统]]</p><h2 id="零拷贝技术"><a href="#零拷贝技术" class="headerlink" title="零拷贝技术"></a>零拷贝技术</h2><p>在传统的文件传输过程中需要：<br>4次拷贝：</p><ul><li>DMA将数据从磁盘搬运到内核缓冲区</li><li>CPU将数据从内核缓冲区搬运到用户缓冲区</li><li>CPU将数据从用户缓冲区搬运到内核socket缓冲区</li><li>DMA将内核缓冲区中的数据搬运到网卡缓冲区</li></ul><p>4次上下文切换：<br>用户读取文件时来回切换两次<br>用户将文件写入时来回切换两次</p><p>因此想要优化传统文件传输必然要从这两方面着手：</p><ol><li>读取磁盘数据时，之所以会发生上下文切换，根源在于用户空间没有权限操作磁盘或网卡，因此相关的操作交给内核去完成。所以要想减少上下文切换次数需要<strong>减少系统调用次数</strong></li><li>在数据传输过程中，将数据从内核缓冲区拷贝到用户空间，再从用户空间写入内核缓冲区，显然是没有意义的。因此在文件传输时，用户缓冲区没有存在的必要。</li></ol><h3 id="mmap-write"><a href="#mmap-write" class="headerlink" title="mmap + write"></a>mmap + write</h3><p>在上面的分析中，我们得出，传统IO速度慢的原因之一在于：用户空间在里面扮演了一个完全多余的角色，因此mmap的目的就是消除这个冗余角色。<br>mmap的具体过程：</p><ol><li>DMA将数据搬运到内核缓冲区后，mmap让应用缓冲区与OS共享这部分内存空间，这样就不需要再将数据拷贝到用户空间</li><li>用户发起写命令后，CPU直接将内核缓冲区的数据写入socket的缓冲区</li><li>最后DMA搬运socket缓冲区的数据到网卡</li></ol><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/notes/Untitled.png"></p><p>通过这种方式，我们减少了一次拷贝。但系统调用仍然是两次，上下文切换的次数并没有减少。</p><h3 id="sendfile"><a href="#sendfile" class="headerlink" title="sendfile"></a>sendfile</h3><p>在Linux2.1中，新增了一个专门发送文件的系统调用函数<code>send_file()</code></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span></span><span class="token class-name">ssize_t</span> <span class="token function">sendfile</span><span class="token punctuation">(</span><span class="token keyword">int</span> out_fd<span class="token punctuation">,</span> <span class="token keyword">int</span> in_fd<span class="token punctuation">,</span> <span class="token class-name">off_t</span> <span class="token operator">*</span>offset<span class="token punctuation">,</span> <span class="token class-name">size_t</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>前两个参数是目的端和源端的文件描述符，后两个参数是源端的偏移量和复制数据的长度，返回值是实际复制数据的长度。<br>这个函数同时具备读和写的功能，因此他减少了1次系统调用也就是2次上下文切换的开销。<br>此外，他可以直接将内核缓冲区的数据拷贝到socket缓冲区当中，节省了一次数据拷贝。<br>这样就做到了仅用2次上下文切换与3次数据拷贝实现了文件传输。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/notes/Untitled%201.png"></p><p>而Linux对于支持网卡SG-DMA技术的情况，可以实现更加快速的文件传输。具体流程为：</p><ol><li>通过DMA将磁盘上的数据拷贝到内核缓冲区中</li><li>将缓冲区描述符和数据长度传到socket缓冲区，网卡的 SG-DMA 控制器可以直接将内核缓存中的数据拷贝到网卡的缓冲区里，此过程不需要将数据从操作系统内核缓冲区拷贝到 socket 缓冲区中，这样就减少了一次数据拷贝；</li></ol><h2 id="NIO使用入门"><a href="#NIO使用入门" class="headerlink" title="NIO使用入门"></a>NIO使用入门</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>操作步骤：</p><ol><li>启动一个Selector和服务端Socket管道。设置serverSocketChannel为非阻塞并将其绑定到指定IP地址和端口。接着将该Channel注册到Selector当中，并标记该Channel拥有ACCEPT请求的能力。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">MultiplexerTimeServer</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        servChannel <span class="token operator">=</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        servChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 第二个参数是backlog，表示已经建立的，可供通信的连接数</span>        servChannel<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 向selector注册服务器可处理的key</span>        servChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The time server is start in port: "</span> <span class="token operator">+</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>让Selector轮询接收到请求的Channel，获取到与Channel绑定的key</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> selectionKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> selectionKey <span class="token operator">:</span> selectionKeys<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">handleInput</span><span class="token punctuation">(</span>selectionKey<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>selectionKey <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    selectionKey<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>selectionKey<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        selectionKey<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>selector <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            selector<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>接收到key之后，首先判断这个key是否有效，如果key有效，再判断这个key是否能够接收请求。如果可以就从这个key中取出对应的Socket连接，并接收服务端的输入。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleInput</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isAcceptable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">ServerSocketChannel</span> ssc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span> ssc<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ByteBuffer</span> readBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> readBytes <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>readBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>readBytes <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                readBuffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>readBuffer<span class="token punctuation">.</span><span class="token function">remaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                readBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The time server receive order: "</span> <span class="token operator">+</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> currentTime <span class="token operator">=</span> <span class="token string">"QUERY TIME ORDER"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">"BAD ORDER"</span><span class="token punctuation">;</span>                <span class="token function">doWrite</span><span class="token punctuation">(</span>sc<span class="token punctuation">,</span> currentTime<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>readBytes <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                key<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>客户端的基本操作还是跟服务端类似，都需要先获取Selector和Socket连接，并将Socket注册进去。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">TimeClientHandle</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>host <span class="token operator">=</span> host <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">"127.0.0.1"</span> <span class="token operator">:</span> host<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> port<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        selector <span class="token operator">=</span> <span class="token class-name">Selector</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socketChannel <span class="token operator">=</span> <span class="token class-name">SocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socketChannel<span class="token punctuation">.</span><span class="token function">configureBlocking</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但客户端的在建立完基础设施后，首先要尝试对服务端进行连接</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>socketChannel<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doWrite</span><span class="token punctuation">(</span>socketChannel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        socketChannel<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_CONNECT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值得注意的是，在这里如果connect返回true就代表服务端已经返回了ACK，将对应的key注册到selector中，并标注他为可读取的key。<strong>但如果返回的是false，也不代表连接失败，只是服务端还没有返回ack</strong>，因此这里也要把他注册到selector中，当服务端的ack到达时，selector轮询到该key就可以将它标注为已就绪的key。</p><p>除此以外，客户端在处理收到的响应时也稍有不同，首先要判断这个key是否有效。接着要判断该key是否已经完成了连接(因为在注册的时候，有一部分key标注为正在连接)，如果完成了连接，就将它注册为可读的key。然后判断这个key是否可读，可读的话就从channel中读取响应。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleInput</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SocketChannel</span> sc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SocketChannel</span><span class="token punctuation">)</span> key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isConnectable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">finishConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sc<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">doWrite</span><span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">ByteBuffer</span> readBuffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> readBytes <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>readBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>readBytes <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                readBuffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>readBuffer<span class="token punctuation">.</span><span class="token function">remaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                readBuffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Now is "</span> <span class="token operator">+</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>stop <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>readBytes <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                key<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sc<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h1><h2 id="Reactor模型"><a href="#Reactor模型" class="headerlink" title="Reactor模型"></a>Reactor模型</h2><p>Netty是基于Reactor模型的网络框架，因此在介绍Netty之前需要先介绍一下Reactor模型。</p><p>Reactor模型的核心在于：</p><ol><li>事件驱动</li><li>可以处理一个或多个输入源</li><li>通过多路复用将请求事件分发给对应的处理器处理</li></ol><p>Reactor模型中主要有三个角色：</p><ol><li>Reactor：将I/O事件分配给对应的handler处理</li><li>Acceptor：处理客户端连接事件</li><li>Handler：处理非阻塞任务</li></ol><h3 id="单Reactor线程模型"><a href="#单Reactor线程模型" class="headerlink" title="单Reactor线程模型"></a>单Reactor线程模型</h3><p>Reactor负责处理事件并分发事件，将连接事件交给acceptor，其他事件交给handler处理。始终只有一个线程处理请求。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/notes/Untitled%202.png" alt="Untitled"></p><p>这种模型的缺点非常明显，单线程模型在高并发环境下可能带来严重的性能问题。</p><h3 id="单Reactor多线程模型"><a href="#单Reactor多线程模型" class="headerlink" title="单Reactor多线程模型"></a>单Reactor多线程模型</h3><p>为了修改上面的模型的缺陷，引入了池化技术。因为单线程模型的性能缺陷在于，业务处理可能非常繁重，导致单个线程处理缓慢，造成事件堆积。因此通过加入线程池的方法，将业务处理分离出来，交给线程池处理。Reactor线程只负责连接建立以及读写操作。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/notes/Untitled%203.png" alt="Untitled"></p><p>虽然引入了池化技术，但连接的建立以及网络I/O依旧由单个线程处理，性能问题依旧存在。</p><h3 id="多Reactor多线程模型"><a href="#多Reactor多线程模型" class="headerlink" title="多Reactor多线程模型"></a>多Reactor多线程模型</h3><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/notes/Untitled%204.png" alt="Untitled"></p><p>在这种模型中，将Reactor拆分为mainReactor和subReactor两个部分，mainReactor只负责处理连接事件，一般一个线程足矣。subReactor负责处理读写事件，数量和CPU核心数相等。这种模型使各个模块职责单一，降低了耦合度。Netty的主从线程模型就是这种模型的一种实现。</p><h2 id="使用入门"><a href="#使用入门" class="headerlink" title="使用入门"></a>使用入门</h2><p><code>NioEventLoopGroup</code>是一个线程组，它包含一组NIO线程专门用于网络事件的处理。这里使用的是多Reactor多线程模式，bossGroup作为主Reactor负责处理连接事件，workerGroup负责读写事件的处理。接着设置创建的Channel为<code>NioServerSocketChannel</code>。最后设置Handler专门负责处理请求。<br><code>ChildChannelHandler</code>获取socketChannel的管道，并将一个处理器添加到管道当中。<br>最后调用bind函数让服务器监听指定端口，并使用sync方法等待返回结果。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">EventLoopGroup</span> bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EventLoopGroup</span> workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">ServerBootstrap</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span> workerGroup<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span>SO_BACKLOG<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChildChannelHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ChannelFuture</span> f <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            bossGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            workerGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ChildChannelHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> socketChannel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>            socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimeServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">TimeServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理器的操作<br>利用netty提供的字节缓冲区<code>ByteBuf</code>进行读取和写入操作。需要注意的是，netty并不会在消息写入之后就立即发送，过于频繁的唤醒Selector进行消息发送会拖慢系统性能，因此需要自行调用flush方法让netty将缓冲区的数据写入到SocketChannel当中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelHandlerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">ByteBuf</span> buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>buf<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        buf<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The Time Server received order: "</span> <span class="token operator">+</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> currentTime <span class="token operator">=</span> <span class="token string">"QUERY TIME ORDER"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">"BAD ORDER"</span><span class="token punctuation">;</span>        <span class="token class-name">ByteBuf</span> resp <span class="token operator">=</span> <span class="token class-name">Unpooled</span><span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelReadComplete</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>客户端操作</p><p>客户端操作和服务端基本一致，只需要重点关注<code>channelActive</code>、<code>channelRead</code>、<code>exceptionCaught</code>三个方法。当客户端和服务端建立连接成功后就会调用channelActive方法。当服务端返回消息时，就会调用channelRead方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token class-name">String</span> host<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">EventLoopGroup</span> group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Bootstrap</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span>TCP_NODELAY<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token annotation punctuation">@Override</span>                        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>                            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimeClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ChannelFuture</span> f <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            group<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">TimeClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TimeClientHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelHandlerAdapter</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ByteBuf</span> firstMessage<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">TimeClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> req <span class="token operator">=</span> <span class="token string">"QUERY TIME ORDER"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            firstMessage <span class="token operator">=</span> <span class="token class-name">Unpooled</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            firstMessage<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>            ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>firstMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>            <span class="token class-name">ByteBuf</span> buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>buf<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            buf<span class="token punctuation">.</span><span class="token function">readBytes</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Now is "</span> <span class="token operator">+</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>            ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="处理TCP粘包"><a href="#处理TCP粘包" class="headerlink" title="处理TCP粘包"></a>处理TCP粘包</h2><p>由于TCP是面向字节流的协议，因此数据之间的界限对计算机来说就是模糊不清的，他无法确定哪一部分是一个完整的数据包，典型的例子就是Socket建立的TCP连接需要约定符号来表明一次单向通信的结束。因此需要上层的应用层协议来解决这类问题。<br>粘包问题产生的原因一般有三个：</p><ol><li>write写入的字节大小大于套接字接口发送缓冲区的大小</li><li>进行MSS大小的TCP分段</li><li>以太网帧的payload大于MTU进行IP分片(基于TCP的传输不会发生IP分片)</li></ol><p>想要用Netty解决TCP粘包非常简单，只需要在服务端和客户端的管道初始化中添加分隔符和定长解码器就可以了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ChildChannelHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> socketChannel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LineBasedFrameDecoder</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimeServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要的变化就是添加了<code>LineBasedFrameDecoder</code>和<code>StringDecoder</code>。前者会遍历ByteBuf中的可读字节，一旦发现<code>\\n</code>或<code>\\r\\n</code>就会将此位置作为结束位置。如果直到最大长度还没有找到分隔符就会抛出异常并忽略掉之前的异常码流。而后者则是简单的讲读取到的每一行字节转换成字符串。</p><p>自定义数据头来包含长度相关的元数据，使用<code>LengthFieldPrepender</code>来在ByteBuf之前添加n个字节的消息长度信息。 <code>LengthFieldBasedFrameDecoder</code>用于处理半包信息，其构造器为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">LengthFieldBasedFrameDecoder</span><span class="token punctuation">(</span>        <span class="token keyword">int</span> maxFrameLength<span class="token punctuation">,</span>        <span class="token keyword">int</span> lengthFieldOffset<span class="token punctuation">,</span> <span class="token keyword">int</span> lengthFieldLength<span class="token punctuation">,</span>        <span class="token keyword">int</span> lengthAdjustment<span class="token punctuation">,</span> <span class="token keyword">int</span> initialBytesToStrip<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>            maxFrameLength<span class="token punctuation">,</span>            lengthFieldOffset<span class="token punctuation">,</span> lengthFieldLength<span class="token punctuation">,</span> lengthAdjustment<span class="token punctuation">,</span>            initialBytesToStrip<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一个参数为最大的帧长度，第二个参数为长度字段的偏移量，第三个参数为长度字段的长度，第四个参数为长度的偏差量，最后的参数表示解码器会舍弃第一个字节到第n-1个字节(截取到body的起始位置)。</p><h2 id="Netty编解码"><a href="#Netty编解码" class="headerlink" title="Netty编解码"></a>Netty编解码</h2><p>Java本身自带的序列化性能不佳，因此这里使用Messagepack库来实现编解码操作。<br>要想在Netty引入外部的编解码库需要让对应的编解码器实现<code>MessageToByteEncoder&lt;Object&gt;</code> <code>MessageToMessageDecoder&lt;ByteBuf&gt;</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgpackDecoder</span> <span class="token keyword">extends</span> <span class="token class-name">MessageToMessageDecoder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ByteBuf</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">ByteBuf</span> msg<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> length <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">readerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MessagePack</span> messagePack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessagePack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>messagePack<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MsgpackDecoder</span> <span class="token keyword">extends</span> <span class="token class-name">MessageToMessageDecoder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ByteBuf</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">ByteBuf</span> msg<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> length <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">readerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MessagePack</span> messagePack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessagePack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>messagePack<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用protobuf实现编解码</p></blockquote><p>首先引入protobuf的依赖并配置protoc插件</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.xolstice.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>protobuf-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>protocExecutable</span><span class="token punctuation">&gt;</span></span>                    /home/faust/devapps/protobuf/bin/protoc  <span class="token comment">&lt;!-- 刚刚环境变量配置的位置 --&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>protocExecutable</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginId</span><span class="token punctuation">&gt;</span></span>protoc-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginId</span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!-- proto文件放置的目录 --&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>protoSourceRoot</span><span class="token punctuation">&gt;</span></span>${project.basedir}/proto<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>protoSourceRoot</span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!-- 生成文件的目录 --&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputDirectory</span><span class="token punctuation">&gt;</span></span>${project.basedir}/src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputDirectory</span><span class="token punctuation">&gt;</span></span>                <span class="token comment">&lt;!-- 生成文件前是否把目标目录清空，这个最好设置为false，以免误删项目文件 --&gt;</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>clearOutputDirectory</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>clearOutputDirectory</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于服务端和客户端的基本处理类似，因此这边只讲解ChannelInitalizer和ChannelHandler两个方面</p><p><code>ProtobufVarint32FrameDecoder</code>主要用于半包处理，随后添加解码器，其中传入的参数告诉解码器目标对象是什么。然后传入长度字段的预处理器和编码器。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> socketChannel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProtobufVarint32FrameDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProtobufDecoder</span><span class="token punctuation">(</span><span class="token class-name">SubscribeReqProto<span class="token punctuation">.</span>SubscribeReq</span><span class="token punctuation">.</span><span class="token function">getDefaultInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProtobufVarint32LengthFieldPrepender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProtobufEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socketChannel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SubReqServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来是Handler，由于上面使用了Protobuf解码器，因此收到的msg直接就是自己需要的目标对象。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ChannelHandler.Sharable</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubReqServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelHandlerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">SubscribeReqProto<span class="token punctuation">.</span>SubscribeReq</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SubscribeReqProto<span class="token punctuation">.</span>SubscribeReq</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token function">resp</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">getSubReqID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">SubscribeRespProto<span class="token punctuation">.</span>SubscribeResp</span> <span class="token function">resp</span><span class="token punctuation">(</span><span class="token keyword">int</span> subReqID<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SubscribeRespProto<span class="token punctuation">.</span>SubscribeResp<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> <span class="token class-name">SubscribeRespProto<span class="token punctuation">.</span>SubscribeResp</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setSubReqID</span><span class="token punctuation">(</span>subReqID<span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setRespCode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        builder<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        cause<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="HTTP-XML协议栈实现"><a href="#HTTP-XML协议栈实现" class="headerlink" title="HTTP+XML协议栈实现"></a>HTTP+XML协议栈实现</h2><p>首先讲解一下操作的流程</p><ol><li>构造请求消息，并将消息编码成HTTP+XML格式。由于Netty没有提供将POJO对象转换为HTTP+XML的HTTP请求消息的功能，因此需要我们自己编写编码器。</li><li>利用Netty的HTTP协议栈，建立HTTP通信链路并发送消息。</li><li>服务端将消息解码为请求POJO对象，同时获取请求头的信息。由于Netty没有提供对XML格式信息解码的操作，因此需要自己编写解码器</li><li>服务端构造响应并发还给客户端</li><li>客户端将应答解码为POJO对象</li></ol><p>编写ant脚本进行实体类的编译与绑定</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0"?&gt;</span><span class="token comment">&lt;!-- ===================================================================Ant build file for JiBX data binding code to schema starter example.=================================================================== --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">basedir</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>.<span class="token punctuation">"</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>help<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>available</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/home/faust/devapps/jibx<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jibx-home<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/home/faust/devapps/jibx<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">environment</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>env<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>condition</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jibx-home<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${env.JIBX_HOME}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>and</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>not</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>isset</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jibx-home<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>not</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>available</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${env.JIBX_HOME}/lib<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>and</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>condition</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- End of jibx-home location setting block. --&gt;</span>    <span class="token comment">&lt;!-- make sure required jars are present --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>condition</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>runtime-jars-found<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>available</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jibx-home}/lib/jibx-run.jar<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>condition</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>condition</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>binding-jars-found<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>and</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>available</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jibx-home}/lib/bcel.jar<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>available</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jibx-home}/lib/jibx-bind.jar<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>available</span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jibx-home}/lib/jibx-run.jar<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>and</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>condition</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>available</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>extras-jar-found<span class="token punctuation">"</span></span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jibx-home}/lib/jibx-extras.jar<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- set classpath for compiling and running application with JiBX --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>path</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileset</span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jibx-home}/lib<span class="token punctuation">"</span></span> <span class="token attr-name">includes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*.jar<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dirset</span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${basedir}/target/classes<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>path</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- make sure runtime jars are present --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>check-runtime<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>echo</span> <span class="token attr-name">message</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>--------------&gt;${env.JIBX_HOME}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>echo</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fail</span> <span class="token attr-name">unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jibx-home<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>JiBX home directory not found - define JIBX_HOME system property or set path directly in build.xml file.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fail</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fail</span> <span class="token attr-name">unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>runtime-jars-found<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Required JiBX runtime jar jibx-run.jar was not found in JiBX home lib directory (${jibx-home}/lib)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fail</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- make sure extras jars are present --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>check-extras<span class="token punctuation">"</span></span> <span class="token attr-name">depends</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>check-runtime<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fail</span> <span class="token attr-name">unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>extras-jar-found<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Required JiBX extras jar jibx-extras.jar was not found in JiBX home lib directory (${jibx-home}/lib)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fail</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- make sure binding jars are present --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>check-binding<span class="token punctuation">"</span></span> <span class="token attr-name">depends</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>check-runtime<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fail</span> <span class="token attr-name">unless</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>binding-jars-found<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Required JiBX binding jar jibx-bind.jar or bcel.jar was not found in JiBX home lib directory (${jibx-home}/lib)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fail</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- clean compiled class files and output file --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clean<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">quiet</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${basedir}/target/classes/xml/pojo<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">quiet</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">file</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${basedir}/binding.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">quiet</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileset</span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${basedir}<span class="token punctuation">"</span></span> <span class="token attr-name">includes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>out*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileset</span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${basedir}<span class="token punctuation">"</span></span> <span class="token attr-name">includes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*.xsd<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- compile the classes --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>compile<span class="token punctuation">"</span></span> <span class="token attr-name">depends</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clean,check-runtime<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>echo</span> <span class="token attr-name">message</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Compiling Java source code<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">quiet</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${basedir}/target/classes/xml/pojo<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javac</span> <span class="token attr-name">srcdir</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${basedir}/src/main/java/xml/pojo<span class="token punctuation">"</span></span> <span class="token attr-name">destdir</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${basedir}/target/classes<span class="token punctuation">"</span></span> <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>on<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>classpath</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>javac</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- generate default binding and schema --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bindgen<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>echo</span> <span class="token attr-name">message</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Running BindGen tool<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java</span> <span class="token attr-name">classpathref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath<span class="token punctuation">"</span></span> <span class="token attr-name">fork</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">failonerror</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">classname</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.jibx.binding.generator.BindGen<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>-s<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${basedir}/src/main/java/xml/pojo<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xml.pojo.Order<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- bind as a separate step --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bind<span class="token punctuation">"</span></span> <span class="token attr-name">depends</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>check-binding<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>echo</span> <span class="token attr-name">message</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Running JiBX binding compiler<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>taskdef</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>bind<span class="token punctuation">"</span></span> <span class="token attr-name">classname</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.jibx.binding.ant.CompileTask<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>classpath</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileset</span> <span class="token attr-name">dir</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jibx-home}/lib<span class="token punctuation">"</span></span> <span class="token attr-name">includes</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*.jar<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>classpath</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>taskdef</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bind</span> <span class="token attr-name">binding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${basedir}/binding.xml<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>classpath</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>classpath<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bind</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- compile, generate default, compile binding, run test --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>full<span class="token punctuation">"</span></span> <span class="token attr-name">depends</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>compile,bindgen,bind<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>help<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>echo</span> <span class="token attr-name">message</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Targets are:<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>echo</span> <span class="token attr-name">message</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://sourceforge.net/projects/jibx<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在绑定过程中，Jibx会动态修改程序中相应的class文件，生成对象方法的实例和添加被绑定标记的属性。</p><p>HTTP请求消息编码的基类，利用jibx将对应的body数据编码为XML格式并封装进ByteBuf</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractHttpXmlEncoder</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">MessageToMessageEncoder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">IBindingFactory</span> factory<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">StringWriter</span> writer<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Charset</span> UTF_8 <span class="token operator">=</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">ByteBuf</span> <span class="token function">encode0</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JiBXException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        factory <span class="token operator">=</span> <span class="token class-name">BindingDirectory</span><span class="token punctuation">.</span><span class="token function">getFactory</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IMarshallingContext</span> mctx <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createMarshallingContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mctx<span class="token punctuation">.</span><span class="token function">setIndent</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mctx<span class="token punctuation">.</span><span class="token function">marshalDocument</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> writer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> xmlStr <span class="token operator">=</span> writer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Unpooled</span><span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span>xmlStr<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>writer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HTTP解码的基类，在创建时传入一个class对象，告诉解码器自己解码的目标是谁。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractHttpXmlDecoder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">MessageToMessageDecoder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">IBindingFactory</span> factory<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">StringReader</span> reader<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isPrint<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Charset</span> UTF_8 <span class="token operator">=</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token class-name">CharsetName</span> <span class="token operator">=</span> <span class="token string">"UTF-8"</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">AbstractHttpXmlDecoder</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token class-name">AbstractHttpXmlDecoder</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isPrint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clazz <span class="token operator">=</span> clazz<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isPrint <span class="token operator">=</span> isPrint<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">decode0</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">ByteBuf</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JiBXException</span> <span class="token punctuation">{</span>        factory <span class="token operator">=</span> <span class="token class-name">BindingDirectory</span><span class="token punctuation">.</span><span class="token function">getFactory</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> content <span class="token operator">=</span> body<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isPrint<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The body is :"</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IUnmarshallingContext</span> uctx <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createUnmarshallingContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> uctx<span class="token punctuation">.</span><span class="token function">unmarshalDocument</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        reader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>reader <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            reader <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就是请求与响应的编解码器实现</p><p>请求编码器将HTTP+XML请求转换为HTTP请求，交给Netty传输 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpXmlRequestEncoder</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractHttpXmlEncoder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpXmlRequest</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">HttpXmlRequest</span> msg<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">ByteBuf</span> body <span class="token operator">=</span> <span class="token function">encode0</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FullHttpRequest</span> request <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果已经自定义了请求头，不做修改；否则使用默认请求头</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultFullHttpRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpVersion</span><span class="token punctuation">.</span>HTTP_1_1<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span> <span class="token string">"/do"</span><span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders<span class="token punctuation">.</span>Names</span><span class="token punctuation">.</span>HOST<span class="token punctuation">,</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders<span class="token punctuation">.</span>Names</span><span class="token punctuation">.</span>CONNECTION<span class="token punctuation">,</span> <span class="token class-name">HttpHeaders<span class="token punctuation">.</span>Values</span><span class="token punctuation">.</span>CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>            headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders<span class="token punctuation">.</span>Names</span><span class="token punctuation">.</span>ACCEPT_ENCODING<span class="token punctuation">,</span> <span class="token class-name">HttpHeaders<span class="token punctuation">.</span>Values</span><span class="token punctuation">.</span>GZIP <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token class-name">HttpHeaders<span class="token punctuation">.</span>Values</span><span class="token punctuation">.</span>DEFLATE<span class="token punctuation">)</span><span class="token punctuation">;</span>            headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders<span class="token punctuation">.</span>Names</span><span class="token punctuation">.</span>ACCEPT_CHARSET<span class="token punctuation">,</span> <span class="token string">"ISO-8859-1,utf-8;q=0.7,*;q=0.7"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders<span class="token punctuation">.</span>Names</span><span class="token punctuation">.</span>ACCEPT_LANGUAGE<span class="token punctuation">,</span> <span class="token string">"zh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders<span class="token punctuation">.</span>Names</span><span class="token punctuation">.</span>USER_AGENT<span class="token punctuation">,</span> <span class="token string">"Netty xml Http Client side"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders<span class="token punctuation">.</span>Names</span><span class="token punctuation">.</span>ACCEPT<span class="token punctuation">,</span> <span class="token string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 由于请求的消息体不为空也没有使用Chunk方式，因此在消息头中设置消息体的长度</span>        <span class="token class-name">HttpHeaders</span><span class="token punctuation">.</span><span class="token function">setContentLength</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> body<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请求解码器则是获得一个HTTP请求，将他按照HTTP+XML的规则解码出来</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpXmlRequestDecoder</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractHttpXmlDecoder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FullHttpRequest</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">HttpXmlRequestDecoder</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">HttpXmlRequestDecoder</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isPrint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> isPrint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">FullHttpRequest</span> msg<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>msg<span class="token punctuation">.</span><span class="token function">getDecoderResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">sendError</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token class-name">HttpResponseStatus</span><span class="token punctuation">.</span>BAD_REQUEST<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">HttpXmlRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpXmlRequest</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token function">decode0</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sendError</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">HttpResponseStatus</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">FullHttpResponse</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultFullHttpResponse</span><span class="token punctuation">(</span><span class="token class-name">HttpVersion</span><span class="token punctuation">.</span>HTTP_1_1<span class="token punctuation">,</span> status<span class="token punctuation">,</span>                <span class="token class-name">Unpooled</span><span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"Failure: "</span> <span class="token operator">+</span> status <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">,</span> <span class="token class-name">CharsetUtil</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>CONTENT_TYPE<span class="token punctuation">,</span> <span class="token string">"text/plain; charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">ChannelFutureListener</span><span class="token punctuation">.</span>CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>响应解码器是将一个HTTP响应转换为HTTP+XML的格式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpXmlResponseDecoder</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractHttpXmlDecoder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DefaultFullHttpResponse</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">HttpXmlResponseDecoder</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">HttpXmlResponseDecoder</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isPrint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> isPrint<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">DefaultFullHttpResponse</span> msg<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">HttpXmlResponse</span> resp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpXmlResponse</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token function">decode0</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>响应编码器将HTTP+XML响应按照对应格式编码然后交给Netty的协议栈传输</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpXmlResponseEncoder</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractHttpXmlEncoder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpXmlResponse</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">HttpXmlResponse</span> msg<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">ByteBuf</span> body <span class="token operator">=</span> <span class="token function">encode0</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span>  msg<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FullHttpResponse</span> resp <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resp <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            resp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultFullHttpResponse</span><span class="token punctuation">(</span><span class="token class-name">HttpVersion</span><span class="token punctuation">.</span>HTTP_1_1<span class="token punctuation">,</span> <span class="token class-name">HttpResponseStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            resp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultFullHttpResponse</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProtocolVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        resp<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>CONTENT_TYPE<span class="token punctuation">,</span> <span class="token string">"text/xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentLength</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> body<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后来看看客户端和服务端的实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpXmlClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">EventLoopGroup</span> group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Bootstrap</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span><span class="token class-name">ChannelOption</span><span class="token punctuation">.</span>TCP_NODELAY<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token annotation punctuation">@Override</span>                        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>                            <span class="token class-name">ChannelPipeline</span> pipeline <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">// 将二进制码流转换为响应</span>                            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"http-decoder"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HttpResponseDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">// 将单个消息的多个部分合并成一条完整的HTTP消息</span>                            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"http-aggregator"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HttpObjectAggregator</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">// 解码为xml响应</span>                            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"xml-decoder"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HttpXmlResponseDecoder</span><span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"http-encoder"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequestEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"xml-encoder"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HttpXmlRequestEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">// tips: 当客户端业务逻辑完成后，会沿着pipeline反向退出去，因此自定义的encoder需要放在后面</span>                            <span class="token comment">// 先将消息编码为xmlrequest再交给httpencoder</span>                            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"xmlClientHandler"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HttpXmlClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ChannelFuture</span> f <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            group<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">HttpXmlClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpXmlClientHandler</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleChannelInboundHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpXmlResponse</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">HttpXmlRequest</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpXmlRequest</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">OrderFactory</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">messageReceived</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">HttpXmlResponse</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The client receive response of http header is :"</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">names</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The client receive response of http body is: "</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpXmlServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">EventLoopGroup</span> bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EventLoopGroup</span> workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">ServerBootstrap</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span> workerGroup<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token annotation punctuation">@Override</span>                        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>                            <span class="token class-name">ChannelPipeline</span> p <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            p<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"http-decoder"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HttpRequestDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            p<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"http-aggregator"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HttpObjectAggregator</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            p<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"xml-decoder"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HttpXmlRequestDecoder</span><span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            p<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"http-encoder"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HttpResponseEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            p<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"xml-encoder"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HttpXmlResponseEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            p<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"xmlServerHandler"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HttpXmlServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ChannelFuture</span> f <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"HTTP订阅服务器启动，网址为：http://localhost:"</span> <span class="token operator">+</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            bossGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            workerGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">HttpXmlServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HttpXmlServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleChannelInboundHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpXmlRequest</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">messageReceived</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">HttpXmlRequest</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">FullHttpRequest</span> request <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token punctuation">)</span> msg<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Http server receive request :"</span> <span class="token operator">+</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">doBusiness</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ChannelFuture</span> f <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpXmlResponse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isKeepAlive</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            f<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>future <span class="token operator">-&gt;</span> ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doBusiness</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        order<span class="token punctuation">.</span><span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setFirstName</span><span class="token punctuation">(</span><span class="token string">"狄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setLastName</span><span class="token punctuation">(</span><span class="token string">"仁杰"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> midNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        midNames<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"李元芳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">getCustomer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMiddleName</span><span class="token punctuation">(</span>midNames<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Address</span> address <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">getBillTo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        address<span class="token punctuation">.</span><span class="token function">setCountry</span><span class="token punctuation">(</span><span class="token string">"大唐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        address<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token string">"河南道"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        address<span class="token punctuation">.</span><span class="token function">setPostCode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">setBillTo</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        order<span class="token punctuation">.</span><span class="token function">setShipTo</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        cause<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">sendError</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> INTERNAL_SERVER_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sendError</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span>                                  <span class="token class-name">HttpResponseStatus</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">FullHttpResponse</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultFullHttpResponse</span><span class="token punctuation">(</span>HTTP_1_1<span class="token punctuation">,</span>                status<span class="token punctuation">,</span> <span class="token class-name">Unpooled</span><span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"失败: "</span> <span class="token operator">+</span> status                <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">,</span> <span class="token class-name">CharsetUtil</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>CONTENT_TYPE<span class="token punctuation">,</span> <span class="token string">"text/plain; charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">ChannelFutureListener</span><span class="token punctuation">.</span>CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><aside>🚨 tips: 当客户端业务逻辑完成后，会沿着pipeline反向退出去，因此自定义的encoder需要放在后面,先将消息编码为XmlRequest再交给HttpEncoder。服务端同理</aside><h2 id="WebSocket协议开发"><a href="#WebSocket协议开发" class="headerlink" title="WebSocket协议开发"></a>WebSocket协议开发</h2><ul><li><p>HTTP协议的弊端</p><p>  HTTP协议为半双工协议，在同一时刻只有一个方向上的数据传送</p><p>  HTTP消息冗长而繁琐，通常情况下采用文本传输，和二进制通信协议相比，冗长而繁琐。</p><p>  易遭黑客攻击</p></li></ul><p>WebSocket是HTML5开始提供的一种浏览器与服务器间进行全双工通信的网络技术。在WebSocket API中，浏览器和服务器<strong>只需要一次握手</strong>就可以形成一条快速通道。</p><p>因此WebSocket的特点如下：</p><ul><li>单一的TCP连接，采用全双工模式通信</li><li>对代理、防火墙和路由器透明</li><li>无头部信息、Cookie和身份验证</li><li>无安全开销</li><li>通过ping/pong帧保持链路激活</li><li>服务器可以主动传递消息给客户端，不再需要客户端轮询</li></ul><h3 id="WebSocket连接建立"><a href="#WebSocket连接建立" class="headerlink" title="WebSocket连接建立"></a>WebSocket连接建立</h3><p>客户端首先向服务器发起一个HTTP请求，该请求和通常的HTTP请求不同，他还包含了一些附加头信息</p><pre class="line-numbers language-none"><code class="language-none">GET /chat HTTP/1.1HOST: ...Upgrade: websocketConnection: UpgradeSec-WebSocket-Key: ...Origin: Sec-WebSocket-Protocol:Sec-WebSocket-Version:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子展现了一个客户端发出请求的大致头部格式。其中<code>Upgrade</code>字段表示这是一个申请协议升级的HTTP请求。服务器解析这个头部信息后就将响应返回给客户端，连接就此建立起来。</p><p>响应格式大致为：</p><pre class="line-numbers language-none"><code class="language-none">HTTP/1.1 101 Switching ProtocolsUpgrade: websocketConnection: UpgradeSec-WebSocket-Accept: ...Sec-WebSocket-Protocol: ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Sec-WebSocket-Accept</code>是随机的，服务端会用这些数据构造出一个SHA-1的信息摘要然后加上一个魔幻字符串，接着进行SHA-1加密最后进行BASE-64编码。生成一个<code>Sec-WebSocket-Accept</code>的值。</p><p>Netty实现WebSocket服务器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">EventLoopGroup</span> bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EventLoopGroup</span> workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">ServerBootstrap</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            b<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span> workerGroup<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SocketChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token annotation punctuation">@Override</span>                        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">SocketChannel</span> ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>                            <span class="token class-name">ChannelPipeline</span> p <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">// 将请求和应答消息编码或解码为HTTP消息</span>                            p<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"http-codec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HttpServerCodec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            p<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"aggregator"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HttpObjectAggregator</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            p<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"http-chunked"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ChunkedWriteHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            p<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"handler"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">WebSocketServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ChannelFuture</span> f <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Web Socket server started at localhost:"</span> <span class="token operator">+</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>            f<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            bossGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            workerGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">WebSocketServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当接收到一个请求后，处理流程如下：</p><ol><li>判断请求类型</li><li>如果是HTTP请求，代表这是一次连接建立请求<ol><li>判断该请求是否要建立WebSocket连接</li><li>建立握手工厂</li><li>根据发送来的请求，返回握手响应</li></ol></li><li>如果是WebSocket请求，这根据请求类型进行相应的业务处理</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleChannelInboundHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">WebSocketServerHandshaker</span> serverHandshaker<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">messageReceived</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果是一次HTTP请求，就代表客户端正在尝试建立连接</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">FullHttpRequest</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">handleHttpRequest</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">FullHttpRequest</span><span class="token punctuation">)</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">WebSocketFrame</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">handleWebSocketFrame</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">WebSocketFrame</span><span class="token punctuation">)</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleWebSocketFrame</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">WebSocketFrame</span> frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>frame <span class="token keyword">instanceof</span> <span class="token class-name">CloseWebSocketFrame</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            serverHandshaker<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">CloseWebSocketFrame</span><span class="token punctuation">)</span> frame<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>frame <span class="token keyword">instanceof</span> <span class="token class-name">PingWebSocketFrame</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PongWebSocketFrame</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">retain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>frame <span class="token keyword">instanceof</span> <span class="token class-name">TextWebSocketFrame</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s frame types not supported"</span><span class="token punctuation">,</span> frame<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">String</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TextWebSocketFrame</span><span class="token punctuation">)</span> frame<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s received %s"</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextWebSocketFrame</span><span class="token punctuation">(</span>request <span class="token operator">+</span> <span class="token string">" 欢迎使用WebSocket 现在是北京时间 "</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">handleHttpRequest</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">FullHttpRequest</span> req<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span><span class="token function">getDecoderResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token string">"websocket"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"Upgrade"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">sendHttpResponse</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> req<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DefaultFullHttpResponse</span><span class="token punctuation">(</span><span class="token class-name">HttpVersion</span><span class="token punctuation">.</span>HTTP_1_1<span class="token punctuation">,</span> <span class="token class-name">HttpResponseStatus</span><span class="token punctuation">.</span>BAD_REQUEST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 参数：</span>        <span class="token comment">// 1. 用于WebSocket交互的URL，之后的所有请求都会发往这个URL</span>        <span class="token comment">// 2. 支持的子协议</span>        <span class="token comment">// 3. 是否允许位扩展</span>        <span class="token class-name">WebSocketServerHandshakerFactory</span> factory <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">WebSocketServerHandshakerFactory</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:8080/websocket"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        serverHandshaker <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">newHandshaker</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 返回握手响应</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>serverHandshaker <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">WebSocketServerHandshakerFactory</span><span class="token punctuation">.</span><span class="token function">sendUnsupportedWebSocketVersionResponse</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            serverHandshaker<span class="token punctuation">.</span><span class="token function">handshake</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> req<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sendHttpResponse</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">FullHttpRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">FullHttpResponse</span> resp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resp<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">ByteBuf</span> buf <span class="token operator">=</span> <span class="token class-name">Unpooled</span><span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            resp<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>            buf<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setContentLength</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> resp<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">ChannelFuture</span> f <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isKeepAlive</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token operator">||</span> resp<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            f<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">ChannelFutureListener</span><span class="token punctuation">.</span>CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelReadComplete</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="服务端创建"><a href="#服务端创建" class="headerlink" title="服务端创建"></a>服务端创建</h2><p>步骤：</p><ol><li>创建ServerBootstrap实例，它提供了一系列方法用于设置服务端启动相关参数。底层利用<strong>门面模式</strong>对各种能力进行封装</li><li>设置并构造Reactor线程池，也就是<code>EventLoopGroup</code>。它的本质就是EventLoop的数组，EventLoop的职责就是处理所有注册到本线程多路复用器的Channel。需要注意的是，EventLoop不光是处理网络IO事件，同时还会处理用户自定义的task和定时任务。这样就实现了一个统一的线程模型。</li><li>设置并绑定服务端Channel，对用户而言不需要了解服务端Channel的底层实现和工作原理，只需要指定具体使用哪种Channel即可。Netty在底层会通过工厂类，利用反射创建用户传入的Channel对象。</li><li>链路创建的时候创建并初始化ChannelPipeline，它的本质是一个负责处理网络事件的职责链，负责管理和执行ChannelHandler。典型的网络事件如下：<ol><li>链路注册</li><li>链路激活</li><li>链路断开</li><li>接收到请求消息</li><li>请求消息接收并处理完毕</li><li>发送应答消息</li><li>链路发生异常</li><li>发生用户自定义事件</li></ol></li><li>添加并设置ChannelHandler</li><li>绑定并启动端口。在绑定监听端口之前系统会进行一系列的初始化和检测工作，完成之后会启动监听端口，并将ServerSocketChannel注册到Selector上监听客户端连接。</li><li>Selector轮询。由Reactor线程负责调度和执行Selector轮询操作，选择准备就绪的Channel集合</li><li>当轮询到准备就绪的Channel之后，就由Reactor线程执行ChannelPipeline的相应方法，最终调度并执行ChannelHandler</li><li>执行Netty系统ChannelHandler和用户自定义的ChannelHandler。ChannelPipeline会<strong>根据网络事件的类型</strong>，调度并执行ChannelHandler</li></ol><p>接下根据源码分析一下Netty的服务端创建</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ServerBootstrapChannelFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">ServerChannel</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">ServerChannelFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">;</span>      <span class="token class-name">ServerBootstrapChannelFactory</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>clazz <span class="token operator">=</span> clazz<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">newChannel</span><span class="token punctuation">(</span><span class="token class-name">EventLoop</span> eventLoop<span class="token punctuation">,</span> <span class="token class-name">EventLoopGroup</span> childGroup<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> constructor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">EventLoop</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">EventLoopGroup</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ServerChannel</span><span class="token punctuation">)</span>constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>eventLoop<span class="token punctuation">,</span> childGroup<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ChannelException</span><span class="token punctuation">(</span><span class="token string">"Unable to create Channel from class "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clazz<span class="token punctuation">,</span> var4<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">simpleClassName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>clazz<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面是Netty服务端的Channel工厂创建，当调用<code>channel()</code>方法时，bootstrap的内部就会根据传入的class创建一个对应的工厂</p><p>在此之后需要设置一些TCP连接的参数，其中最主要的就是backlog这个参数，它指定了内核为此套接字接口安排的最大队列容量，也就是全连接队列+半连接队列的容量总和。</p><p>接着用户就可以为启动辅助类和其父类分别指定Handler，两类Handler的用途不同。子类中的Handler是用于连接后的相关业务逻辑，算是工作线程需要的处理器。而父类中的Handler则是负责处理客户端的连接操作</p><p>最后就是服务端的绑定操作了，先来大体看一下Netty绑定操作的逻辑。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">ChannelFuture</span> <span class="token function">doBind</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SocketAddress</span> localAddress<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">final</span> <span class="token class-name">ChannelFuture</span> regFuture <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initAndRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// No.1</span>      <span class="token keyword">final</span> <span class="token class-name">Channel</span> channel <span class="token operator">=</span> regFuture<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>regFuture<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> regFuture<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">final</span> <span class="token class-name">Object</span> promise<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>regFuture<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              promise <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">newPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">doBind0</span><span class="token punctuation">(</span>regFuture<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> localAddress<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">ChannelPromise</span><span class="token punctuation">)</span>promise<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultChannelPromise</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> <span class="token class-name">GlobalEventExecutor</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">;</span>              regFuture<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelFutureListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">ChannelFuture</span> future<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>                      <span class="token class-name">AbstractBootstrap</span><span class="token punctuation">.</span><span class="token function">doBind0</span><span class="token punctuation">(</span>regFuture<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> localAddress<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">ChannelPromise</span><span class="token punctuation">)</span>promise<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ChannelFuture</span><span class="token punctuation">)</span>promise<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先看No.1标注的一行，进行初始化并注册，它的操作如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">ChannelFuture</span> <span class="token function">initAndRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Channel</span> channel<span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          channel <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token class-name">VoidChannel</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">.</span><span class="token function">newFailedFuture</span><span class="token punctuation">(</span>var4<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>          channel<span class="token punctuation">.</span><span class="token function">unsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeForcibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> channel<span class="token punctuation">.</span><span class="token function">newFailedFuture</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token class-name">ChannelPromise</span> regFuture <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">newPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      channel<span class="token punctuation">.</span><span class="token function">unsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>regFuture<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>regFuture<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>channel<span class="token punctuation">.</span><span class="token function">isRegistered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              channel<span class="token punctuation">.</span><span class="token function">unsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeForcibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> regFuture<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一步是创建Channel，也就是调用之前创建好的Channel工厂类创建一个新的Channel。接着初始化这个Channel。这里看一下他都初始化了一些什么东西：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token comment">//首先设置一下Socket参数</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ChannelOption</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> options <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>        channel<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setOptions</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 然后加上NioServerSocketChannel的附加属性</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttributeKey</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> attrs <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span>attrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Iterator</span> i$ <span class="token operator">=</span> attrs<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>i$<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AttributeKey</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">)</span>i$<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">AttributeKey</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AttributeKey</span><span class="token punctuation">)</span>e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            channel<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token comment">// 接着将AbstractBootstrap的Handler(就是调用channel()方法添加的Handler)添加到NioServerSocketChannel的ChannelPipeline当中。</span>    <span class="token class-name">ChannelPipeline</span> p <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        p<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelHandler</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 然后将ChildHandler的相关配置导入</span>    <span class="token keyword">final</span> <span class="token class-name">ChannelHandler</span> currentChildHandler <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>childHandler<span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">[</span><span class="token punctuation">]</span> currentChildOptions<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>childOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>        currentChildOptions <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>childOptions<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token function">newOptionArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>childOptions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">[</span><span class="token punctuation">]</span> currentChildAttrs<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>childAttrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        currentChildAttrs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>childAttrs<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token function">newAttrArray</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>childAttrs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">// 最后将用于服务端注册的HandlerServerBootstrapAcceptor添加到ChannelPipeline当中，Acceptor的构造器中包含了subReactor需要的处理器</span>    p<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelHandler</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Channel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelHandler</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">ServerBootstrapAcceptor</span><span class="token punctuation">(</span>currentChildHandler<span class="token punctuation">,</span> currentChildOptions<span class="token punctuation">,</span> currentChildAttrs<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总的来说，这个方法的初始化与注册包括了创建Channel，初始化Channel的配置，添加Channel中的Handler。梳理一下就是，请求进入服务器，先被mainReactor接收，并经过<code>handler()</code>定义的处理器。然后连接建立完成，自然的进入了Acceptor，Acceptor当中包含了读写操作需要的相关Handler，相当于进入了subReactor。</p><p>最后来看一下Channel的注册操作，当Channel初始化完成后就会将它注册到Reactor线程的多路复用器上去。首先会判断是否是NioEventLoop自身发起的操作，如果是就代表不存在并发操作，直接注册。否则将注册操作封装成一个Task放入消息队列异步执行。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">AbstractChannel</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>eventLoop<span class="token punctuation">.</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">register0</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token class-name">AbstractChannel</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>eventLoop<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token class-name">AbstractUnsafe</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">register0</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">AbstractChannel</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Force-closing a channel whose registration task was not accepted by an event loop: {}"</span><span class="token punctuation">,</span> <span class="token class-name">AbstractChannel</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> var3<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closeForcibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">AbstractChannel</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>closeFuture<span class="token punctuation">.</span><span class="token function">setClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              promise<span class="token punctuation">.</span><span class="token function">setFailure</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">register0</span><span class="token punctuation">(</span><span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensureOpen</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token class-name">AbstractChannel</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">AbstractChannel</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>registered <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          promise<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">AbstractChannel</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span><span class="token function">fireChannelRegistered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">AbstractChannel</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">AbstractChannel</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>pipeline<span class="token punctuation">.</span><span class="token function">fireChannelActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">closeForcibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">AbstractChannel</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>closeFuture<span class="token punctuation">.</span><span class="token function">setClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>promise<span class="token punctuation">.</span><span class="token function">tryFailure</span><span class="token punctuation">(</span>var3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">AbstractChannel</span><span class="token punctuation">.</span>logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Tried to fail the registration promise, but it is complete already. Swallowing the cause of the registration failure:"</span><span class="token punctuation">,</span> var3<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一部分是具体的操作，将Channel注册到对应的eventLoop上去，由于不同的Channel有不同的用法，因此这里的注册位设置为0(表示只注册，不监听任何网络操作)。在后续有需要的时候将自己的操作位修改为感兴趣的事件。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> selected <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>selectionKey <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">javaChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>selector<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CancelledKeyException</span> var3<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>selected<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> var3<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">selectNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            selected <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="客户端接入"><a href="#客户端接入" class="headerlink" title="客户端接入"></a>客户端接入</h2><p>负责处理网络读写、连接和客户端请求接入的Reactor线程是NioEventLoop，当多路复用器检测到新的准备就绪的Channel时，默认执行<code>processSelectedKeysOptimized()</code>方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>selectedKeys <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">processSelectedKeysOptimized</span><span class="token punctuation">(</span>selectedKeys<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">processSelectedKeysPlain</span><span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面的代码展示Netty时如何根据不同的操作位选择不同操作的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">processSelectedKey</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> k<span class="token punctuation">,</span> <span class="token class-name">AbstractNioChannel</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">NioUnsafe</span> unsafe <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">unsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// close the channel if the key is not valid anymore</span>        unsafe<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">voidPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> readyOps <span class="token operator">=</span> k<span class="token punctuation">.</span><span class="token function">readyOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Also check for readOps of 0 to workaround possible JDK bug which may otherwise lead</span>        <span class="token comment">// to a spin loop</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readyOps <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ <span class="token operator">|</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> readyOps <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            unsafe<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ch<span class="token punctuation">.</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// Connection already closed - no need to handle write.</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readyOps <span class="token operator">&amp;</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_WRITE<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// Call forceFlush which will also take care of clear the OP_WRITE once there is nothing left to write</span>            ch<span class="token punctuation">.</span><span class="token function">unsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forceFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readyOps <span class="token operator">&amp;</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_CONNECT<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// remove OP_CONNECT as otherwise Selector.select(..) will always return without blocking</span>            <span class="token comment">// See https://github.com/netty/netty/issues/924</span>            <span class="token keyword">int</span> ops <span class="token operator">=</span> k<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ops <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_CONNECT<span class="token punctuation">;</span>            k<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span>ops<span class="token punctuation">)</span><span class="token punctuation">;</span>            unsafe<span class="token punctuation">.</span><span class="token function">finishConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CancelledKeyException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        unsafe<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">voidPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于Channel绑定的是<code>NioServerSocketChannel</code>，因此在监听连接操作时，执行的是<code>NioMessageUnsafe</code>中的<code>read</code>方法。它里面会调用<code>doReadMessage</code>方法，接收新的客户端连接并创建<code>NioSocketChannel</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">assert</span> <span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAutoRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">removeReadOp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">final</span> <span class="token class-name">ChannelConfig</span> config <span class="token operator">=</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">final</span> <span class="token keyword">int</span> maxMessagesPerRead <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getMaxMessagesPerRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">final</span> <span class="token keyword">boolean</span> autoRead <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">isAutoRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">final</span> <span class="token class-name">ChannelPipeline</span> pipeline <span class="token operator">=</span> <span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">boolean</span> closed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token class-name">Throwable</span> exception <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">int</span> localRead <span class="token operator">=</span> <span class="token function">doReadMessages</span><span class="token punctuation">(</span>readBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>localRead <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>localRead <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  closed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>readBuf<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> maxMessagesPerRead <span class="token operator">|</span> <span class="token operator">!</span>autoRead<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>          exception <span class="token operator">=</span> t<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">int</span> size <span class="token operator">=</span> readBuf<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          pipeline<span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>readBuf<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      readBuf<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      pipeline<span class="token punctuation">.</span><span class="token function">fireChannelReadComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">instanceof</span> <span class="token class-name">IOException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">// ServerChannel should not be closed even on IOException because it can often continue</span>              <span class="token comment">// accepting incoming connections. (e.g. too many open files)</span>              closed <span class="token operator">=</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token class-name">AbstractNioMessageChannel</span><span class="token punctuation">.</span><span class="token keyword">this</span> <span class="token keyword">instanceof</span> <span class="token class-name">ServerChannel</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          pipeline<span class="token punctuation">.</span><span class="token function">fireExceptionCaught</span><span class="token punctuation">(</span>exception<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>closed<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">close</span><span class="token punctuation">(</span><span class="token function">voidPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接收到连接后会触发ChannelPipeline的ChannelRead方法，然后事件就会在职责链中传递，执行<code>ServerBootstrapAcceptor</code>的<code>channelRead</code>方法。</p><p>这个方法主要有三个步骤：</p><ol><li>将启动时传入的childHandler加入到客户端SocketChannel的ChannelPipeline当中</li><li>设置SocketChannel的TCP参数</li><li>注册SocketChannel到多路复用器。</li></ol><h2 id="客户端创建"><a href="#客户端创建" class="headerlink" title="客户端创建"></a>客户端创建</h2><p>客户端创建时序图</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/notes/Untitled%205.png" alt="Untitled"></p><p>步骤：</p><ol><li>创建Bootstrap实例，通过API设置客户端相关参数，异步发起客户端连接</li><li>创建处理客户端连接，I/O读写的Reactor线程组NioEventLoopGroup。可以通过构造函数指定I/O线程的个数，一般为CPU核心数的两倍。</li><li>通过ChannelFactory和用户指定的Channel创建用于客户端连接的NioSocketChannel。</li><li>创建默认的Channel Handler Pipeline，用于调度和处理网络事件</li><li>异步发起TCP连接，判断是否成功。如果成功，就直接讲NioSocketChannel注册到多路复用器上，监听读操作位。如果没有立即连接成功，就注册连接监听器到多路复用器。</li><li>注册对应的网络监听状态位到多路复用器</li><li>由多路复用器在I/O线程中轮询Channel，处理连接结果。</li><li>由ChannelPipeline调度执行系统和用户的ChannelHandler</li></ol><p>客户端创建的初始化操作大体与服务端相同，这里讲一下客户端主要的TCP参数：</p><ul><li><p>SO_TIMEOUT：控制读取操作讲阻塞多少毫秒</p></li><li><p>SO_SENDBUF：套接字使用的发送缓冲区大小</p></li><li><p>SO_RECVBUF：套接字使用的接收缓冲区大小</p></li><li><p>SO_REUSEADDR：用于决定如果网络上仍然有向旧ServerSocket传输数据，是否允许新的ServerSocket绑定到与旧的ServerSocket同样的端口上。</p></li><li><p>CONNECT_TIMEOUT_MILLS：客户端连接超时时间</p></li><li><p>TCP_NODELAY：决定是否使用<code>[Nagle](https://www.notion.so/5a82efca437b4c9b981b62b8e67412ae)</code>算法</p></li><li><p>客户端连接</p><p>  首先还是大致看一下Netty客户端的连接总体操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">ChannelFuture</span> <span class="token function">doConnect</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SocketAddress</span> remoteAddress<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SocketAddress</span> localAddress<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">ChannelFuture</span> regFuture <span class="token operator">=</span> <span class="token function">initAndRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token class-name">Channel</span> channel <span class="token operator">=</span> regFuture<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>regFuture<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> regFuture<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token class-name">ChannelPromise</span> promise <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">newPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>regFuture<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">doConnect0</span><span class="token punctuation">(</span>regFuture<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> remoteAddress<span class="token punctuation">,</span> localAddress<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        regFuture<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelFutureListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">ChannelFuture</span> future<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>                <span class="token function">doConnect0</span><span class="token punctuation">(</span>regFuture<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> remoteAddress<span class="token punctuation">,</span> localAddress<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> promise<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  第一步还是初始化并注册Channel，步骤和服务端一样，这里不再赘述。</p><p>  接下来判断注册是否完成，如果注册完毕，就直接开始尝试连接，否则添加一个监听器，在注册完成之后开始连接。</p><p>  之后讲重点放到<code>doConnect0</code>这个方法上</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doConnect0</span><span class="token punctuation">(</span>        <span class="token keyword">final</span> <span class="token class-name">ChannelFuture</span> regFuture<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span>        <span class="token keyword">final</span> <span class="token class-name">SocketAddress</span> remoteAddress<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SocketAddress</span> localAddress<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// This method is invoked before channelRegistered() is triggered.  Give user handlers a chance to set up</span>    <span class="token comment">// the pipeline in its channelRegistered() implementation.</span>    channel<span class="token punctuation">.</span><span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>regFuture<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>localAddress <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    channel<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>remoteAddress<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    channel<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>remoteAddress<span class="token punctuation">,</span> localAddress<span class="token punctuation">,</span> promise<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                promise<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token class-name">ChannelFutureListener</span><span class="token punctuation">.</span>CLOSE_ON_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                promise<span class="token punctuation">.</span><span class="token function">setFailure</span><span class="token punctuation">(</span>regFuture<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  从这里开始，连接操作交给Reactor线程组异步执行，客户端返回。</p><p>  此后，连接操作最终会调用<code>HeadHandler</code>的<code>connect</code>方法，他又会调用<code>AbstractNioUnsafe</code>的<code>connect</code>方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span>        <span class="token keyword">final</span> <span class="token class-name">SocketAddress</span> remoteAddress<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SocketAddress</span> localAddress<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ensureOpen</span><span class="token punctuation">(</span>promise<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>connectPromise <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"connection attempt already made"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> wasActive <span class="token operator">=</span> <span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">doConnect</span><span class="token punctuation">(</span>remoteAddress<span class="token punctuation">,</span> localAddress<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">fulfillConnectPromise</span><span class="token punctuation">(</span>promise<span class="token punctuation">,</span> wasActive<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            connectPromise <span class="token operator">=</span> promise<span class="token punctuation">;</span>            requestedRemoteAddress <span class="token operator">=</span> remoteAddress<span class="token punctuation">;</span>            <span class="token comment">// Schedule connect timeout.</span>            <span class="token keyword">int</span> connectTimeoutMillis <span class="token operator">=</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConnectTimeoutMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>connectTimeoutMillis <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                connectTimeoutFuture <span class="token operator">=</span> <span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token class-name">ChannelPromise</span> connectPromise <span class="token operator">=</span> <span class="token class-name">AbstractNioChannel</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>connectPromise<span class="token punctuation">;</span>                        <span class="token class-name">ConnectTimeoutException</span> cause <span class="token operator">=</span>                                <span class="token keyword">new</span> <span class="token class-name">ConnectTimeoutException</span><span class="token punctuation">(</span><span class="token string">"connection timed out: "</span> <span class="token operator">+</span> remoteAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>connectPromise <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> connectPromise<span class="token punctuation">.</span><span class="token function">tryFailure</span><span class="token punctuation">(</span>cause<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">close</span><span class="token punctuation">(</span><span class="token function">voidPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span> connectTimeoutMillis<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            promise<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelFutureListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span><span class="token class-name">ChannelFuture</span> future<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">isCancelled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>connectTimeoutFuture <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            connectTimeoutFuture<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        connectPromise <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                        <span class="token function">close</span><span class="token punctuation">(</span><span class="token function">voidPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token keyword">instanceof</span> <span class="token class-name">ConnectException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Throwable</span> newT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectException</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> remoteAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>            newT<span class="token punctuation">.</span><span class="token function">setStackTrace</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t <span class="token operator">=</span> newT<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        promise<span class="token punctuation">.</span><span class="token function">tryFailure</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">closeIfClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  他先会调用<code>doConnect</code>方法来尝试连接，这个方法是一个抽象方法，交给子类去实现。NioSocketChannel中的实现如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">doConnect</span><span class="token punctuation">(</span><span class="token class-name">SocketAddress</span> remoteAddress<span class="token punctuation">,</span> <span class="token class-name">SocketAddress</span> localAddress<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>localAddress <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">javaChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>localAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> connected <span class="token operator">=</span> <span class="token function">javaChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>remoteAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>connected<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">selectionKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_CONNECT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> connected<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">doClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  如果连接成功就返回true，若暂时没有连接上就将channel注册到CONNECT监听位并返回false。</p><p>  <code>HeadHandler</code>的<code>connect</code>方法根据doConnect返回的结果采取进一步操作。</p><p>  如果连接成功那么激活channelPipeline</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fulfillConnectPromise</span><span class="token punctuation">(</span><span class="token class-name">ChannelPromise</span> promise<span class="token punctuation">,</span> <span class="token keyword">boolean</span> wasActive<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// trySuccess() will return false if a user cancelled the connection attempt.</span>    <span class="token keyword">boolean</span> promiseSet <span class="token operator">=</span> promise<span class="token punctuation">.</span><span class="token function">trySuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Regardless if the connection attempt was cancelled, channelActive() event should be triggered,</span>    <span class="token comment">// because what happened is what happened.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>wasActive <span class="token operator">&amp;&amp;</span> <span class="token function">isActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fireChannelActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// If a user cancelled the connection attempt, close the channel, which is followed by channelInactive().</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>promiseSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">close</span><span class="token punctuation">(</span><span class="token function">voidPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  否则添加一个定时任务，如果达到了指定时间，还没有连接成功就判定超时，同时添加一个Listener，如果连接成功就取消超时计时器。</p></li></ul><h1 id="Netty源码分析"><a href="#Netty源码分析" class="headerlink" title="Netty源码分析"></a>Netty源码分析</h1><h2 id="ByteBuf和相关辅助类"><a href="#ByteBuf和相关辅助类" class="headerlink" title="ByteBuf和相关辅助类"></a>ByteBuf和相关辅助类</h2><p>ByteBuf在设计上使用了两个指针，readerIndex和writerIndex。读操作使用readerIndex，写操作使用writerIndex。在读取之后，0-readerIndex被视为discard的，调用<code>discardReadBytes</code>即可释放这部分空间。readerIndex-writerIndex之间的数据是可读取的，writerIndex到capacity之间的空间是可写的。</p><p>通过这种设计，ByteBuf极大简化了缓冲区的读写操作。</p><ul><li><p>ByteBuf的动态扩容</p></li><li><p>Discardable bytes</p><p>  相比于其他的Java对象，缓冲区的分配和释放是一个非常耗时的操作，因此要尽量重用他们。而缓冲区的动态扩容需要进行字节数组的复制，因此为了最大程度上提升性能，往往需要尽最大努力提升缓冲区的利用率。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">ByteBuf</span> <span class="token function">discardReadBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ensureAccessible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>readerIndex <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>readerIndex <span class="token operator">!=</span> writerIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setBytes</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> readerIndex<span class="token punctuation">,</span> writerIndex <span class="token operator">-</span> readerIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        writerIndex <span class="token operator">-=</span> readerIndex<span class="token punctuation">;</span>        <span class="token function">adjustMarkers</span><span class="token punctuation">(</span>readerIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        readerIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">adjustMarkers</span><span class="token punctuation">(</span>readerIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        writerIndex <span class="token operator">=</span> readerIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  上面就是discard操作的具体实现，它会进行字节数组的内存复制。因此频繁使用会导致性能下降</p></li><li><p>Mark and Reset</p><p>  当对缓冲区进行读操作时，调用mark操作会将当前位置的指针备份到mark变量当中，调用reset之后会将对应指针的值设为mark中的值。 </p></li><li><p>ByteBuf的分类</p><ul><li><p>从内存分配的角度：</p><ul><li><p>堆内存字节缓冲区：内存的分配和回收速度快，可以被JVM自动回收；缺点是如果进行Socket的I/O读写，需要额外做一个内存复制，将堆内存对应的缓冲区复制到Channel当中，性能会有一定的下降</p></li><li><p>直接内存字节缓冲区：在堆外进行内存分配，相比于堆内存，他的分配和回收速度会更慢一些，不过他写入或读取Socket Channel中的信息时，速度会更快，因为少了一次内存复制。</p><p>一般来说，在I/O通信线程的读写缓冲区使用<code>DirectByteBuf</code>，后端业务消息的编解码使用<code>HeapByteBuf</code>是最优的。</p></li></ul></li><li><p>从内存回收角度：</p><ul><li>基于对象池的ByteBuf</li><li>普通ByteBuf</li></ul></li></ul></li></ul><h2 id="内存池原理分析"><a href="#内存池原理分析" class="headerlink" title="内存池原理分析"></a>内存池原理分析</h2><p>为了集中管理内存的分配与释放，同时提高分配和释放时的性能，很多框架和应用都会通过预先申请一大块内存，然后通过提供相应的分配与释放接口来使用内存。这样一来，分配与释放的操作就被集中到了几个类或是几个函数当中，由于不再频繁使用系统调用来申请和释放内存，性能也就大大提高了。</p><p>Netty的内存池由多个Chunk组成，每一个Chunk则由一个或多个Page组成。Chunk用来组织和管理多个Page的内存分配与释放。Netty中Chunk的Page被构建成一个二叉树。</p><p>假设Page是4个字节，Chunk大小是32个字节，那么Chunk的结构如下图所示</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/notes/Untitled%206.png" alt="Untitled"></p><p>每个节点都记录了自己在整个内存池中的偏移地址，当某个节点的内存被分配出去后，会将该结点标记为已分配。</p><p>对于一个小于Page的内存，Netty在Page中完成分配，每个Page会被切分成<strong>大小相等</strong>的多个存储块。存储块的大小会由<strong>第一次申请的内存块大小</strong>决定。如果想要更改存储块的大小，那只能使用一个新的Page。</p><p>Page中存储区域使用一个long数组来记录存储区域的使用状况。每个元素中的1位用来表示一个存储块的使用情况。</p><h2 id="Channel和Unsafe"><a href="#Channel和Unsafe" class="headerlink" title="Channel和Unsafe"></a>Channel和Unsafe</h2><p>由于Netty基于事件驱动，因此在进行网络I/O操作时会触发<code>ChannelPipeline</code>中对应事件的方法，然后事件会在pipeline中传输，由对应的ChannelHandler对事件进行拦截和处理。</p><aside>💡 采用事件驱动的方式可以非常轻松的通过事件定义来划分事件拦截切面，相比于AOP具备更好的性能，但是功能基本等价</aside><h3 id="AbstractNioChannel源码分析"><a href="#AbstractNioChannel源码分析" class="headerlink" title="AbstractNioChannel源码分析"></a>AbstractNioChannel源码分析</h3><p>先来看看成员变量：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">InternalLogger</span> logger <span class="token operator">=</span>          <span class="token class-name">InternalLoggerFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">AbstractNioChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">SelectableChannel</span> ch<span class="token punctuation">;</span> <span class="token comment">// 用于设置SelectableChannel参数和进行I/O操作</span><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">int</span> readInterestOp<span class="token punctuation">;</span> <span class="token comment">// 代表读操作位</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">SelectionKey</span> selectionKey<span class="token punctuation">;</span> <span class="token comment">// Channel注册到线程组后返回的选择键，由于Channel会面对多个业务线程的并发写操作，因此需要使用volatile来保证修改的可见性</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> inputShutdown<span class="token punctuation">;</span><span class="token comment">/** * The future of the current connection attempt.  If not null, subsequent * connection attempts will fail. */</span><span class="token keyword">private</span> <span class="token class-name">ChannelPromise</span> connectPromise<span class="token punctuation">;</span> <span class="token comment">// 连接操作结果</span><span class="token keyword">private</span> <span class="token class-name">ScheduledFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> connectTimeoutFuture<span class="token punctuation">;</span> <span class="token comment">// 连接超时定时器</span><span class="token keyword">private</span> <span class="token class-name">SocketAddress</span> requestedRemoteAddress<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后来看一下他实现的主要API</p><p>首先是注册方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> selected <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            selectionKey <span class="token operator">=</span> <span class="token function">javaChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>selector<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CancelledKeyException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>selected<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// Force the Selector to select now as the "canceled" SelectionKey may still be</span>                <span class="token comment">// cached and not removed because no Select.select(..) operation was called yet.</span>                <span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">selectNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                selected <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">// We forced a select operation on the selector before but the SelectionKey is still cached</span>                <span class="token comment">// for whatever reason. JDK bug ?</span>                <span class="token keyword">throw</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用<code>SelectableChannel</code>的register方法，将当前的Channel注册到EventLoop的多路复用器上。注册时操作位设置为0，表示对任何事件都不感兴趣。注册时可以指定附件，也就是和selecionKey绑定的对象，之后可以通过这个key从多路复用器里获取绑定的Channel对象。</p><p>如果出现了CancelledKeyException就捕获并处理，若是第一次处理该异常，调用selectNow方法将已经取消的key从多路复用器上删除，并标记成功删除，继续发起下一次注册。如果在之后的注册中仍旧收到该异常，表明取消的键无法删除，这个BUG不该发生，抛给上层统一处理。</p><p>下面看一下处理读操作之前将网络操作位设置为读操作的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doBeginRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputShutdown<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token class-name">SelectionKey</span> selectionKey <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selectionKey<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>selectionKey<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> interestOps <span class="token operator">=</span> selectionKey<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>interestOps <span class="token operator">&amp;</span> readInterestOp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        selectionKey<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span>interestOps <span class="token operator">|</span> readInterestOp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先进行例行检查，然后检查当前操作位是否为读操作，如果不是就将操作位修改为读操作。</p><h3 id="AbstractNioByteChannel-源码分析"><a href="#AbstractNioByteChannel-源码分析" class="headerlink" title="AbstractNioByteChannel 源码分析"></a>AbstractNioByteChannel 源码分析</h3><p>该类的成员变量只有一个flushTask用来负责继续写半包消息。因此我们将主要目光放在API上。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doWrite</span><span class="token punctuation">(</span><span class="token class-name">ChannelOutboundBuffer</span> in<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> writeSpinCount <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span> msg <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// Wrote all messages.</span>            <span class="token function">clearOpWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来看一下核心方法<code>doWrite()</code>，首先从环形数组<code>ChannelOutboundBuffer</code>中弹出一条消息，判断该消息是否为空，如果为空就代表写入已经完成，清除写操作位。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token class-name">ByteBuf</span> buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span>  <span class="token keyword">int</span> readableBytes <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>readableBytes <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      in<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">boolean</span> setOpWrite <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">long</span> flushedAmount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>writeSpinCount <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      writeSpinCount <span class="token operator">=</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getWriteSpinCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>否则就判断获得到的消息是否为<code>ByteBuf</code>类型，判断它是否还有字节可读，如果没有就直接把它从环形数组中删除并继续读取。</p><p>如果缓冲区中有字节可读，就先设置一系列局部变量，<strong>写半包表示</strong>，<strong>消息是否全部发送标识</strong>，<strong>发送的总消息字节数</strong>。接着判断循环发送次数是否为-1，如果是，就从配置对象中获取循环发送次数。</p><aside>✂️ 设置写半包最大循环次数的原因是，当循环发送的时候，I/O线程会一直尝试写操作，此时I/O线程无法处理其他的I/O操作。</aside><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> writeSpinCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> localFlushedAmount <span class="token operator">=</span> <span class="token function">doWriteBytes</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>localFlushedAmount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        setOpWrite <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    flushedAmount <span class="token operator">+=</span> localFlushedAmount<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>buf<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就是消息写入操作，调用doWriteBytes将ByteBuf中的数据写入缓冲区。如果写入字节数为0就代表缓冲区已经满了，此时再接着循环很可能仍然发出0字节，因此这时要设置写半包标识并推出循环释放I/O线程</p><p>如果发送的字节数大于0，就更新flushedAmount，如果buf已经读取完毕，就设置消息全部发送标识并退出循环。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">in<span class="token punctuation">.</span><span class="token function">progress</span><span class="token punctuation">(</span>flushedAmount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>    in<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">incompleteWrite</span><span class="token punctuation">(</span>setOpWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后更新发送进度的方法，如果消息发送完毕，就将它从环形数组中去除，否则调用写半包方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">incompleteWrite</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> setOpWrite<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Did not write completely.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>setOpWrite<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setOpWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// Schedule flush again later so other tasks can be picked up in the meantime</span>        <span class="token class-name">Runnable</span> flushTask <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flushTask<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flushTask <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flushTask <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>flushTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>flushTask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写半包的操作如上，如果设置了写半包标识，那么就将SelectionKey设置为写操作位，这样多路复用器会不断轮询对应的Channel，处理没有发送完成的半包消息。</p><p>如果没有设置写操作位，就要启动独立的Runnable将其加入到线程组当中，由Runnable负责半包消息的发送。</p><h3 id="AbstractNioMessageChannel源码分析"><a href="#AbstractNioMessageChannel源码分析" class="headerlink" title="AbstractNioMessageChannel源码分析"></a><code>AbstractNioMessageChannel</code>源码分析</h3><p><code>AbstractNioMessageChannel</code>总体上和<code>AbstractNioByteChannel</code>类似，区别在与一个只能传递<code>ByteBuf</code>和<code>FileRegion</code>，另一个可以传递POJO对象。</p><p><code>MssageChannel</code>在<code>doWrite</code>方法上的实现差距不大，具体过程可以参考<code>ByteChannel</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doWrite</span><span class="token punctuation">(</span><span class="token class-name">ChannelOutboundBuffer</span> in<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">SelectionKey</span> key <span class="token operator">=</span> <span class="token function">selectionKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> interestOps <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Object</span> msg <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// Wrote all messages.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>interestOps <span class="token operator">&amp;</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_WRITE<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                key<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span>interestOps <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_WRITE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getWriteSpinCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">doWriteMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> in<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>            in<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// Did not write all messages.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>interestOps <span class="token operator">&amp;</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_WRITE<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                key<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span>interestOps <span class="token operator">|</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_WRITE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="AbstractNioMessageServerChannel源码分析"><a href="#AbstractNioMessageServerChannel源码分析" class="headerlink" title="AbstractNioMessageServerChannel源码分析"></a><code>AbstractNioMessageServerChannel</code>源码分析</h3><p>该类的实现非常简单，只是定义了一个 <code>EventLoopGroup</code>用于给新接入的客户端<code>NioSocketChannel</code>分配<code>EventLoop</code></p><p>每当服务端</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">doReadMessages</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> buf<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">SocketChannel</span> ch <span class="token operator">=</span> javaChannel<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            buf<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NioSocketChannel</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">childEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="NioServerSocketChannel源码分析"><a href="#NioServerSocketChannel源码分析" class="headerlink" title="NioServerSocketChannel源码分析"></a><code>NioServerSocketChannel</code>源码分析</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NioServerSocketChannel</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractNioMessageServerChannel</span>                                 <span class="token keyword">implements</span> <span class="token class-name"><span class="token namespace">io<span class="token punctuation">.</span>netty<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>socket<span class="token punctuation">.</span></span>ServerSocketChannel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ChannelMetadata</span> METADATA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChannelMetadata</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">InternalLogger</span> logger <span class="token operator">=</span> <span class="token class-name">InternalLoggerFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">NioServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ServerSocketChannel</span> <span class="token function">newSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token class-name">ServerSocketChannel</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ChannelException</span><span class="token punctuation">(</span>                    <span class="token string">"Failed to open a server socket."</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ServerSocketChannelConfig</span> config<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先创建<code>ChannelMetadata</code>成员变量，然后定义<code>ServerSocketChannelConfig</code>用于配置<code>ServerSocketChannel</code>的TCP参数。</p><p><code>newSocket</code>方法用于打开<code>ServerSocketChannel</code>通道</p><p>接下来看一下服务端Channel的<code>doReadMessage</code>实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">doReadMessages</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> buf<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">SocketChannel</span> ch <span class="token operator">=</span> <span class="token function">javaChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            buf<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NioSocketChannel</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token function">childEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Failed to create a new channel from an accepted socket."</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ch<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Failed to close a socket."</span><span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先通过<code>ServerSocketChannel</code>的accept接收新的客户端连接，如果<code>SocketChannel</code>不为空，就利用当前的<code>NioServerSocketChannel</code>、<code>EventLoop</code>、<code>SocketChannel</code>创建新的<code>NioSocketChannel</code>，最后返回1，表示服务端消息读取成功</p><p>对于<code>NioServerSocketChannl</code>来说，他的工作就是接收客户端的连接</p><h3 id="NioSocketChannel源码分析"><a href="#NioSocketChannel源码分析" class="headerlink" title="NioSocketChannel源码分析"></a><code>NioSocketChannel</code>源码分析</h3><p>首先来看连接方法相关的API实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">doConnect</span><span class="token punctuation">(</span><span class="token class-name">SocketAddress</span> remoteAddress<span class="token punctuation">,</span> <span class="token class-name">SocketAddress</span> localAddress<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>localAddress <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">javaChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>localAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> connected <span class="token operator">=</span> <span class="token function">javaChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>remoteAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>connected<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">selectionKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_CONNECT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> connected<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">doClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先要判断本地Socket地址是否为空，如果不为空则进行本地地址的绑定。接着尝试与远程地址进行连接，如果没有收到ACK，就将操作位设置为连接操作位，监听连接操作。如果发生了I/O错误，就代表连接建立失败，关闭连接。</p><p>接下来看看他的写操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doWrite</span><span class="token punctuation">(</span><span class="token class-name">ChannelOutboundBuffer</span> in<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Do non-gathering write for a single buffer case.</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> msgCount <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msgCount <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// Ensure the pending writes are made of ByteBufs only.</span>        <span class="token class-name">ByteBuffer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nioBuffers <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nioBuffers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nioBuffers <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先获取要发送的消息的个数，如果消息的个数小于等于1，就调用父类<code>AbstractNioByteChannel</code>来进行写操作</p><p>在批量发送缓冲区的消息之前，先进行一系列局部变量的赋值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> nioBufferCnt <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nioBufferCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> expectedWrittenBytes <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">nioBufferSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token class-name">SocketChannel</span> ch <span class="token operator">=</span> <span class="token function">javaChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> writtenBytes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> done <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> setOpWrite <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取需要发送的<code>ByteBuffer</code>数组个数，然后从环形数组中获取需要发送的总字节数，获取对应的<code>SocketChannel</code>，接着定义发送完成标识和写半包标识。</p><p>接着在有限的循环内进行发送</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getWriteSpinCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">long</span> localWrittenBytes <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>nioBuffers<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nioBufferCnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>localWrittenBytes <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        setOpWrite <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    expectedWrittenBytes <span class="token operator">-=</span> localWrittenBytes<span class="token punctuation">;</span>    writtenBytes <span class="token operator">+=</span> localWrittenBytes<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>expectedWrittenBytes <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        done <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果本次发送的字节数为0,代表缓冲区已满，设置写半包标识并退出循环。</p><p>每次写入完成之后，更新尚未写入的字节数以及已写入的字节数，如果已经写完，设置完成标识并退出循环。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Release all buffers</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> msgCount<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        in<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// Finish the write loop if no new messages were flushed by in.remove().</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">clearOpWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来如果写入已经完成，那么就释放掉所有写入的信息，如果没有新的消息进来，那么就清除掉写操作位并退出循环。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// Did not write all buffers completely.</span>    <span class="token comment">// Release the fully written buffers and update the indexes of the partially written buffer.</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> msgCount<span class="token punctuation">;</span> i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> <span class="token class-name">ByteBuf</span> buf <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> in<span class="token punctuation">.</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> readerIndex <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">readerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> readableBytes <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">writerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> readerIndex<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>readableBytes <span class="token operator">&lt;</span> writtenBytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            in<span class="token punctuation">.</span><span class="token function">progress</span><span class="token punctuation">(</span>readableBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            in<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writtenBytes <span class="token operator">-=</span> readableBytes<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>readableBytes <span class="token operator">&gt;</span> writtenBytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>            buf<span class="token punctuation">.</span><span class="token function">readerIndex</span><span class="token punctuation">(</span>readerIndex <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> writtenBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            in<span class="token punctuation">.</span><span class="token function">progress</span><span class="token punctuation">(</span>writtenBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// readableBytes == writtenBytes</span>            in<span class="token punctuation">.</span><span class="token function">progress</span><span class="token punctuation">(</span>readableBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            in<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">incompleteWrite</span><span class="token punctuation">(</span>setOpWrite<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果没有发送完成，就代表出现了写半包的情况，此时需要先将已经写入的消息更新到环形数组里。</p><p>先获取消息的读指针以及可读字节，如果可读字节小于已写入的字节数，就代表这个消息已经被完整写入了，如果大于，就代表这个消息没有被完全写入，此时需要更新该消息的读指针，并更新环形数组，最后如果二者相等，就代表这个消息刚好被写完，后面也没有被写入的消息了，清除该消息后就退出循环，开始半包写入。</p><p>最后来看一下<code>NioSocketChannel</code>的读取操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">doReadBytes</span><span class="token punctuation">(</span><span class="token class-name">ByteBuf</span> byteBuf<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> byteBuf<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span><span class="token function">javaChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> byteBuf<span class="token punctuation">.</span><span class="token function">writableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将字节从channel中写入到传入的<code>ByteBuf</code>里</p><p><code>writeBytes</code>的实现如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">writeBytes</span><span class="token punctuation">(</span><span class="token class-name">ScatteringByteChannel</span> in<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token function">ensureWritable</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> writtenBytes <span class="token operator">=</span> <span class="token function">setBytes</span><span class="token punctuation">(</span>writerIndex<span class="token punctuation">,</span> in<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>writtenBytes <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        writerIndex <span class="token operator">+=</span> writtenBytes<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> writtenBytes<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>setBytes</code>在<code>UnpooledHeapByteBuf</code>中实现如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">setBytes</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">ScatteringByteChannel</span> in<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token function">ensureAccessible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">)</span> <span class="token function">internalNioBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>index <span class="token operator">+</span> length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClosedChannelException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ChannelPipeline和ChannelHandler"><a href="#ChannelPipeline和ChannelHandler" class="headerlink" title="ChannelPipeline和ChannelHandler"></a>ChannelPipeline和ChannelHandler</h2><p>Netty将数据管道抽象为ChannelPipeline，消息在ChannelPipeline中流动和传递。ChannelPipeline持有I/O事件拦截器ChannelHandler的链表，由ChannelHandler对I/O事件进行拦截和处理。</p><p><strong>ChannelPipeline</strong></p><hr><ul><li><p>ChannelPipeline的事件处理</p><p>  <img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/notes/Untitled%207.png" alt="Untitled"></p><ol><li>底层的SocketChannel read()方法读取ByteBuf，触发ChannelRead事件，由I/O线程NioEventLoop调用ChannelPipeline的fireChannelRead方法，将消息传输到ChannelPipeline中</li><li>消息依次被HeadHandler、ChannelHandler1、ChannelHandler2、… 、TailHandler拦截和处理。过程中任何Handler都可以中断当前流程结束消息的传递。</li><li>调用ChannelHandlerContext的write方法发送消息，消息从TailHandler向前传递，最终被添加到消息发送缓冲区当中，等待刷新和发送。</li></ol></li></ul><p>Netty中事件分为两种：</p><ul><li>inbound：由I/O线程触发，例如TCP链路建立事件、关闭事件等等</li><li>outbound：用户主动发起的网络I/O操作</li></ul><p>使用ServerBootstrap和Bootstrap启动服务端或客户端时，Netty会为每个Channel连接创建一个独立的pipeline。</p><p>ChannelPipeline支持运行态动态添加或者删除ChannelHandler，在某些场景下会非常有用，例如当业务高峰期需要对系统做拥塞保护时，就可以根据当前的系统时间进行判断，若处于高峰期就动态地将系统拥塞保护添加到当前ChannelPipeline当中。</p><p>ChannelPipeline是线程安全的，但ChannelHandler不是线程安全的。</p><p>接下来看看ChannelPipeline添加ChannelHandler的操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">ChannelPipeline</span> <span class="token function">addBefore</span><span class="token punctuation">(</span>        <span class="token class-name">ChannelHandlerInvoker</span> invoker<span class="token punctuation">,</span> <span class="token class-name">String</span> baseName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">ChannelHandler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">DefaultChannelHandlerContext</span> ctx <span class="token operator">=</span> <span class="token function">getContextOrDie</span><span class="token punctuation">(</span>baseName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkDuplicateName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DefaultChannelHandlerContext</span> newCtx <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">DefaultChannelHandlerContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> invoker<span class="token punctuation">,</span> name<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addBefore0</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> newCtx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于ChannelPipeline支持运行期动态修改，因此存在两种潜在的多线程并发场景：</p><ol><li>I/O线程和用户业务线程的并发访问</li><li>用户多个线程之间的并发访问</li></ol><p>因此这里使用了<code>synchronized</code>关键字保证操作的原子性。</p><p>这里首先根据baseName获取对应的<code>DefaultChannelHandlerContext</code>，ChannelPipeline维护了ChannelHandler和ChannelHandlerContext实例的映射关系。</p><p>接着对新增的ChannelHandler名进行校验，如果没有重复，就创建一个新的context然后将它添加进来</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addBefore0</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">DefaultChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">DefaultChannelHandlerContext</span> newCtx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">checkMultiplicity</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">)</span><span class="token punctuation">;</span>    newCtx<span class="token punctuation">.</span>prev <span class="token operator">=</span> ctx<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>    newCtx<span class="token punctuation">.</span>next <span class="token operator">=</span> ctx<span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>prev<span class="token punctuation">.</span>next <span class="token operator">=</span> newCtx<span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span>prev <span class="token operator">=</span> newCtx<span class="token punctuation">;</span>    name2ctx<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> newCtx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">callHandlerAdded</span><span class="token punctuation">(</span>newCtx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在添加之前首先需要检查Handler是否允许共享</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkMultiplicity</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ChannelHandler</span> handler <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">ChannelHandlerAdapter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ChannelHandlerAdapter</span> h <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ChannelHandlerAdapter</span><span class="token punctuation">)</span> handler<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>h<span class="token punctuation">.</span><span class="token function">isSharable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>added<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ChannelPipelineException</span><span class="token punctuation">(</span>                    h<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                    <span class="token string">" is not a @Sharable handler, so can't be added or removed multiple times."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        h<span class="token punctuation">.</span>added <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果Handler已被添加且没有表明允许共享，就抛出异常，否则标记Handler已被添加。</p><p>之后执行添加操作，加入成功后缓存ChannelHandlerContext，发送新增ChannelHandlerContext的通知。</p><p><strong>ChannelHandler</strong></p><hr><p>ChannelHandler负责对I/O事件或者I/O操作进行拦截和处理</p><p>ChannelHandler支持的注解：</p><ol><li><code>@Sharable</code>：多个ChannelPipeline可以共用一个ChannelHandler</li><li><code>@Skip</code>：被Skip注解的方法不会被调用</li></ol><p>由于大多数ChannelHandler会选择性拦截和处理某些事件，这就导致用户必须去实现那些他们用不到的方法。因此Netty提供了ChannelHandlerAdapter，它里面的所有方法都是透传，方便用户有针对性的实现方法。</p><p>这里来分析一下ByteToMessageDecoder源码</p><p>首先看channelRead方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">RecyclableArrayList</span> out <span class="token operator">=</span> <span class="token class-name">RecyclableArrayList</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">ByteBuf</span> data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ByteBuf</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span>            first <span class="token operator">=</span> cumulation <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cumulation <span class="token operator">=</span> data<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cumulation<span class="token punctuation">.</span><span class="token function">writerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> cumulation<span class="token punctuation">.</span><span class="token function">maxCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> data<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">expandCumulation</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                cumulation<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                data<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">callDecode</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cumulation<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DecoderException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DecoderException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cumulation <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cumulation<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                cumulation<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cumulation <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            decodeWasNull <span class="token operator">=</span> size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ctx<span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            out<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先判断是否是ByteBuf类型的消息，如果不是就将消息传递给下一个Handler。</p><p>否则的话就先判断一下当前的消息是否是半包消息，如果是半包消息，那么它会被缓存在cumulation里面。对于没有缓存的消息，直接将它赋值给cumulation然后开始解码。</p><p>如果是半包消息，那么首先判断cumulation里面是否还有足够的空间写入，如果没有就进行扩容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">expandCumulation</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token keyword">int</span> readable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ByteBuf</span> oldCumulation <span class="token operator">=</span> cumulation<span class="token punctuation">;</span>    cumulation <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span>oldCumulation<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> readable<span class="token punctuation">)</span><span class="token punctuation">;</span>    cumulation<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span>oldCumulation<span class="token punctuation">)</span><span class="token punctuation">;</span>    oldCumulation<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的扩容策略只分配恰好够用的缓冲区 （此处的算法可以优化，避免连续半包导致的频繁缓冲区扩张和内存复制）</p><p>上面的一系列操作完成之后就开始解码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">callDecode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">ByteBuf</span> in<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> out<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">isReadable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> outSize <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> oldInputLength <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">decode</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> in<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Check if this handler was removed before continuing the loop.</span>            <span class="token comment">// If it was removed, it is not safe to continue to operate on the buffer.</span>            <span class="token comment">//</span>            <span class="token comment">// See https://github.com/netty/netty/issues/1664</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">isRemoved</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>outSize <span class="token operator">==</span> out<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>oldInputLength <span class="token operator">==</span> in<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldInputLength <span class="token operator">==</span> in<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DecoderException</span><span class="token punctuation">(</span>                        <span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">simpleClassName</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span>                        <span class="token string">".decode() did not read anything but decoded a message."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSingleDecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DecoderException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DecoderException</span><span class="token punctuation">(</span>cause<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的<code>decode</code>方法交给用户来实现，如果解码完之后out的长度没有变化，说明解码没有成功，这有一下几种可能性：</p><ol><li>如果用户解码器没有消费ByteBuf，则说明这是一个半包消息，需要由I/O线程继续读取后续的数据报，在这种情况下要退出循环</li><li>如果用户解码器确实消费了ByteBuf那么说明解码可以继续进行</li></ol><p>从上面的代码中我们可以得出一个很重要的契约：如果业务解码器认为当前的字节缓冲区无法完成业务层的解码，需要将readerIndex复位，告诉Netty解码条件不满足。</p><p>如果用户解码器没有消费ByteBuf，但解码出了一个或多个对象，这种行为被认为是非法的</p><p>最后判断是否是一个单条消息解码器，如果是的话就退出循环</p><p>MessageToMessageDecoder负责将一个POJO对象解码成一个POJO对象，下面来看一下他的核心API。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">RecyclableArrayList</span> out <span class="token operator">=</span> <span class="token class-name">RecyclableArrayList</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">acceptInboundMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>            <span class="token class-name">I</span> cast <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">I</span><span class="token punctuation">)</span> msg<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">decode</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> cast<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token class-name">ReferenceCountUtil</span><span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>cast<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            out<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DecoderException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DecoderException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ctx<span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        out<span class="token punctuation">.</span><span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先检查一下传入的msg是否是可接受的类型，如果不是，就直接将它加入到列表里。否认则对他调用<code>decode</code>方法，最后释放被解码的对象。</p><p>在所有的处理完成之后，将列表中的所有元素都交给下一个Handler进行处理</p><p><strong>LengthFieldBasedFrameDecoder源码分析</strong></p><p>基本参数：</p><ul><li>maxFrameLength：最大帧长度</li><li>lengthFieldOffset：长度域偏移</li><li>lengthFieldLength：长度域的长度</li><li>lengthAdjustment：数据长度修正，因为长度域指定的长度可以使header+body的整个长度，也可以只是body的长度。如果表示header+body的整个长度，那么我们需要修正数据长度。</li><li>initialBytesToStrip：跳过的字节数，如果只想接收body，那么需要跳过header占用的字节数</li></ul><p>接下来看看核心API：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">ChannelHandlerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">ByteBuf</span> in<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>discardingTooLongFrame<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> bytesToDiscard <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>bytesToDiscard<span class="token punctuation">;</span>        <span class="token keyword">int</span> localBytesToDiscard <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>bytesToDiscard<span class="token punctuation">,</span> in<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">skipBytes</span><span class="token punctuation">(</span>localBytesToDiscard<span class="token punctuation">)</span><span class="token punctuation">;</span>        bytesToDiscard <span class="token operator">-=</span> localBytesToDiscard<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bytesToDiscard <span class="token operator">=</span> bytesToDiscard<span class="token punctuation">;</span>        <span class="token function">failIfNecessary</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>判断<code>discardingTooLongFrame</code>标识，看是否需要丢弃当前可读的字节缓冲区，如果为真就执行丢弃操作。由于丢弃的字节数不能超过已读字节数，因此这里只能让ByteBuf跳过丢弃字节数和已读字节数中较小的那个。最后判断是否已经达到了需要丢弃的字节数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">failIfNecessary</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> firstDetectionOfTooLongFrame<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bytesToDiscard <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Reset to the initial state and tell the handlers that</span>        <span class="token comment">// the frame was too large.</span>        <span class="token keyword">long</span> tooLongFrameLength <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>tooLongFrameLength<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tooLongFrameLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        discardingTooLongFrame <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>failFast <span class="token operator">||</span>            failFast <span class="token operator">&amp;&amp;</span> firstDetectionOfTooLongFrame<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">fail</span><span class="token punctuation">(</span>tooLongFrameLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// Keep discarding and notify handlers if necessary.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failFast <span class="token operator">&amp;&amp;</span> firstDetectionOfTooLongFrame<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">fail</span><span class="token punctuation">(</span>tooLongFrameLength<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来判断当前可读字节数是否大于长度偏移量，如果不大于，就代表着无法根据当前的数据读出长度，返回空，等待I/O线程继续读取之后的数据报</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> lengthFieldEndOffset<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后读取数据报中的长度字段</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> actualLengthFieldOffset <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> lengthFieldOffset<span class="token punctuation">;</span><span class="token keyword">long</span> frameLength <span class="token operator">=</span> <span class="token function">getUnadjustedFrameLength</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> actualLengthFieldOffset<span class="token punctuation">,</span> lengthFieldLength<span class="token punctuation">,</span> byteOrder<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果数据报长度&lt;0那么显然是一个不合法的数据报，抛出异常。然后计算经过调整的frameLength，从这里可以看出frameLength的长度就是整包消息的长度。如果最后的frameLength的长度还没有达到长度字段的最终偏移量，那么显然这也不是一个合法的报文长度。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>frameLength <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    in<span class="token punctuation">.</span><span class="token function">skipBytes</span><span class="token punctuation">(</span>lengthFieldEndOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CorruptedFrameException</span><span class="token punctuation">(</span>            <span class="token string">"negative pre-adjustment length field: "</span> <span class="token operator">+</span> frameLength<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>frameLength <span class="token operator">+=</span> lengthAdjustment <span class="token operator">+</span> lengthFieldEndOffset<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>frameLength <span class="token operator">&lt;</span> lengthFieldEndOffset<span class="token punctuation">)</span> <span class="token punctuation">{</span>    in<span class="token punctuation">.</span><span class="token function">skipBytes</span><span class="token punctuation">(</span>lengthFieldEndOffset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CorruptedFrameException</span><span class="token punctuation">(</span>            <span class="token string">"Adjusted frame length ("</span> <span class="token operator">+</span> frameLength <span class="token operator">+</span> <span class="token string">") is less "</span> <span class="token operator">+</span>            <span class="token string">"than lengthFieldEndOffset: "</span> <span class="token operator">+</span> lengthFieldEndOffset<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果frameLength大于最大长度，那么就需要丢弃这个消息。如果缓冲区中包含的字节数大于frameLength，那么直接丢弃整包消息。否则就意味着丢弃当前整包消息也无法完成任务，此时将discardingTooLongFrame置位，丢弃当前字节缓冲区的消息，剩下的消息等待下次解码时丢弃。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>frameLength <span class="token operator">&gt;</span> maxFrameLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> discard <span class="token operator">=</span> frameLength <span class="token operator">-</span> in<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    tooLongFrameLength <span class="token operator">=</span> frameLength<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>discard <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// buffer contains more bytes then the frameLength so we can discard all now</span>        in<span class="token punctuation">.</span><span class="token function">skipBytes</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> frameLength<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// Enter the discard mode and discard everything received so far.</span>        discardingTooLongFrame <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        bytesToDiscard <span class="token operator">=</span> discard<span class="token punctuation">;</span>        in<span class="token punctuation">.</span><span class="token function">skipBytes</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">failIfNecessary</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来判断可读字节数是否小于frameLength，如果小于，就代表这是个半包消息，返回null</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// never overflows because it's less than maxFrameLength</span><span class="token keyword">int</span> frameLengthInt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> frameLength<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> frameLengthInt<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>initialBytesToStrip <span class="token operator">&gt;</span> frameLengthInt<span class="token punctuation">)</span> <span class="token punctuation">{</span>    in<span class="token punctuation">.</span><span class="token function">skipBytes</span><span class="token punctuation">(</span>frameLengthInt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CorruptedFrameException</span><span class="token punctuation">(</span>            <span class="token string">"Adjusted frame length ("</span> <span class="token operator">+</span> frameLength <span class="token operator">+</span> <span class="token string">") is less "</span> <span class="token operator">+</span>            <span class="token string">"than initialBytesToStrip: "</span> <span class="token operator">+</span> initialBytesToStrip<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>in<span class="token punctuation">.</span><span class="token function">skipBytes</span><span class="token punctuation">(</span>initialBytesToStrip<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后抽取出frame的消息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// extract frame</span><span class="token keyword">int</span> readerIndex <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readerIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> actualFrameLength <span class="token operator">=</span> frameLengthInt <span class="token operator">-</span> initialBytesToStrip<span class="token punctuation">;</span><span class="token class-name">ByteBuf</span> frame <span class="token operator">=</span> <span class="token function">extractFrame</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> in<span class="token punctuation">,</span> readerIndex<span class="token punctuation">,</span> actualFrameLength<span class="token punctuation">)</span><span class="token punctuation">;</span>in<span class="token punctuation">.</span><span class="token function">readerIndex</span><span class="token punctuation">(</span>readerIndex <span class="token operator">+</span> actualFrameLength<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> frame<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="NioEventLoop"><a href="#NioEventLoop" class="headerlink" title="NioEventLoop"></a>NioEventLoop</h2><p>设计原理：</p><p>Netty的NioEventLoop除了负责I/O读写之外，还负责处理：</p><ol><li>系统Task：通过调用<code>NioEventLoop</code>的<code>execute</code>方法实现，Netty有很多系统Task，创建他们的主要原因是：当I/O线程和用户线程同时操作网络资源时，为了防止并发操作导致的锁竞争，将用户线程的操作封装成Task放入消息队列当中，由I/O线程负责执行，这样就可以实现局部无锁化。（利用单线程串行执行，避免多线程竞争导致性能下降）</li><li>定时任务：通过调用<code>NioEventLoop</code>的<code>schedule</code>方法实现</li></ol><p>下面先从NioEventLoop初始化Selector开始</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Selector</span> <span class="token function">openSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token class-name">Selector</span> selector<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        selector <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token function">openSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ChannelException</span><span class="token punctuation">(</span><span class="token string">"failed to open a new selector"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>DISABLE_KEYSET_OPTIMIZATION<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> selector<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token class-name">SelectedSelectionKeySet</span> selectedKeySet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelectedSelectionKeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> selectorImplClass <span class="token operator">=</span>                <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.nio.ch.SelectorImpl"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Ensure the current selector implementation is what we can instrument.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>selectorImplClass<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> selector<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">Field</span> selectedKeysField <span class="token operator">=</span> selectorImplClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"selectedKeys"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> publicSelectedKeysField <span class="token operator">=</span> selectorImplClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"publicSelectedKeys"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        selectedKeysField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        publicSelectedKeysField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        selectedKeysField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> selectedKeySet<span class="token punctuation">)</span><span class="token punctuation">;</span>        publicSelectedKeysField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> selectedKeySet<span class="token punctuation">)</span><span class="token punctuation">;</span>        selectedKeys <span class="token operator">=</span> selectedKeySet<span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Instrumented an optimized java.util.Set into: {}"</span><span class="token punctuation">,</span> selector<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        selectedKeys <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Failed to instrument an optimized java.util.Set into: {}"</span><span class="token punctuation">,</span> selector<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> selector<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整个过程非常简单，调用JDK NIO提供的API开启Selector，如果用户没有开启SelectedKey的优化就直接返回。如果开启了，那么会利用反射将JDK Selector中的selectedKeys和publicSelectedKeys用Netty实现的版本替换掉。</p><p>接下来重点看<code>run</code>方法的实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        oldWakenUp <span class="token operator">=</span> wakenUp<span class="token punctuation">.</span><span class="token function">getAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">selectNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 'wakenUp.compareAndSet(false, true)' is always evaluated</span>                <span class="token comment">// before calling 'selector.wakeup()' to reduce the wake-up</span>                <span class="token comment">// overhead. (Selector.wakeup() is an expensive operation.)</span>                <span class="token comment">//</span>                <span class="token comment">// However, there is a race condition in this approach.</span>                <span class="token comment">// The race condition is triggered when 'wakenUp' is set to</span>                <span class="token comment">// true too early.</span>                <span class="token comment">//</span>                <span class="token comment">// 'wakenUp' is set to true too early if:</span>                <span class="token comment">// 1) Selector is waken up between 'wakenUp.set(false)' and</span>                <span class="token comment">//    'selector.select(...)'. (BAD)</span>                <span class="token comment">// 2) Selector is waken up between 'selector.select(...)' and</span>                <span class="token comment">//    'if (wakenUp.get()) { ... }'. (OK)</span>                <span class="token comment">//</span>                <span class="token comment">// In the first case, 'wakenUp' is set to true and the</span>                <span class="token comment">// following 'selector.select(...)' will wake up immediately.</span>                <span class="token comment">// Until 'wakenUp' is set to false again in the next round,</span>                <span class="token comment">// 'wakenUp.compareAndSet(false, true)' will fail, and therefore</span>                <span class="token comment">// any attempt to wake up the Selector will fail, too, causing</span>                <span class="token comment">// the following 'selector.select(...)' call to block</span>                <span class="token comment">// unnecessarily.</span>                <span class="token comment">//</span>                <span class="token comment">// To fix this problem, we wake up the selector again if wakenUp</span>                <span class="token comment">// is true immediately after selector.select(...).</span>                <span class="token comment">// It is inefficient in that it wakes up the selector for both</span>                <span class="token comment">// the first case (BAD - wake-up required) and the second case</span>                <span class="token comment">// (OK - no wake-up required).</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>wakenUp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    selector<span class="token punctuation">.</span><span class="token function">wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先需要将wakeUp还原为false，并将之前的wakeUp状态保存到<code>oldWakeUp</code>变量当中。通过<code>hasTasks</code>判断当前消息队列中是否还有消息没有处理，如果有就立即进行一次select操作。选择完成之后再次判断用户是否调用了<code>wakeup</code>，如果调用就执行<code>selector.wakeup</code>操作</p><p>如果消息队列中没有任务要处理，那么就正常调用<code>select</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>  <span class="token class-name">Selector</span> selector <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selector<span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> selectCnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">long</span> currentTimeNanos <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">long</span> selectDeadLineNanos <span class="token operator">=</span> currentTimeNanos <span class="token operator">+</span> <span class="token function">delayNanos</span><span class="token punctuation">(</span>currentTimeNanos<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">long</span> timeoutMillis <span class="token operator">=</span> <span class="token punctuation">(</span>selectDeadLineNanos <span class="token operator">-</span> currentTimeNanos <span class="token operator">+</span> <span class="token number">500000L</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000000L</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>timeoutMillis <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>selectCnt <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  selector<span class="token punctuation">.</span><span class="token function">selectNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  selectCnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">int</span> selectedKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>timeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>          selectCnt <span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>selectedKeys <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> oldWakenUp <span class="token operator">||</span> wakenUp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">hasTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">// Selected something,</span>              <span class="token comment">// waken up by user, or</span>              <span class="token comment">// the task queue has a pending task.</span>              <span class="token keyword">break</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先计算一下将要触发的定时任务的超时时间，将它转换为毫秒。对剩余时间进行判断，如果需要立即执行或者已经超时，那么就调用<code>selectNow</code>进行轮询操作，并将selectCnt置为1跳出循环。</p><p>Socket操作完成之后，需要对结果进行判断，存在以下情况就跳出循环：</p><ul><li>有Channel处于就绪状态，selectedKeys不为0，说明有事件要处理</li><li>oldWakeUp为true</li><li>系统或用户调用了wakeup</li><li>消息队列中有新的任务需要处理</li></ul><p>如果本次轮询结果为空，也没有wakeup操作或是新的消息需要处理，就说明是一个空轮询，有可能触发了epoll bug。</p><p>该Bug的修复策略如下：</p><ol><li>对Selector的select操作周期进行统计</li><li>每完成一次空的select操作进行一次计数</li><li>在某个周期内如果连续发生了N次空轮询说明触发了epoll bug</li></ol><p>下面是Netty进行的处理：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> selectedKeys <span class="token operator">=</span> selector<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>timeoutMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>selectCnt <span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>selectedKeys <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> oldWakenUp <span class="token operator">||</span> wakenUp<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">hasTasks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Selected something,</span>    <span class="token comment">// waken up by user, or</span>    <span class="token comment">// the task queue has a pending task.</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>SELECTOR_AUTO_REBUILD_THRESHOLD <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>        selectCnt <span class="token operator">&gt;=</span> SELECTOR_AUTO_REBUILD_THRESHOLD<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// The selector returned prematurely many times in a row.</span>    <span class="token comment">// Rebuild the selector to work around the problem.</span>    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>            <span class="token string">"Selector.select() returned prematurely {} times in a row; rebuilding selector."</span><span class="token punctuation">,</span>            selectCnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rebuildSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    selector <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>selector<span class="token punctuation">;</span>    <span class="token comment">// Select again to populate selectedKeys.</span>    selector<span class="token punctuation">.</span><span class="token function">selectNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    selectCnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来看看rebuildSelector的操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rebuildSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">inEventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">rebuildSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">final</span> <span class="token class-name">Selector</span> oldSelector <span class="token operator">=</span> selector<span class="token punctuation">;</span>  <span class="token keyword">final</span> <span class="token class-name">Selector</span> newSelector<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>oldSelector <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>      newSelector <span class="token operator">=</span> <span class="token function">openSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Failed to create a new Selector."</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先判断该操作是不是由其他线程发起的，如果是，那么为了避免多线程并发操作Selector和其他资源，需要将rebuildSelector操作封装成一个Task交给NioEventLoop的消息队列</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Register all channels to the new Selector.</span><span class="token keyword">int</span> nChannels <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> key<span class="token operator">:</span> oldSelector<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Object</span> a <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>newSelector<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">int</span> interestOps <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                key<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                key<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>newSelector<span class="token punctuation">,</span> interestOps<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>                nChannels <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Failed to re-register a Channel to the new Selector."</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">AbstractNioChannel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">AbstractNioChannel</span> ch <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AbstractNioChannel</span><span class="token punctuation">)</span> a<span class="token punctuation">;</span>                    ch<span class="token punctuation">.</span><span class="token function">unsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">.</span><span class="token function">unsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">voidPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>                    <span class="token class-name">NioTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectableChannel</span><span class="token punctuation">&gt;</span></span> task <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">NioTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectableChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> a<span class="token punctuation">;</span>                    <span class="token function">invokeChannelUnregistered</span><span class="token punctuation">(</span>task<span class="token punctuation">,</span> key<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ConcurrentModificationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Probably due to concurrent modification of the key set.</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>selector <span class="token operator">=</span> newSelector<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment">// time to close the old selector as everything else is registered to the new one</span>    oldSelector<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Failed to close the old Selector."</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Migrated "</span> <span class="token operator">+</span> nChannels <span class="token operator">+</span> <span class="token string">" channel(s) to the new Selector."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就开始尝试将注册在旧Selector上的key移除并注册到新的Selector中，最后关闭旧的Selector</p><p>让我们将目光再度放回<code>run</code>方法上</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">cancelledKeys <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token keyword">long</span> ioStartTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>needsToSelectAgain <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>selectedKeys <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">processSelectedKeysOptimized</span><span class="token punctuation">(</span>selectedKeys<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">processSelectedKeysPlain</span><span class="token punctuation">(</span>selector<span class="token punctuation">.</span><span class="token function">selectedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">final</span> <span class="token keyword">long</span> ioTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> ioStartTime<span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token keyword">int</span> ioRatio <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ioRatio<span class="token punctuation">;</span><span class="token function">runAllTasks</span><span class="token punctuation">(</span>ioTime <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">-</span> ioRatio<span class="token punctuation">)</span> <span class="token operator">/</span> ioRatio<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isShuttingDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">closeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">confirmShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于没有开启优化，因此会进入<code>processSelectedKeysPlain</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processSelectedKeysPlain</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> selectedKeys<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// check if the set is empty and if so just return to not create garbage by</span>  <span class="token comment">// creating a new Iterator every time even if there is nothing to process.</span>  <span class="token comment">// See https://github.com/netty/netty/issues/597</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>selectedKeys<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectionKey</span><span class="token punctuation">&gt;</span></span> i <span class="token operator">=</span> selectedKeys<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">final</span> <span class="token class-name">SelectionKey</span> k <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">final</span> <span class="token class-name">Object</span> a <span class="token operator">=</span> k<span class="token punctuation">.</span><span class="token function">attachment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      i<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">AbstractNioChannel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">processSelectedKey</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">AbstractNioChannel</span><span class="token punctuation">)</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>          <span class="token class-name">NioTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectableChannel</span><span class="token punctuation">&gt;</span></span> task <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">NioTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SelectableChannel</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> a<span class="token punctuation">;</span>          <span class="token function">processSelectedKey</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>迭代获取SelectionKey及其对应的附件，并将key从set中删除避免重复读取。如果附件类型为AbstractNioChannel则交给<code>processSelectedKey</code>处理，否则需要先打包成任务(一般用不到，除非用户自定义)</p><p>接下来看看具体的附件处理方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">processSelectedKey</span><span class="token punctuation">(</span><span class="token class-name">SelectionKey</span> k<span class="token punctuation">,</span> <span class="token class-name">AbstractNioChannel</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">final</span> <span class="token class-name">NioUnsafe</span> unsafe <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">unsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">.</span><span class="token function">isValid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// close the channel if the key is not valid anymore</span>      unsafe<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">voidPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先还是判断该Key是否有效，如果不可用就直接关闭</p><p>接下来根据设定的网络操作位进行不同的操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> readyOps <span class="token operator">=</span> k<span class="token punctuation">.</span><span class="token function">readyOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Also check for readOps of 0 to workaround possible JDK bug which may otherwise lead</span>  <span class="token comment">// to a spin loop</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readyOps <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_READ <span class="token operator">|</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_ACCEPT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> readyOps <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      unsafe<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ch<span class="token punctuation">.</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">// Connection already closed - no need to handle write.</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readyOps <span class="token operator">&amp;</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_WRITE<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// Call forceFlush which will also take care of clear the OP_WRITE once there is nothing left to write</span>      ch<span class="token punctuation">.</span><span class="token function">unsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forceFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readyOps <span class="token operator">&amp;</span> <span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_CONNECT<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// remove OP_CONNECT as otherwise Selector.select(..) will always return without blocking</span>      <span class="token comment">// See https://github.com/netty/netty/issues/924</span>      <span class="token keyword">int</span> ops <span class="token operator">=</span> k<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ops <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token class-name">SelectionKey</span><span class="token punctuation">.</span>OP_CONNECT<span class="token punctuation">;</span>      k<span class="token punctuation">.</span><span class="token function">interestOps</span><span class="token punctuation">(</span>ops<span class="token punctuation">)</span><span class="token punctuation">;</span>      unsafe<span class="token punctuation">.</span><span class="token function">finishConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CancelledKeyException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  unsafe<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">voidPromise</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Future和Promise"><a href="#Future和Promise" class="headerlink" title="Future和Promise"></a>Future和Promise</h2><h3 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h3><p>Future在Java中是用来获取异步操作的结果，在JDK中，可以通过get方法获取操作结果，如果操作尚未完成，就会同步阻塞当前调用的线程</p><p>因此在原生的JDK中，Future并没有给异步操作带来多大的帮助，因为对用户来说，异步操作的完成时刻是不可知的，而Future的get方法会阻塞调用者。</p><p>在Netty中，所有的IO调用都会立刻返回，这就需要让用户了解如何获取异步操作的结果，<code>ChannelFuture</code>就是因此而诞生的。</p><p>ChannelFuture有两种状态：uncompleted和completed。当开始一个I/O操作时，一个新的ChannelFuture被创建，此时它处于uncompleted状态。而I/O操作一旦完成，ChannelFuture就会被设置为 completed状态，它的结果有如下可能：</p><ul><li>操作失败</li><li>操作成功</li><li>操作被取消</li></ul><p>ChannelFuture采用了异步通知机制来处理结果，用户可以向Future添加Listener，在操作完成后就会调用Listener进行结果的处理。</p><aside>⛈️ 不要在ChannelHandler中调用ChannelFuture的`await`方法。因为发起I/O操作之后会由I/O线程负责异步通知发起I/O操作的用户线程，如果I/O线程和用户线程是一个线程，就会出现线程让自己等待自己的情况，这显然会导致死锁。</aside><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>Promise是可写的Future，因为Future自身没有写操作相关的接口，Netty通过Promise对Future进行扩展，用于设置I/O操作的结果。</p><p>下面来解读一下DefaultPromise中的<code>setSuccess</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Promise</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">setSuccess</span><span class="token punctuation">(</span><span class="token class-name">V</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setSuccess0</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">notifyListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"complete already: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">setSuccess0</span><span class="token punctuation">(</span><span class="token class-name">V</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// Allow only once.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> SUCCESS<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>result <span class="token operator">=</span> result<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasWaiters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先判断是否已被设置过，如果已被设置过就直接返回，不允许再次设置。</p><p>接下来用同步代码块保护对Promise的操作，二次判断操作结果是否被设置。然后判断操作结果是否为空，如果为空说明只需要notify所有的listener，如果不为空，则需要先将结果设置为result</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络编程 </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring（面试版）</title>
      <link href="/2023/03/04/Spring/"/>
      <url>/2023/03/04/Spring/</url>
      
        <content type="html"><![CDATA[<h1 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h1><p>控制反转，本质是将用户手动创建对象的控制权，交给程序来管理。主要目的是借助第三方实现具有依赖关系的对象之间的解耦</p><p>将对象之前的依赖关系交给IOC容器来管理，然后由IOC容器完成对象注入。可以很大程度上简化应用的开发。程序员可以从繁杂的对象依赖中挣脱出来，专心于业务代码的开发。</p><blockquote><p><code>@Component</code>和<code>@Bean</code>的区别</p><p><code>@Component</code>通过类路径扫描来自动侦测并自动装配到Spring容器中。<code>@Bean</code>通常是在标有该注解的方法中自定义bean实例。同时，如果我们想要引入第三方库中的类，只能使用<code>@Bean</code>。</p></blockquote><p><a href="https://javadoop.com/post/spring-ioc">Spring IOC 容器源码分析</a></p><h2 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h2><p>要想更透彻的理解IOC，还需要了解一下依赖倒置原则。</p><p>当我们进行设计时，往往会根据下层基础设计上层建筑，这样有一个问题就是上层建筑一旦发生改动，就要从上到下彻底更改，因为我们的上层建筑都是根据底层完成设计的。</p><p>依赖导致的思想就是将整个过程反转过来，我们先明确上层建筑需要底层提供什么服务，然后再去进一步设计底层，这样高层就不必关注底层实现，它只需要底层能完成它需要的功能就可以了。</p><p>这两种思想体现到代码里就是：</p><ol><li><p>自下而上设计代表上层需要了解底层相关信息，例如如果我们要新建一个Car实例，首先要了解轮胎有多大，并将这个size传递给Car的构造器，Car构造器会在内部初始化轮胎实例。这样的问题在于，上下两层强耦合，一旦轮胎的初始化方式出现变动，就要修改Car的构造器。</p></li><li><p>自上而下设计可以避免上下层之间的耦合，因为它只需要知道自己有一个轮胎实例，并且这个轮胎实例提供了自己想要的功能，此时只需要给Car构造器传递轮胎实例即可完成初始化，即使轮胎构造器发生变动，也不会影响到Car。</p></li></ol><p>IOC就是实现依赖倒置的一种思路，它的实现手段就是通过DI（依赖注入）。</p><p>在过去的程序设计思路中，A要想使用B，就必须在自己的内部完成B的初始化，这就代表着A必须了解如何初始化B，而一旦引入了IOC容器，A只需要表明自己需要B，即可从IOC容器中获取到B的实例。</p><p>在Spring中，通过IOC容器完成DI，它会利用DFS查询某个实例初始化需要哪些依赖，然后将他们全部初始化出来。</p><h1 id="Bean"><a href="#Bean" class="headerlink" title="Bean"></a>Bean</h1><p>作用域</p><table><thead><tr><th>scope</th><th>description</th></tr></thead><tbody><tr><td>singleton</td><td>单例</td></tr><tr><td>prototype</td><td>原型，容器内可以有任意数量的对象实例</td></tr><tr><td>request</td><td>每收到一个新请求就创建一个</td></tr><tr><td>session</td><td>每次会话创建一个</td></tr><tr><td>application</td><td>每个应用程序创建一个</td></tr><tr><td>websocket</td><td>在每个<code>websocket</code>的生存周期中存在一个</td></tr></tbody></table><blockquote><p>单例Bean的线程安全问题</p><p>多个线程操作同一个对象时是存在资源竞争的（eg：zl的PostBuilder）</p><p>解决方案有两个：</p><ol><li><p>在Bean中尽量避免定义可变的成员变量</p></li><li><p>在类中定义一个<code>ThreadLocal</code>成员变量，将需要的成员变量放在里面</p></li></ol></blockquote><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul><li>Bean 容器找到配置文件中 Spring Bean 的定义。</li><li>Bean 容器利用 Java Reflection API 创建一个 Bean 的实例。</li><li>如果涉及到一些属性值 利用 <code>set()</code>方法设置一些属性值。</li><li>如果 Bean 实现了 <code>BeanNameAware</code> 接口，调用 <code>setBeanName()</code>方法，传入 Bean 的名字。</li><li>如果 Bean 实现了 <code>BeanClassLoaderAware</code> 接口，调用 <code>setBeanClassLoader()</code>方法，传入 <code>ClassLoader</code>对象的实例。</li><li>如果 Bean 实现了 <code>BeanFactoryAware</code> 接口，调用 <code>setBeanFactory()</code>方法，传入 <code>BeanFactory</code>对象的实例。</li><li>与上面的类似，如果实现了其他 <code>*.Aware</code>接口，就调用相应的方法。</li><li>如果有和加载这个 Bean 的 Spring 容器相关的 <code>BeanPostProcessor</code> 对象，执行<code>postProcessBeforeInitialization()</code> 方法</li><li>如果 Bean 实现了<code>InitializingBean</code>接口，执行<code>afterPropertiesSet()</code>方法。</li><li>如果 Bean 在配置文件中的定义包含 init-method 属性，执行指定的方法。</li><li>如果有和加载这个 Bean 的 Spring 容器相关的 <code>BeanPostProcessor</code> 对象，执行<code>postProcessAfterInitialization()</code> 方法</li><li>当要销毁 Bean 的时候，如果 Bean 实现了 <code>DisposableBean</code> 接口，执行 <code>destroy()</code> 方法。</li><li>当要销毁 Bean 的时候，如果 Bean 在配置文件中的定义包含 destroy-method 属性，执行指定的方法。</li></ul><h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p>AOP的核心思想是将那些于业务无关的，但是被业务模块所共用的逻辑或责任封装起来。OOP是对纵向程序流的封装，而AOP则是对横向程序流的封装。</p><p>AOP的基础是动态代理，通过代理模式对原有的代码进行增强。</p><table><thead><tr><th>术语</th><th>含义</th></tr></thead><tbody><tr><td>目标</td><td>被代理的对象</td></tr><tr><td>代理</td><td>代理对象</td></tr><tr><td>连接点</td><td>目标对象中所有定义的方法</td></tr><tr><td>切入点</td><td>被切面增强的连接点</td></tr><tr><td>通知</td><td>增强逻辑</td></tr><tr><td>切面</td><td>切入点+通知</td></tr></tbody></table><h2 id="自调用问题"><a href="#自调用问题" class="headerlink" title="自调用问题"></a>自调用问题</h2><p>Spring AOP借助代理实现，因此它的调用逻辑实际上是：</p><p>调用者 -&gt; 代理 -&gt; 实体</p><p>因此如果我们直接在实体内调用实体中的方法（自调用），就会导致AOP失效。下面通过一个例子来理解</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyService</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//......</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment">//......</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们通过method1()调用method2()时，实际上是this.method2()，这是一个内部调用。也就是说，这个方法调用不会被切面拦截到，这就意味着Spring提供的代理类不会出现在整个调用链里面，注解也就失效了。</p><p>而在类外部调用的话，Spring就会发现调用者是个自己要代理的类型，接着就会走代理的逻辑，但是对于this这种自调用，他会认为就是个普通的类内调用，不会进行代理。</p><p>要想修复这个问题，可以通过直接获取MyService的代理对象进行方法调用，或者改用AspectJ来实现。</p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>Spring支持两种事务：</p><ol><li><p>编程式事务：在代码内部直接使用TransactionTemplate手动管理事务，维护困难，很少使用。</p></li><li><p>声明式事务：通过AOP实现，侵入性较小，如<code>@Transactional</code></p></li></ol><h2 id="事务管理接口"><a href="#事务管理接口" class="headerlink" title="事务管理接口"></a>事务管理接口</h2><p>Spring中的事务管理接口包括：</p><ul><li>**<code>PlatformTransactionManager</code>**： （平台）事务管理器，Spring 事务策略的核心。</li><li>**<code>TransactionDefinition</code>**： 事务定义信息(事务隔离级别、传播行为、超时、只读、回滚规则)。</li><li>**<code>TransactionStatus</code>**： 事务运行状态。</li></ul><p><code>PlatformTransactionManager</code>是事务的上层管理者，她可以获取事务，提交事务或回滚事务，而另外两个是对事务的描述。</p><p>事务属性：</p><ul><li>隔离级别</li><li>传播行为</li><li>回滚规则</li><li>是否只读</li><li>事务超时</li></ul><h2 id="事务传播行为"><a href="#事务传播行为" class="headerlink" title="事务传播行为"></a>事务传播行为</h2><p>事务传播行为用于解决业务层方法之间相互调用的问题。当一个事务方法被另一个事务方法调用时，必须指定事务如何传播</p><p>常用的事务传播行为：</p><ol><li><p><strong><code>TransactionDefinition.PROPAGATION_REQUIRED</code></strong></p><p>Spring默认的事务传播策略，如果外围方法已经开启事务，就加入事务。否则新开启一个事务。这种传播行为，不管外围还是内部方法抛出异常都会将整个事务回滚。</p></li><li><p><strong><code>TransactionDefinition.PROPAGATION_REQUIRES_NEW</code></strong></p><p>无论如何都会创建一个新事务，如果外围方法已经开启了事务，就把外围事务挂起。如果外围事务回滚，不会影响内部方法的事务。而如果内部方法抛出异常回滚，并且这个异常被外围方法捕获到，也会导致外部事务回滚。</p></li><li><p><strong><code>TransactionDefinition.PROPAGATION_NESTED</code></strong></p><p>如果当前没有事务，新建一个事务。如果已经有了，创建一个嵌套事务。如果内部事务回滚，并且异常逃逸到外部，也会导致外部事务回滚，但如果异常被成功捕获，则不会影响到外部事务。此外，由于内部事务嵌套在外部事务，因此，外部事务回滚也会导致内部事务回滚。</p></li></ol><h2 id="事务回滚规则"><a href="#事务回滚规则" class="headerlink" title="事务回滚规则"></a>事务回滚规则</h2><p>在默认情况下，事务只会在遇到运行时异常或Error时回归，在面对Checked异常时不会进行回滚。</p><h1 id="SpringBoot自动装配"><a href="#SpringBoot自动装配" class="headerlink" title="SpringBoot自动装配"></a>SpringBoot自动装配</h1><p>SpringBoot在SpringFramework的基础上借助SPI，进一步优化了自动装配。它会扫描外部引用jar包中的<code>META-INF/spring.factories</code>文件，将文件中的配置信息加载到Spring容器。</p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><p>首先看看SpringBoot中的核心注解SpringBootApplication</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@SpringBootConfiguration</span><span class="token annotation punctuation">@EnableAutoConfiguration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>    excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>    type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>    classes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">TypeExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>    type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span>    classes <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">AutoConfigurationExcludeFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpringBootApplication</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们重点要关注的是<code>EnableAutoConfiguration</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@AutoConfigurationPackage</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">AutoConfigurationImportSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableAutoConfiguration</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它里面的核心是<code>AutoConfigurationImportSelector</code>，这个类负责加载自动装配类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> NO_IMPORTS<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token class-name">AutoConfigurationEntry</span> autoConfigurationEntry <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>autoConfigurationEntry<span class="token punctuation">.</span><span class="token function">getConfigurations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先会判断是否启用了自动装配，如果启用了，就会去加载自动装配类</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/notes/20230304170601.png"></p><p>上面的代码是加载自动装配的过程，它首先需要加载所有的自动装配类，先获取所有自动装配类的全限定名，然后到spring.factories文件里读取要加载的类。</p><p>接下来进行去重以及筛选等操作</p><p>不过到这还有些问题，一个大型项目需要引入的jar包很多，其中会包含大量用不到的类，如果我们一股脑的全部加载，就会使项目启动非常缓慢，因此这里SpringBoot还会做进一步的筛选，将用不到的部分全部剔除。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 面试 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础（面试准备版）</title>
      <link href="/2023/02/27/offer-java/"/>
      <url>/2023/02/27/offer-java/</url>
      
        <content type="html"><![CDATA[<h1 id="字节码"><a href="#字节码" class="headerlink" title="字节码"></a>字节码</h1><p>JVM可以理解的代码就叫做字节码，他不面向任何特定的处理器。并且因为机器处理字节码的速度更高，Java拥有比解释型语言更高的执行效率。</p><p>在将<code>.class</code>文件翻译成机器码这一步中，JVM首先会加载字节码文件，然后通过解释器逐行解释执行。这种方式显然不会有多高的执行速度。在面对一些热点代码时，就会显得比较吃力。因此Java引入了JIT编译器，JIT是运行时编译，在完成第一次编译后会将这段代码保存下来，之后再次运行时，就不需要重新编译了。</p><p>HotSpot会采用惰性评估，由于热点代码在整个系统中的占比较小，因此JVM会根据代码每次被执行的情况收集信息，并做出一定的优化，随着执行次数的增多，对应代码块的速度就越快。</p><ul><li>JDK9引入了一种新的编译模式AOT（Ahead of Time Compilation）。它支持将字节码编译成机器码，这样就避免了JIT预热。但如果全部使用AOT，会导致Java的动态特性失效，因为像是动态代理这类动态特性，都是在运行时进行修改或生成。</li></ul><p>编译与解释并存：Java首先会将java文件编译成class文件，然后用Java解释器解释class文件</p><blockquote><p>equals()与hashCode()</p><p>equals用于比较两个对象是否相等，hashCode用于计算对象的哈希值。equals返回true时，hashCode必然相同，但hashCode相等时，由于哈希冲突的原因，对象不一定相等</p></blockquote><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="不可变"><a href="#不可变" class="headerlink" title="不可变"></a>不可变</h2><p>String不可变的原因在于，内部的char数组被private修饰，同时也没有向外界暴露修改方法。除此之外，String类被final修饰导致它不能被子类继承，也就避免了子类破坏String的e不可变性。</p><h2 id="运算符"><a href="#运算符" class="headerlink" title="+运算符"></a>+运算符</h2><p>Java重载了String的<code>+</code>运算符，每次进行字符串拼接时，都会新建一个StringBuilder，然后调用toString方法。因此大量使用字符串拼接是一个非常低效的策略</p><h2 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h2><p>字符串常量池是JVM用于减少字符串内存消耗的手段，主要目的是为了防止字符串的重复创建。当我们创建一个字符串对象时，JVM首先会去常量池里寻找是否有可用的已被缓存的对象，如果有，就直接使用，将这个对象赋值给目标。如果没有，就需要先创建一个字符串对象，并将他放入常量池里。</p><blockquote><p>常量折叠</p><p>对于可以在编译期确定值的变量，javac会直接将结果求出来作为常量放在生成的代码中。例如，String a = “b” + “c”。会被优化为a = “bc”</p></blockquote><h1 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h1><p>在OOP中，推荐模块之间基于接口编程，这样可以保证调用方模块对于被调用方是无感知的，如果涉及到具体实现，就违反了开闭原则，导致后期修改与维护非常困难。</p><p>而为了实现模块在装配时不需要在程序里动态指明，就需要一种服务发现机制。</p><p>SPI全称<code>Service Provider Interface</code>。它定义一组服务提供者需要实现的接口，以此将服务接口和具体服务实现分离开来，将调用方与实现方彻底解耦。</p><blockquote><p>SPI和API都是接口，他们都是将实现方与调用方连接起来的桥梁。区别在于，API由实现方决定，实现方来决定自己要提供什么服务。而SPI则由调用方来决定自己需要哪些服务。</p></blockquote><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>TODO</p><h1 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h1><p>序列化：将数据结构或对象转换成二进制字节流</p><p>反序列化：将二进制字节流转换成数据结构或对象</p><p>序列化和反序列化的目的是为了确保在某台机器上存储的数据后续可以被其他机器取用。</p><p><strong>常见的序列化协议</strong></p><ol><li>JDK自带的序列化</li></ol><p>  不常用，这里只讲讲<code>serialVersionUID</code>的用处。它就是一个类似版本号的东西，每次反序列化时，都会检查这个类的<code>serialVersionUID</code>是否和当前类中的一样，如果不一致，说明类出现了变动，不能继续序列化。</p><blockquote><p>如果不想某个变量被序列化，可以使用<code>transient</code>修饰它。在反序列化之后，这个变量的值会被设置为默认值。</p><p><code>static</code>变量因为不属于任何实例，因此永远不会被序列化</p></blockquote><ol start="2"><li>Kryo</li></ol><p>  Kryo 是一个高性能的序列化/反序列化工具，由于其变长存储特性并使用了字节码生成机制，拥有较高的运行速度和较小的字节码体积。</p><p>  demo：</p><p>  <img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/notes/202302251732063.png"></p><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="泛型擦除"><a href="#泛型擦除" class="headerlink" title="泛型擦除"></a>泛型擦除</h2><p>Java使用擦除来实现泛型，也就是说在泛型代码内部无法获得泛型的具体信息，对于程序来说<code>List&lt;Integer&gt;</code>和<code>List&lt;String&gt;</code>没有任何区别。这也就意味着我们无法在使用泛型的类中调用泛型的某些方法，哪怕我们传入的泛型确实有这些方法。</p><p>如果我们想要使用泛型的方法，那就必须告诉编译器，泛型的界限。比如，如果我们想要对列表中的元素进行排序，就必须要告诉编译器，这里的元素都是可排序的，你可以调用元素中的比较方法。</p><p>它的语法格式就是<code>&lt;? extends X&gt;</code>。这段代码告诉程序，传入的泛型必然是X的子类，因此可以放心调用X中的方法。</p><blockquote><p>由于数组拥有内建的协变类型，因此它可以在编译期和运行时进行内建检查。也就是说我们不能做出<code>Fruit[] f = new Apple[]</code>这样的操作。对编译器来说，向f中放入任何fruit的子类都是有意义的，但在运行时程序就会发现数组中的部分元素不符合条件。</p></blockquote><p>一个类不能实现同一个接口的两种变体，因为擦除的原因，两个变体会变成相同的接口。在下面的例子中，Hourly在程序眼里实现了两遍Payable</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">generics</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Payable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">Payable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Hourly</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">Payable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Hourly</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>有时我们希望建立两个类型间某种向上转型的关系，这时就可以用到通配符。<code>&lt;? extends A&gt;</code></p><p>但如果我们写了如下一段代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Fruit</span><span class="token punctuation">&gt;</span></span> flist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>flist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编译器会在add的时候抛出异常，因为对他来说，flist里面存储的究竟是什么类型并不清楚。因此我们无法向这个list里放入任何东西。</p><p>从上面数组的介绍中我们可以看出，它不接受数组类型的向上转型，泛型也一样，我们不能做出类似<code>List&lt;Fruit&gt; l = new List&lt;Apple&gt;</code>的操作。但如果我们确实想让泛型类向上转型，可以使用通配符来完成<code>List&lt;? extends Fruit&gt; l = new List&lt;Apple&gt;</code>。对于这个列表而言，get方法可以正常工作，因为他知道取出的元素必然是Fruit的子类，但set方法就无法工作了，因为set的元素可以是继承Fruit的任何事物。</p><p>如果我们希望向列表中添加元素，就需要用到<strong>逆变</strong>。它的语法格式是<code>&lt;? super T&gt;</code>。这样编译器就知道列表里的元素一定都是T或T的子类，自然也就可以放心添加元素了。</p><h3 id="无界通配符"><a href="#无界通配符" class="headerlink" title="无界通配符"></a>无界通配符</h3><p>无界通配符是<code>&lt;?&gt;</code>，它看起来跟raw类型没有什么区别，但实际上，使用无界通配符意味着开发人员希望在这里使用泛型约束，但目前还没有确定好，此时无界通配符就可以成为一个类似占位符的东西。</p><p>除此之外，无界通配符会阻止用户向其中set原生类型，因为在运行时，程序很有可能会获取到一个具体的类型，这意味着它必须避免将Orange set到实际以Apple为泛型的实例里。</p><h2 id="创建类型的实例"><a href="#创建类型的实例" class="headerlink" title="创建类型的实例"></a>创建类型的实例</h2><p>有时我们希望在泛型类中新建泛型的对象，但由于擦除导致的泛型类型不可用，程序无法确定传入的对象是否合法，也无法确定泛型类型是否有需要的构造器。</p><p>为此我们可以采取的解决方案是，创建一个工厂类，它接收一个Class参数，并创建指定的对象。而为了解决构造器不可用的问题，Java推荐使用显示工厂Supplier来创建对象，这样就只有那些实现了工厂的类型可以被创建。</p><h2 id="自限定类型"><a href="#自限定类型" class="headerlink" title="自限定类型"></a>自限定类型</h2><p>我们经常会见到一种非常古怪的泛型用法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SelfBounded</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">SelfBounded</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它的实际含义是：基类将自身作为模板，但使用泛型作为模板中所有参数的类型。例子如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SelfBounded</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">SelfBounded</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token class-name">T</span> element<span class="token punctuation">;</span>    <span class="token class-name">SelfBounded</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        element <span class="token operator">=</span> arg<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> element<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">SelfBounded</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">C</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>        <span class="token class-name">C</span> <span class="token function">setAndGet</span><span class="token punctuation">(</span><span class="token class-name">C</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token function">set</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自限定的参数意义在于它可以保证类型参数必须与正在被定义的类相同。</p><p>除此之外，自限定还可以进行参数协变，如果类A是自限定类，他有一个利用Base类作为参数进行set的方法。当B继承A时，如果它拥有一个Base的子类Derived作为参数的set方法，那么这个set方法将直接覆盖掉父类的set方法，而不是像普通的继承那样只是重载出一个新方法。</p><p>Unsafe</p><p>Unsafe包主要提供一些用于执行低级别、不安全操作的方法。因为Unsafe使得Java拥有了类似C++指针的能力，因此如果没有妥善使用，会带来安全问题。</p><p>此外，Unsafe提供的功能只要依靠本地代码实现，Java代码中只是声明方法头。</p><p>如果想要使用Unsafe，方案如下：</p><p>利用反射获取Unsafe类中已经完成实例化的单例对象theUnsafe</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Unsafe</span> <span class="token function">reflectGetUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token class-name">Field</span> field <span class="token operator">=</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"theUnsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Unsafe</span><span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们直接通过<code>getUnsafe</code>方法获取对象，会抛出异常，原因在于Java会判断当前类是否由<code>Bootstrap classloader</code>加载，如果不是的话就会抛出异常。也就是说只有启动类加载器加载的类才能调用Unsafe中的方法。这可以有效防止这些不安全的方法在不可信的代码中被调用。</p><h2 id="内存操作"><a href="#内存操作" class="headerlink" title="内存操作"></a>内存操作</h2><p>Unsafe可以提供直接操作内存的方法。通过Unsafe的方法分配的内存都是<strong>堆外内存</strong>。无法进行垃圾回收，因此必须要在finally代码块中进行内存释放。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//分配新的本地空间</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">long</span> <span class="token function">allocateMemory</span><span class="token punctuation">(</span><span class="token keyword">long</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//重新调整内存空间的大小</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">long</span> <span class="token function">reallocateMemory</span><span class="token punctuation">(</span><span class="token keyword">long</span> address<span class="token punctuation">,</span> <span class="token keyword">long</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将内存设置为指定值</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">setMemory</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">long</span> bytes<span class="token punctuation">,</span> <span class="token keyword">byte</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//内存拷贝</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">copyMemory</span><span class="token punctuation">(</span><span class="token class-name">Object</span> srcBase<span class="token punctuation">,</span> <span class="token keyword">long</span> srcOffset<span class="token punctuation">,</span><span class="token class-name">Object</span> destBase<span class="token punctuation">,</span> <span class="token keyword">long</span> destOffset<span class="token punctuation">,</span><span class="token keyword">long</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//清除内存</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token keyword">long</span> address<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>堆外内存的主要价值在于可以改善GC导致的程序停顿。由于堆外内存直接受操作系统控制而非JVM，因此可以维持较小的对内内存规模，从而在GC时减少回收停顿对于应用的影响。</p><p>此外，在IO通信中会存在堆内内存到堆外内存的数据拷贝操作，对于需要频繁进行内存间数据拷贝而且生命周期较短的暂存数据，放在堆外内存带来的效益明显更高。</p><h2 id="内存屏障"><a href="#内存屏障" class="headerlink" title="内存屏障"></a>内存屏障</h2><p>编译器和CPU会在保证最终输出结果相同的前提下，对指令进行重排序来优化性能。但指令重排序可能导致的一个严重的问题就是会导致CPU高速缓存中的数据与主内存中不一致。</p><p>内存屏障的作用就是防止屏障一侧的指令被重排序到另一侧，也就是说内存屏障相当于一个同步点，它会保证屏障前的指令全部被执行后再继续向后执行。</p><p>volatile关键字就能提供这样一种能力，不过Unsafe中允许用户手动设置屏障。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//内存屏障，禁止load操作重排序。屏障前的load操作不能被重排序到屏障后，屏障后的load操作不能被重排序到屏障前</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">loadFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//内存屏障，禁止store操作重排序。屏障前的store操作不能被重排序到屏障后，屏障后的store操作不能被重排序到屏障前</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">storeFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//内存屏障，禁止load、store操作重排序</span><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">fullFence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>List的子类有<code>ArrayList</code>，<code>Vector</code>，<code>LinkedList</code>。其中Vector是线程安全的，其余二者则都是线程不安全的。LinkedList底层使用双向链表实现，不过由于该数据结构只在头插时具备一定优势，因此基本没什么人使用。</p><h3 id="ArrayList源码分析"><a href="#ArrayList源码分析" class="headerlink" title="ArrayList源码分析"></a>ArrayList源码分析</h3><h4 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h4><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/notes/202303031051276.png"></p><p>上面是ArrayList的构造器代码，无参构造器生产的实例在初始条件下容量为0，其他情况则会根据入参调整初始实例的大小。</p><h4 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h4><p>ArrayList最重要的就是它的扩容机制，下面是相关的代码：</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/notes/20230303110518.png"></p><p>它的相关流程是：</p><ol><li><p>判断当前数组容量是否充足，如果充足，直接插入</p></li><li><p>如果不充足，转入扩容阶段。首先判断当前数组是否已经被修改过，如果已经被修改过，那么将数组扩容到原大小的1.5倍，这里让数组容量指数级增长的原因是，线性增长在数组大小很大的时候会导致频繁扩容（一个很大的数组往往代表它的增长会很迅速）频繁的内存分配会严重影响程序效率，因此指数级扩容显然是个更加明智的方法。如果不是，初始化数组，并将数组大小设置为10与要求大小中最大的那一个（10是默认容量大小）。</p><p>如果数组长度过大，会触发hugeLength方法，但因为这不是热门代码，因此被拆分到另一个方法里去。</p></li><li><p>最后将数组元素拷贝到新的数组中去（如果需要的话）</p></li></ol><blockquote><p>小技巧</p><p>ArrayList提供了一个<code>ensureCapacity</code>方法供用户调用，它需要一个<code>minCapacity</code>参数。在添加大量元素之前可以先调用这个方法，它会一次性将需要的容量分配到位。避免添加过程中频繁的内存分配。</p></blockquote><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/notes/20230303112019.png"></p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map中最常用的就是HashMap，因此这里主要讲解HashMap。HashMap是一个线程不安全的类。同ArrayList一样，我们也可以通过在构造器中传入容量大小设置它的初始容量，不过HashMap会自动将这个容量<strong>扩充到2的幂次</strong>。</p><p>在面对Hash冲突时，HashMap使用拉链式冲突解决办法，将冲突的元素串在一个链表当中。但当一条链表的长度大于阈值（默认为8）并且数组长度大于64时，会将这条链表树化以提升搜索效率。不过当数组小于64时，它会选择数组扩容以及rehash的方法来降低哈希冲突。</p><blockquote><p>TreeMap</p><p>除了HashMap之外，Java还提供了TreeMap，相比HashMap，它额外提供了根据键排序的能力以及对集合内元素搜索的能力。</p></blockquote><h3 id="HashMap源码分析"><a href="#HashMap源码分析" class="headerlink" title="HashMap源码分析"></a>HashMap源码分析</h3><h4 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h4><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/notes/20230303113627.png"></p><p>上面是HashMap执行插入操作时进行的操作，流程如下：</p><ol><li><p>如果哈希表还处于初始化状态，那就对它进行扩容</p></li><li><p>如果插入元素的目标位置是空的，直接插入</p></li><li><p>如果不为空，代表出现哈希冲突，首先判断当前位置的哈希值与key是否相同，如果相同，代表这个链表的头节点被踢了。</p></li><li><p>如果p已经被树化，调用对应的方法取出要被处理的链表节点。</p></li><li><p>如果以上两个条件都不满足，代表这个要到链表中寻找是否有重复节点，如果到达了链表的尾端，代表没有重复，可以直接插入，插入后如果发现长度大于阈值了，就准备树化（树化方法里会具体判断究竟该树化还是数组扩容）。如果找到了相同的节点，将原节点取出，准备踢了。</p></li></ol><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p>ConcurrentHashMap是确保线程安全的Map类。它的底层数据结构同HashMap一样，都是数组+链表+红黑树。</p><h4 id="实现线程安全的形式"><a href="#实现线程安全的形式" class="headerlink" title="实现线程安全的形式"></a>实现线程安全的形式</h4><ol><li><p>Segment</p><p>这时JDK1.7之前的实现，主要思想是对整个桶数组进行分割，分割出来的每一段都称为一个Segment，每当要执行操作时，调用者就要尝试去获取目标数据所在段的Segment锁。也就是说每一个Segment锁都可以保护一部分数据。不过锁的数量是不可变的，也就是说在数据量非常大的情况下，竞争就会比较明显。</p><p><img src="https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/java/collection/java7_concurrenthashmap.png" alt="Java7 ConcurrentHashMap 存储结构"></p></li><li><p>synchronize + CAS</p><p>在JDK1.8之后，采用了<strong>Node 数组 + 链表 / 红黑树</strong>解决冲突</p><p><img src="https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/java/collection/java8_concurrenthashmap.png" alt="Java8 ConcurrentHashMap 存储结构（图片来自 javadoop）"></p></li></ol><h4 id="ConcurrentHashMap源码分析"><a href="#ConcurrentHashMap源码分析" class="headerlink" title="ConcurrentHashMap源码分析"></a>ConcurrentHashMap源码分析</h4><blockquote><p>初始化</p></blockquote><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/notes/20230303172901.png"></p><p>从上面的代码中可以看出，它使用自旋+CAS完成初始化。其中sizeCtl是一个关键的标志变量，它的含义如下：</p><ol><li>-1 说明正在初始化</li><li>-N 说明有N-1个线程正在进行扩容</li><li>0 表示 table 初始化大小，如果 table 没有初始化</li><li>&gt; 0 表示 table 扩容的阈值，如果 table 已经初始化。</li></ol><blockquote><p>插入数据</p></blockquote><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/notes/20230303173141.png"></p><p>插入数据的步骤如下：</p><ol><li><p>计算哈希值</p></li><li><p>获取哈希值对应的存储地址，如果桶还是空的，用CAS初始化桶。如果桶内为空，利用CAS放入数据。如果计算出的哈希值判断Map需要扩容（hash == MOVED），进行相应的扩容处理。最后一种情况是，发生哈希冲突，需要向链表/红黑树中插入节点，此时需要使用同步代码块保护链表/红黑树，在同步代码块内执行插入操作。</p></li><li><p>若节点数量大于8，执行树化操作，这里和HashMap一样。</p></li></ol><h1 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h1><h2 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h2><p>Java中的线程与进程间的关系如下</p><p><img src="https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/java/jvm/java-runtime-data-areas-jdk1.8.png" alt="Java 运行时数据区域（JDK1.8 之后）"></p><p>线程共享进程的堆和方法区（或者说元空间）。但每个线程都有自己的虚拟机栈，本地方法栈和程序计数器。</p><p>下面来解释一下这三者私有的原因：</p><ol><li><p>程序计数器：字节码解释器需要通过程序计数器来读取指令。在多线程情况下，当前线程很有可能被临时挂起，在之后恢复的时候就需要程序计数器来帮忙记录程序执行到哪里了。</p></li><li><p>虚拟机栈：它用于存储一些临时变量，常量池引用等程序私有的东西。因此这些东西不能共享。</p></li><li><p>本地方法栈：和虚拟机栈发挥的作用非常类似，只不过它是为本地方法服务的。</p></li></ol><blockquote><p>能否直接调用Thread的run方法启动线程</p><p>并不能，Thread的start方法所做的事情并不只是调用run方法。它的实际功能是让这个线程进入就绪状态，这样它才会被分配到时间片，然后执行run方法。如果直接调用run方法，只相当于在调用者的线程中执行了一个普通的方法。</p></blockquote><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>四大要素：互斥，不可剥夺，占有等待，环路等待</p><blockquote><p>sleep()和wait()对比</p><ol><li><p>前者不会释放锁，而后者会释放锁</p></li><li><p>前者通常用于暂停执行，后者通常用于线程间交互</p></li><li><p>前者完成执行后，线程会自动苏醒。后者需要其他线程调用同一个对象上的notify方法来唤醒</p></li></ol><p>wait是让获得对象锁的线程实现等待，也就是说它涉及的是对象，因此必然被定义在对象方法中。</p></blockquote><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p>禁止指令重排序的实战应用</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/notes/20230304095615.png"></p><p>上面是使用双重锁校验的单例模式实现，可以看到不仅使用同步代码块保护了对象的创建过程，还是用volatile修饰了实例。下面简单讲解一下这么做的原因：</p><p>创建对象看上去就只有一行代码，但实际上它分为3步：</p><ol><li>为&nbsp;<code>uniqueInstance</code>&nbsp;分配内存空间</li><li>初始化&nbsp;<code>uniqueInstance</code></li><li>将&nbsp;<code>uniqueInstance</code>&nbsp;指向分配的内存地址</li></ol><p>这其中由于CPU会进行指令重排序，最终他可能按照1-&gt;3-&gt;2的顺序执行，如果此时另一个线程在3之后，2之前进入了这个方法并进行判断，就会发现实例已经完成初始化了，但实际上只是引用完成了初始化，实例还没有完全初始化完成。使用volatile可以保证初始化指令不会被重排序，也就保证了正确性。</p><blockquote><p>直接用同步块包裹住整个逻辑也是可以的，此时就不需要volatile了，因为其他线程连判断逻辑都进入不了</p></blockquote><blockquote><p>volatile可以禁止指令重排序，但对他的操作并不是原子性的！！！ </p></blockquote><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><h3 id="公平锁与非公平锁"><a href="#公平锁与非公平锁" class="headerlink" title="公平锁与非公平锁"></a>公平锁与非公平锁</h3><p>公平锁：锁被释放后，先申请的线程得到锁，性能较差，因为为了维护时间上的绝对顺序，上下文切换会比较频繁</p><p>非公平锁：锁被释放后，后申请的线程可能会先获取到锁，是随机或按照其他优先级排序的。缺点在于可能会导致线程饥饿。</p><h3 id="可中断锁与不可中断锁"><a href="#可中断锁与不可中断锁" class="headerlink" title="可中断锁与不可中断锁"></a>可中断锁与不可中断锁</h3><ul><li><strong>可中断锁</strong> ：获取锁的过程中可以被中断，不需要一直等到获取锁之后 才能进行其他逻辑处理。<code>ReentrantLock</code> 就属于是可中断锁。</li><li><strong>不可中断锁</strong> ：一旦线程申请了锁，就只能等到拿到锁以后才能进行其他的逻辑处理。 <code>synchronized</code> 就属于是不可中断锁。</li></ul><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>ThreadLocal是用于给每个线程绑定专属于它的变量，下面来看看它是如何实现的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token comment">//......</span>    <span class="token comment">//与此线程有关的ThreadLocal值。由ThreadLocal类维护</span>    <span class="token class-name">ThreadLocal<span class="token punctuation">.</span>ThreadLocalMap</span> threadLocals <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//与此线程有关的InheritableThreadLocal值。由InheritableThreadLocal类维护</span>    <span class="token class-name">ThreadLocal<span class="token punctuation">.</span>ThreadLocalMap</span> inheritableThreadLocals <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//......</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面的代码中可以看出，Thread类里面有两个ThreadLocalMap，map中存储的是(ThreadLocal，Object)键值对。</p><p>当我们调用ThreadLocal的set和get方法时，实际上实在操作这个Thread内部的ThreadLocalMap</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ThreadLocalMap</span> map <span class="token operator">=</span> <span class="token function">getMap</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        map<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">createMap</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ThreadLocal的数据结构如图</p><p><img src="https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/java/concurrent/threadlocal-data-structure.png" alt="ThreadLocal 数据结构"></p><blockquote><p>内存泄漏问题</p><p>由于ThreadLocalMap中的key是一个弱引用，因此如果ThreadLocal没有被外部强引用，那么key就会被GC清理掉，这样就会出现key为null而value不为null的情况。如果我们不采取一些措施，这些value永远都不会被清理掉，这就导致内存泄漏。</p></blockquote><p>线程池</p><p>线程池就是管理一系列线程资源的资源池，每当需要处理任务时，就从线程池里取出一个线程资源去处理。处理完之后的线程不会被销毁，而是会回到线程池。</p><p>池化思想的目的就是减少每次获取资源的开销，提高资源利用率。</p><p>线程池的好处：</p><ol><li><p>降低资源开销：线程池中的线程可被重复利用</p></li><li><p>提高响应速度：每当有任务到来，可以直接从线程池中取出线程执行操作，省略了创建线程等一系列复杂操作</p></li><li><p>提高可管理性：使用线程池可以对线程进行统一的分配，调优和监控</p></li></ol><h3 id="线程池的饱和策略"><a href="#线程池的饱和策略" class="headerlink" title="线程池的饱和策略"></a>线程池的饱和策略</h3><ol><li><p>ThreadPoolExecutor.AbortPolicy：抛出异常，拒绝处理之后来的任务</p></li><li><p>CallerRunsPolicy：直接使用调用者来执行任务，如果调用者程序已经结束，抛弃该任务</p></li><li><p>DisardPolicy：不处理新任务，直接丢弃</p></li><li><p>DiscardOldestPolicy：丢弃最老的任务</p></li></ol><h3 id="处理任务的流程"><a href="#处理任务的流程" class="headerlink" title="处理任务的流程"></a>处理任务的流程</h3><ol><li><p>若当前线程池的核心线程数没有满，直接取出一个线程开始执行任务</p></li><li><p>若核心线程数已满，且等待队列没满，放到等待队列中去等待执行</p></li><li><p>若等待队列已满，开始扩容线程池</p></li><li><p>若线程池中线程数已满，根据饱和策略进行处理</p></li></ol><p>通俗理解：正常情况下，线程池只会使用核心线程进行工作。如果发现等待队列都满了，代表这段时间非常繁忙，此时就开始扩充线程池，如果线程池扩充到最大值还无法应付庞大的任务数，就按照饱和策略处理多余的任务。</p><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/notes/20230305150211.png"></p><ol><li><p>首先会判断当前工作线程的个数是否少于核心线程数，如果是，就执行这个任务。在addWorker这个方法中会原子性的检查运行状态和工作线程数，避免并发环境下的问题。</p></li><li><p>如果第一轮没有添加成功，会尝试将任务添加到等待队列中。但添加到等待队列还不算完成，我们需要再次确认线程池的运行状态，避免在线程池无法工作的情况下向里面添加任务。同时，如果有个工作线程刚 好在添加完任务之后结束，就应该直接将新的任务拉去执行</p></li><li><p>最后一种情况就是核心线程数已满，且等待队列也已经满了，这时候尝试扩充线程池，如果失败就代表线程池已经完全爆满，启动饱和策略。</p></li></ol><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/notes/20230305150911.png"></p><p>上面是添加工作线程的操作：</p><ol><li><p>首先判断当前线程池的状态是否可以接收新的任务</p></li><li><p>接着在循环中进行CAS操作，尝试增加工作线程数，如果在此期间线程池状态发生变更，返回步骤1重新开始。如果CAS失败，通过自旋再次尝试</p></li><li><p>如果成功增加了工作线程数，就尝试创建工作线程。在创建过程中需要获取全局锁，因为workers是一个HashSet。之后检查线程状态，完成创建后释放锁，并启动线程。</p></li></ol><h3 id="设定线程池大小"><a href="#设定线程池大小" class="headerlink" title="设定线程池大小"></a>设定线程池大小</h3><blockquote><p>在Linux中，CPU分配时间片的单位是线程，进程只是一个容器</p></blockquote><p>线程池中的线程数并非是越大越好。在多线程编程中，线程数一般会大于CPU的核心数，CPU会给每个线程分配时间片。如果线程池中的线程太多，很有可能导致频繁的上下文切换，这会严重阻碍CPU的运行效率。</p><p>下面是两个简单且适用较广的公式（N为核心数）：</p><ol><li><p>CPU密集型：N+1。比核心数多一个线程是为了防止线程偶发的缺页中断，或者其他原因导致的任务暂停，此时多出来的那个线程就可以顶上去，充分利用CPU资源。</p></li><li><p>IO密集型：2N。在面对大量IO时，系统会用大量时间处理IO交互，而系统在IO交互时是不会占用CPU资源的，此时就可以将CPU让出来给其他线程。</p></li></ol><h2 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h2><p>Java内存区域和JMM（Java内存模型）的区别：</p><ul><li><p>JVM内存结构和Java虚拟机的运行时区域有关，定义了JVM在运行时如何分区存储程序数据</p></li><li><p>JMM与并发编程相关，抽象了线程和主内存之间的关系，规定了从 Java 源代码到 CPU 可执行指令的这个转化过程要遵守哪些和并发相关的原则和规范，其主要目的是为了简化多线程编程，增强程序可移植性</p></li></ul><h3 id="抽象主内存与本地内存的方式"><a href="#抽象主内存与本地内存的方式" class="headerlink" title="抽象主内存与本地内存的方式"></a>抽象主内存与本地内存的方式</h3><p>详见：<a href="https://javaguide.cn/java/concurrent/jmm.html#jmm-%E6%98%AF%E5%A6%82%E4%BD%95%E6%8A%BD%E8%B1%A1%E7%BA%BF%E7%A8%8B%E5%92%8C%E4%B8%BB%E5%86%85%E5%AD%98%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB">JMM（Java 内存模型）详解 | JavaGuide(Java面试+学习指南)</a></p><h3 id="happens-before原则"><a href="#happens-before原则" class="headerlink" title="happens-before原则"></a>happens-before原则</h3><p>happens-before关系实际上就是一种对事物发生前后顺序的关系的描述，而与实际的绝对时间没有关系。从本质上来讲，他想表达的意思是前一个操作对之后的操作是可见的。</p><p>设计思想：</p><ol><li><p>对编译器和处理器的约束尽可能少，只要不影响程序最终运行结果，就允许进行重排序优化。</p></li><li><p>对于会改变程序执行结果的重排序，必须禁止。</p></li></ol><p>常见规则：</p><ol><li><p>程序顺序规则：一个线程内，按照代码顺序，写在前面的 h-b 与之后的代码</p></li><li><p>解锁规则：解锁在加锁之前</p></li><li><p>volatile变量规则：对于volatile修饰的变量，对他的写操作可以被之后所有对他的操作看到</p></li><li><p>传递规则：A h-b B, B h-b C -&gt; A h-b C</p></li><li><p>线程启动规则：start方法发生在线程所有其他操作之前</p></li></ol><h2 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h2><p>AQS是一个抽象队列同步器。它的核心思想是，如果被请求的共享资源空闲，就将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，就需要一套线程阻塞等待以及被唤醒时所分配的机制，这个机制使用CLH锁实现。</p><p>CLH锁是一个虚拟的双向队列，暂时获取不到锁的线程会被加入到队列中。AQS会将每条请求共享资源的线程封装成一个队列节点来实现锁的分配。每个节点表示一个线程，它保存着线程的引用，在队列中的状态。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/40cb932a64694262993907ebda6a0bfe~tplv-k3u1fbpfcp-zoom-1.image"></p><p>接下来用<code>ReentrantLock</code>为例说明AQS工作方式。AQS使用state变量来表示同步状态，使用volatile修饰，确保它的修改对所有线程可见。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>state初始值为0，当A线程调用lock方法时，会尝试获取该锁，并将<code>state+1</code>。此时其他线程再调用lock方法就会失败，直到A线程释放锁，让<code>state-1</code>。由于A获取的是可重入锁，因此它可以再次获取到这把锁并再次将<code>state+1</code>。但在释放的时候也必须执行相同次数的减操作。</p><h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>方法区会存储已被虚拟机加载的类信息、字段信息、方法信息、常量、静态变量、即时编译器编译后的代码缓存等数据。不过JVM只是规定了有这么一个概念以及它的作用，具体实现还是看虚拟机的开发者。</p><p>元空间就相当于是一个方法区的实现，它取代了原本的永久代。相比于永久代，它的优势在于：</p><ol><li><p>永久代有一个JVM本身设置的固定大小上限，无法进行调整，而元空间使用的是直接内存，虽然受本机可用内存限制，元空间仍可能溢出，但概率相对来说小了很多。</p></li><li><p>元空间存放的是类的元数据类型，这样加载多少类的元数据就不由MaxPermSize控制，而是由系统实际可用空间来控制。</p></li></ol><h2 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h2><p>Class文件中有用于存放编译器生成的各种字面量和符号引用的常量池表。常量池表会再类加载后存放到方法区的运行时常量池中。</p><h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><ol><li>类加载检查</li></ol><p>  虚拟机在看到一条new指令时，首先去尝试利用这个指令的参数到常量池中定位这个类的符号引用，然后检查这个符号引用代表的类是否已经被加载过、解析和初始化过，如果没有，就要进行类加载。</p><ol start="2"><li>分配内存</li></ol><p>  接下来要为这个类分配内存，类加载完毕后，虚拟机就可以确定这个类需要分配多少内存。分配内存有两种方法：</p><ol><li>指针碰撞</li></ol><pre><code>这种方法是用于没有内存碎片的情况，它会在内存区中间维护一个指针，一边是已经使用的空间，一边是没有使用的空间，分配内存时只要让指针向没有分配的一侧移动即可。</code></pre><ol start="2"><li>空闲列表</li></ol><pre><code>这种方法适合于有内存碎片的情况，虚拟机会维护一个列表，里面记录了哪些空间可用，分配内存是就从可用空间里找一块足够大的分配给对象。</code></pre><p>  不过在分配内存时还存在并发问题，为了避免多线程同时创建对象时出现丢失数据的情况，JVM采取以下两种方法保证线程安全：</p><ol><li><p>CAS + 失败重试</p></li><li><p>TLAB：为每一个线程与现在Eden区（新生代区）分配一块内存，线程创建对象时优先使用预分配的内存，如果不够用了，再转用CAS+失败重试。</p></li><li><p>初始化零值</p></li><li><p>设置对象头</p></li></ol><p>  JVM对对象进行必要的设置，例如该对象属于哪个类，如何找到类的元数据信息、对象的哈希码、GC分代年龄等。</p><ol start="5"><li>执行init方法，也就是构造器</li></ol><h2 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h2><p>对象在内存中的布局可以分为3个区域：对象头、实例数据和对齐填充</p><p>对象头包含两部分信息：第一部分用于存储对象自身的运行时数据，另一部分是类型指针，指向这个对象所属的类。</p><p>实例数据就是这个对象的有效信息</p><p>对齐填充用于占位</p><h2 id="对象的访问定位"><a href="#对象的访问定位" class="headerlink" title="对象的访问定位"></a>对象的访问定位</h2><ol><li>句柄</li></ol><p>  Java在堆中划分出一块内存作为句柄池，reference中存储的就是对象的句柄地址。句柄中包含了对象的实例数据和对象类型数据各自的地址信息。这么做的好处在于，即使对象发生了移动，句柄地址也不会有什么影响</p><p>  <img src="https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/java/jvm/access-location-of-object-handle.png" alt="对象的访问定位使用句柄"></p><ol start="2"><li>直接指针</li></ol><p>  reference直接指向对象实例地址，它的效率更高，节省了一次指针定位的时间开销</p><p>  <img src="https://guide-blog-images.oss-cn-shenzhen.aliyuncs.com/github/javaguide/java/jvm/access-location-of-object-handle-direct-pointer.png" alt="对象的访问定位直接指针"></p><h2 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h2><p>类加载器分类：</p><ul><li><strong>BootstrapClassLoader(启动类加载器)</strong> ：最顶层的加载类，由 C++实现，负责加载 <code>%JAVA_HOME%/lib</code>目录下的 jar 包和类或者被 <code>-Xbootclasspath</code>参数指定的路径中的所有类。</li><li><strong>ExtensionClassLoader(扩展类加载器)</strong> ：主要负责加载 <code>%JRE_HOME%/lib/ext</code> 目录下的 jar 包和类，或被 <code>java.ext.dirs</code> 系统变量所指定的路径下的 jar 包。</li><li><strong>AppClassLoader(应用程序类加载器)</strong> ：面向我们用户的加载器，负责加载当前应用 classpath 下的所有 jar 包和类。</li></ul><p>著作权归所有<br>原文链接：<a href="https://javaguide.cn/java/jvm/classloader.html">https://javaguide.cn/java/jvm/classloader.html</a></p><p>加载一个类主要分为以下几步：</p><p>加载，连接，初始化，其中连接又分为验证，准备，解析</p><ol><li><p>加载：将class文件加载到内存，将静态数据结构转化成方法区中运行的数据结构，生成Class对象</p></li><li><p>连接</p></li></ol><ul><li><p>验证：确保加载的类符合JVM规范和安全，算是一个安全检查</p></li><li><p>准备：初始化类中的静态变量（分配内存+设置初始值）。这里生成的静态变量实例会直接存放在堆中而非永久代中，因为永久代的GC效率很低，放在堆中可以方便GC。</p></li><li><p>解析：将符号引用替换为直接引用</p></li></ul><ol start="3"><li>初始化：调用构造器，整个过程是线程安全的</li></ol><h2 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h2><p>当一个类收到了加载请求时，不会直接尝试自己加载，而是委托给父类去完成。如果父类的加载器无法完成工作，子类加载器才会自行尝试加载</p><p>这么做的好处在于，可以防止用户的代码影响JDK代码，因为最高级的类加载器是JDK的加载器，用户无法创建和JDK自带的类全类名完全相同的类。</p><p>同时也可以避免类的重复加载（相同的类被不同的类加载器加载会产生不同的类），使用了双亲委派机制之后大部分的类加载都会由最顶级的加载器加载。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/2023/02/07/os/"/>
      <url>/2023/02/07/os/</url>
      
        <content type="html"><![CDATA[<h1 id="冯诺依曼模型"><a href="#冯诺依曼模型" class="headerlink" title="冯诺依曼模型"></a>冯诺依曼模型</h1><p>计算机基本结构：运算器，存储器，控制器，IO设备</p><p>存储单元和输入输出设备和CPU的交互离不开总线，计算机基本结构的关系如下：</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/notes/20230328135316.png"></p><h2 id="中央处理器"><a href="#中央处理器" class="headerlink" title="中央处理器"></a>中央处理器</h2><p>中央处理器就是所谓的CPU，常说的32位，64位指的是CPU的<strong>位宽</strong>。位宽代表了CPU一次可以运算的数据量。</p><p>CPU内部还有一系列的寄存器，他们与CPU的物理距离非常近，因此可以非常快速的进行运算。</p><p>寄存器的分类大致如下：</p><ol><li>通用寄存器：存放需要进行运算的数据</li><li>程序计数器：存储CPU要执行吓一跳指令<strong>所在的内存地址</strong></li><li>指令存储器：存放当前正在执行的指令</li></ol><h3 id="CPU执行的具体流程"><a href="#CPU执行的具体流程" class="headerlink" title="CPU执行的具体流程"></a>CPU执行的具体流程</h3><p>CPU从<strong>程序计数器</strong>中获取将要执行的指令的内存地址，接着CPU的<strong>控制单元</strong>操作<strong>地址总线</strong>指定要访问的内存地址。然后通知内存设备准备数据，数据准备好后通过<strong>数据总线</strong>将指令送入CPU，CPU收到数据后，将这个指令传入指令寄存器。</p><p>完成上述步骤后，CPU就算完成了指令读取，接下来程序计数器会自增，自增大小取决于CPU的位宽。</p><p>最后CPU分析指令寄存器中的指令，确认指令的类型和参数，如果是计算类型的指令，就将指令交给<strong>逻辑运算单元</strong>运算，如果是存储类型的指令，就交由<strong>控制单元</strong>执行。</p><p>现在大多数CPU都采用流水线的方式执行指令，流水线就是把一个任务拆成多个小任务，一条指令通常包含4个阶段：</p><ol><li>CPU通过程序计数器读取对应内存地址的指令</li><li>CPU对指令进行解码</li><li>CPU执行指令</li><li>CPU将计算结果写回寄存器或内存</li></ol><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/notes/20230328135438.png"></p><h2 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h2><p>总线用于CPU和内存以及其他设备之间的通信，它的分类如下：</p><ol><li>地址总线：指定CPU将要操作的内存地址</li><li>数据总线：用于读写内存的数据</li><li>控制总线：用于发送和接收信号</li></ol><p>当CPU要读写内存数据时，一般会经过如下步骤：</p><ol><li>通过<strong>地址总线</strong>获取要读写的内存地址</li><li>通过<strong>控制总线</strong>获取要执行的命令</li><li>通过<strong>数据总线</strong>传输数据</li></ol><h3 id="线路位宽"><a href="#线路位宽" class="headerlink" title="线路位宽"></a>线路位宽</h3><p>在总线中有个概念叫线路位宽，它与CPU位宽并不相同，CPU位宽表示这个CPU一次最多能运算的数据位数，而线路位宽表示这个机器的寻址范围。</p><p>eg：如果只有1根地址总线，那么CPU能操作的内存范围就是2^1，如果有32根地址总线，那么CPU可以寻址的范围就是2^32。</p><p>通常情况下，CPU位宽大于等于线路位宽，否则的话CPU的操作会变得非常复杂。</p><h1 id="CPU-Cache"><a href="#CPU-Cache" class="headerlink" title="CPU Cache"></a>CPU Cache</h1><p>在Linux中，CPU Cache被分为大小不等的三级缓存，分别是L1 Cache，L2 Cache，L3 Cache。其中的L1 Cache通常会分为<strong>数据缓存</strong>和<strong>指令缓存。</strong></p><p>L1和L2缓存是每个核心独有的，而L3缓存是多个CPU核心共享的</p><p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/8c619c94-9405-40be-95e1-06ccb5085c08/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45/20230328/us-west-2/s3/aws4_request&amp;X-Amz-Date=20230328T055452Z&amp;X-Amz-Expires=86400&amp;X-Amz-Signature=8138be63ab7445c4091039dd34cf2fd3e2a5491493ea2a847a37a862a91eaeaa&amp;X-Amz-SignedHeaders=host&amp;response-content-disposition=filename=%22Untitled.png%22&amp;x-id=GetObject"></p><p>CPU Cache由多个Cache Line组成，Cache Line是CPU从内存读取数据的基本单位。</p><p>Cache Line由各种标志+数据块组成</p><p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/aa0ccc79-bbfe-445e-b281-c24b58866b2d/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45/20230328/us-west-2/s3/aws4_request&amp;X-Amz-Date=20230328T055500Z&amp;X-Amz-Expires=86400&amp;X-Amz-Signature=8b25beb8235622358748800adc19606330b0ce7a0d41f5b0d30aba272e5131d6&amp;X-Amz-SignedHeaders=host&amp;response-content-disposition=filename=%22Untitled.png%22&amp;x-id=GetObject"></p><h2 id="直接映射"><a href="#直接映射" class="headerlink" title="直接映射"></a>直接映射</h2><p>直接映射是CPU查询缓存的策略之一。他的基本思想是：将内存块的地址始终映射在一个缓存块当中，映射关系式用的是取模运算。</p><p>eg：一台机器的内存有32个内存块，CPU中包含8个Cache Line，那么对于每个内存块，将它的编号%8就是它对应的缓存块。</p><p>从上面的例子我们可以很明显的看出一个缓存块会对应多个内存块，CPU判断当前位于缓存块的数据是否是自己想要数据的依据就是Cache Line中的组标记，这个组标记会记录当前缓存块中的数据对应的内存块，CPU可以利用他区分不同的内存块。</p><p>除了组标记之外，CPU Cache Line还包含三个信息：</p><ul><li>实际的数据</li><li>有效位，标记缓存块中的数据是否是有效的，如果有效位是0，即使缓存块中有数据也不会读取缓存。</li></ul><p>当CPU要访问内存时，他会先通过地址总线获取一个内存的访问地址，这个地址包含：组标记，Cache Line索引，偏移量。偏移量帮助CPU确定目标数据在缓存数据块中的位置。</p><p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/d181a345-d9a1-440f-ae19-16ca15fcb034/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45/20230328/us-west-2/s3/aws4_request&amp;X-Amz-Date=20230328T055511Z&amp;X-Amz-Expires=86400&amp;X-Amz-Signature=1a64f54c34af68ca03625ea4b0e6f540f95af9469647ca8aa0b2863ebb5bc990&amp;X-Amz-SignedHeaders=host&amp;response-content-disposition=filename=%22Untitled.png%22&amp;x-id=GetObject"></p><p>综上所述，CPU访问一个内存地址时会经历4个步骤：</p><ol><li>根据地址中的索引信息，计算它在Cache Line中对应的索引</li><li>找到Cache Line后，判断有效位，如果无效，直接访问内存</li><li>对比内存地址中的组标记和缓存块中的组标记，确认缓存块中的数据就是否为要访问的数据，如果不是，CPU会直接访问内存，并重新加载数据</li><li>根据内存地址中的偏移量信息，从缓存块的数据块中读取对应的字。</li></ol><h2 id="缓存一致性"><a href="#缓存一致性" class="headerlink" title="缓存一致性"></a>缓存一致性</h2><p>CPU Cache有两种写入数据的方式：</p><ol><li>写直达</li></ol><p>  将数据同时写入内存和缓存</p><p>  每次写入数据之前都会判断数据是否在CPU Cache里，如果在，将数据写入CPU Cache和内存。如果不在，直接写入内存。</p><ol start="2"><li>写回</li></ol><p>  当发生写操作时，数据只会被写入CPU Cache中，只有当该数据所在的Cache Block被替换掉时，才会将数据写入内存。</p><p>  具体流程：</p><p>  当CPU要写入数据时，如果数据就在Cache中，直接将数据写入到缓存，并将这个数据块标记为dirty</p><p>  如果数据不在Cache中，定位所在的Cache Block</p><ul><li><p>如果目标Block不是dirty，从内存中读取数据到这个Block中，然后写入数据。</p></li><li><p>如果是dirty，首先要将该数据块写回内存，然后读取对应数据块到Cache中，接着修改数据，最后标记这个数据块为dirty。</p><p>这里可能会有些疑问：既然写操作必然会导致数据块被标记为dirty，那有什么必要将数据块先读入内存。</p><p>将数据块读入内存，其实并不一定是要利用它的数据，而是让其他CPU核心知道，自己获得了这块数据的占有权。如果该数据块之前被其他CPU修改过，但还没有写入内存，此时这个读操作就会将脏页刷入内存，保证缓存一致性。</p></li></ul><h3 id="缓存一致性问题"><a href="#缓存一致性问题" class="headerlink" title="缓存一致性问题"></a>缓存一致性问题</h3><p>由于CPU每个核心都有自己的缓存，当某个核心修改和其他核心共享的数据时，就会导致缓存不一致。</p><p>针对这一问题，解决方案需要满足以下两点：</p><ol><li><strong>写广播</strong>：一个核心要进行写操作，必须通知其他核心</li><li><strong>串行化</strong>：写操作的执行顺序在其他核心看来必须是一致的</li></ol><p>要想保证第二点，就需要引入锁机制</p><h3 id="总线嗅探"><a href="#总线嗅探" class="headerlink" title="总线嗅探"></a>总线嗅探</h3><p>每当有核心要进行写操作，它就会向总线发送一条广播，其他核心在收到这条消息后，如果发现修改的数据块在自己的缓存中也有，就将对应的缓存块标记为已失效。</p><p>总线嗅探的思想非常简单，但它的问题在于会给总线带来很大的压力，并且无法保证串行化。</p><h3 id="MESI协议"><a href="#MESI协议" class="headerlink" title="MESI协议"></a>MESI协议</h3><p>MESI协议就是基于总线嗅探实现事务串行化，并且利用状态机机制减轻总线压力。</p><p>MESI代表4个状态的首字母缩写：</p><ul><li>Modified 已修改 （dirty标记）</li><li>Exclusive 独占 （只有一个核心持有该数据块）</li><li>Shared 共享 （多个核心持有该数据块）</li><li>Invalidated 已失效 （当前缓存块已失效）</li></ul><p>当A号CPU核心要读取数据时，会向总线发送一条广播，如果没有其他核心拥有该数据，它会从内存中读取，并将这个数据块标记为<strong>独占</strong>。</p><p>如果核心B有对应的数据且不是脏的，他就会将这个数据发送给核心A，并将这个数据块标记为<strong>共享</strong>。此时A和B持有的缓存数据是一样的。</p><p>接着A修改了这个数据，此时他会向广播中发送一条消息，B收到消息后会将对应缓存块标记为<strong>已失效</strong>。A完成修改后将数据块标记为<strong>已修改</strong>。此后A再修改这个数据块就不需要再向总线发送消息了，因为其他核心已经知道自己对应的缓存已经失效。</p><p>如果其他核心要读取更新之后的数据，他们会向总线发送一条通知，A发现这个数据自己有，且是修改状态。此时它就会将缓存数据刷回内存。这样其他核心读取到的就是最新的数据了。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/notes/20230328135531.png"></p><h2 id="伪共享"><a href="#伪共享" class="headerlink" title="伪共享"></a>伪共享</h2><p>伪共享的场景：多个CPU核心共享某个数据块，但使用的都是该数据块中不同部分的数据。如果每个核心轮番进行写操作，就会导致缓存被频繁刷入内存，缓存命中率大幅降低。</p><p>伪共享的解决方案显然是避免让频繁修改的热点数据出现在同一个Cache Line里。</p><p>Linux内核提供了<code>__cacheline_aligned_in_smp</code>宏定义来解决伪共享问题。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">test</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">int</span> b __cacheline_aligned_in_smp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>由于a和b被定义在同一个结构体里，因此他们很可能出现在同一个Cache Line中。</p><p>但在加上了宏定义之后，他们实际的存储方式是这样的</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/notes/20230328135550.png"></p><p>显然这是空间换时间的思想，消耗一部分CPU缓存空间，换来性能提升。</p><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>在Linux中，进程和线程都使用<code>task_struct</code>结构体来表示，区别在于线程的<code>task_struct</code>结构体里部分资源是共享了进程已创建的资源</p><p>根据任务的优先级以及响应要求，主要分为两种，优先级的数值越小，优先级越高：</p><ol><li>实时任务：对系统的响应事件要求很高，优先级在0-99范围内</li><li>普通任务：优先级在100-139</li></ol><h2 id="调度类"><a href="#调度类" class="headerlink" title="调度类"></a>调度类</h2><p>Linux为了保证高优先级的任务能够尽早被执行，设置了如下调度类：</p><p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/630f629a-1091-45d3-8c9c-54f5adaaaa43/Untitled.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&amp;X-Amz-Credential=AKIAT73L2G45EIPT3X45/20230328/us-west-2/s3/aws4_request&amp;X-Amz-Date=20230328T055557Z&amp;X-Amz-Expires=86400&amp;X-Amz-Signature=ef2f2d045ea436eca55193970f92581df4ce4cea20dcb5080390d7e69241034b&amp;X-Amz-SignedHeaders=host&amp;response-content-disposition=filename=%22Untitled.png%22&amp;x-id=GetObject"></p><p>Deadline和RealTime都是用于实时任务，他们的调度策略解释如下：</p><ol><li>DEADLINE：优先执行临近截止时间的任务</li><li>FIFO：对于同优先级的任务，先到先服务。高优先级任务可以抢占低优先级任务</li><li>RR：对于相同优先级的任务，轮流分配时间片。用完时间片的任务会被放到队列尾部。保证优先级相同的任务的公平性。但高优先级任务仍然可以抢占低优先级。</li></ol><p>Fair调度类应用于普通任务：</p><ol><li>NORMAL：普通任务使用的调度策略</li><li>BATCH：后台任务使用的调度策略，不与终端进行交互</li></ol><h2 id="完全公平调度"><a href="#完全公平调度" class="headerlink" title="完全公平调度"></a>完全公平调度</h2><p>在系统中，实时任务的数量远小于普通任务。因此这里我们着重关注一下普通任务。而对普通任务来说，公平性是最重要的。Linux基于完全公平调度（CFS）设计了一个调度算法。</p><p>算法的理念是让分配给每个任务的CPU时间是一样的。因此它会为每一个任务安排一个虚拟运行时间vruntime。一个任务运行的时间越久，vruntime会越大。某个任务如果用完时间片后还没有完成，会被重新估计vruntime，因此一个多次耗尽时间片的任务最终会被分配一个较低的优先级。而CPU在挑选任务时，优先选择vruntime较小的。</p><p>$$<br>vruntime += delta_exec * NICE_0_LOAD / 权重<br>$$</p><p>这里nice级别越低，代表优先级越高</p><h1 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h1><p>中断是系统用来响应硬件设备请求的一种机制，OS收到硬件的中断请求，会<strong>打断正在执行的进程</strong>，然后调用内核中的中断处理程序来响应请求。</p><p>由于OS在收到中断后会打断其他进程的运行，因此中断处理程序必须要尽可能快的执行完，否则不仅会影响其他进程运行，还会导致后续到来的中断丢失（处理中断期间，CPU会关闭中断）。</p><h2 id="软中断"><a href="#软中断" class="headerlink" title="软中断"></a>软中断</h2><p>为了解决中断处理程序运行过长以及中断丢失的问题，Linux将中断分为两个阶段：</p><ul><li>上半部分：暂时关闭中断请求，主要负责处理跟硬件紧密相关或时间敏感的部分</li><li>下半部分：延迟处理上半部分未完成的工作</li></ul><p>不难看出，软中断的核心思想就是：让CPU尽快从中断状态中抽身出来，只负责完成没它不行的任务，其余部分交给内核线程去处理。</p><h1 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h1><p>我们使用计算机时经常会需要同时运行多个进程，那么就需要一种方式确保各个进程之间使用的地址不冲突。OS的解决方案就是使用虚拟地址，每个进程都只能使用自己的虚拟地址，不允许直接操作物理地址。至于物理地址和虚拟地址之间的映射，交给操作系统来解决。</p><h2 id="内存分段"><a href="#内存分段" class="headerlink" title="内存分段"></a>内存分段</h2><p>内存分段是OS管理虚拟地址与物理地址映射关系的一种方法。分段机制中的虚拟地址由两部分组成：段选择因子和段内偏移量</p><ol><li><p>段选择因子：存储在段寄存器里，其中存储着段号作为段表的索引。段表里存储段的基地址和段的界限以及特权等级等。</p></li><li><p>段内偏移量：位于0和段界限之间</p></li></ol><p><img src="https://img-blog.csdnimg.cn/a9ed979e2ed8414f9828767592aadc21.png"></p><p>分段的方式简明直接，想要计算某个数据的物理地址只需要获取对应段的基地址再加上偏移量即可。</p><p>但是分段也有很明显的缺点：</p><ol><li><p>内存碎片：计算机往往都是按程序启动的时间点来按顺序分配内存，如果某个分配到中间部分内存的程序关闭（假设它占用128MB），那么即使最后总的空闲内存有256MB，也无法启动一个200MB的程序。</p></li><li><p>内存交换效率低：解决外部内存碎片的一种方式就是使用内存交换，当计算机发现出现内存碎片时，会将内存地址在此之后的程序先写入硬盘，也就是Swap空间。然后再读回内存，这样就可以清理掉内存碎片。但是由于内存分段会导致大量的内存碎片出现，因此会导致频繁的内存交换，而磁盘读写性能又有限，因此会大幅降低效率。</p></li></ol><h2 id="内存分页"><a href="#内存分页" class="headerlink" title="内存分页"></a>内存分页</h2><p>内存分页可以有效解决分段的缺陷。他将整个虚拟和物理内存切成一段段固定尺寸的大小，每一段称为一页，在Linux中的大小是4KB。</p><p>而虚拟地址和物理地址之间使用页表进行映射，内存管理单元就负责将虚拟内存地址转换为物理地址。</p><p><img src="https://img-blog.csdnimg.cn/08a8e315fedc4a858060db5cb4a654af.png"></p><p>由于内存空间都是预先划分好的，也就不会像内存分段那样在段与段之间产生间隙非常小的内存。不过也正因为内存分页机制最小单位是一页，面对一些比较小的程序段会导致内存浪费，也就是内部内存碎片。</p><p>如果内存空间不够，OS会将正在运行的进程中<strong>最近没被使用</strong>的内存页给替换掉。也就是将他们暂时写在磁盘上。</p><p>如果进程访问的虚拟地址在页表中查询不到，就会产生一个缺页异常，此时就需要进入系统内核空间分配物理内存、更新进程页表，再返回用户空间。</p><blockquote><p>映射方式</p></blockquote><p>分页机制下，虚拟内存分为两部分：页号和页内偏移。页号是页表的索引。页表包含物理页每页所在物理内存的基地址。</p><p><img src="https://img-blog.csdnimg.cn/7884f4d8db4949f7a5bb4bbd0f452609.png"></p><p>因此最简单的内存地址转换步骤为：</p><ol><li><p>将虚拟内存地址切分为页号和偏移量</p></li><li><p>根据页号从页表里面查询对应的物理页号</p></li><li><p>用物理页号基地址加上偏移量</p></li></ol><p>但这种内存地址转换方式有一个非常明显的问题：在32位环境下，虚拟地址空间有4GB，利用上面的转换方式，我们启动一个进程必须准备100W个页表，再加上系统中可以运行大量的进程，这就导致页表的空间开销会非常大。</p><blockquote><p>多级页表</p></blockquote><p>为了解决上述缺陷，系统将单级页表再次进行分页，一级页表拥有1024个页表项，二级页表中包含1024个页表项形成二级分页。</p><p>这样做表面上看还增大了空间开销，但实际上所有的程序都有局部性原理，对于那些不常用的页，随时都可以被操作系统置换出去腾出空间给其他进程。</p><p>并且一级页表就可以实现对4GB虚拟地址的覆盖，如果某个一级页表项没有被用到，那么它的二级页表就可以暂时不创建，这更进一步节省了空间。</p><p>单级页表无法节省空间的原因就在于，它必须创建100w个页表项才能实现对虚拟地址的覆盖，如果无法覆盖虚拟地址，程序的运行根本无法运行，因此单级页表的实现无法节省空间。</p><p><img src="https://img-blog.csdnimg.cn/19296e249b2240c29f9c52be70f611d5.png"></p><p>如果我们进一步将二级页表推广到多级页表，那就可以节省更多的空间。不过这种方式也是有代价的，系统在进行地址映射的时候多了几道转换工序，因此这是种时间换空间的思想。</p><blockquote><p>TLB</p></blockquote><p>为了解决多级页表在转换上带来的时间问题，计算机会将最长访问的页表项放入专门的缓存，也就是TLB。</p><p><img src="https://img-blog.csdnimg.cn/a3cdf27646b24614a64cfc5d7ccffa35.png"></p><blockquote><p>段页式内存管理</p></blockquote><p>段页式内存管理方式：</p><ul><li><p>将程序划分为多个段（分段）</p></li><li><p>然后再将这些段划分为多个页，也就是对分段出来的连续空间再划分固定大小的页</p></li></ul><p><img src="https://img-blog.csdnimg.cn/8904fb89ae0c49c4b0f2f7b5a0a7b099.png"></p><p>可用软、硬件相结合的方法实现段页式地址变换，这样虽然增加了硬件成本和系统开销，但提高了内存的利用率</p><h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>程序是可以被系统执行的二进制文件，而进程就是正在运行的程序</p><p>进程的状态有：</p><ol><li><p>新建</p></li><li><p>就绪：可运行</p></li><li><p>运行：正占据CPU时间片</p></li><li><p>阻塞：进程正在等待某一事件发送而暂时停止运行</p></li><li><p>结束</p></li><li><p>挂起：被从内存中调换到磁盘上，避免大量阻塞线程占用物理内存空间</p></li></ol><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/10-%E8%BF%9B%E7%A8%8B%E4%B8%83%E4%B8%AD%E7%8A%B6%E6%80%81.jpg" alt="七种状态变迁"></p><h3 id="PCB"><a href="#PCB" class="headerlink" title="PCB"></a>PCB</h3><p>PCB是进程唯一标识，里面记录了：</p><p>进程标识符，用户标识符</p><p>进程当前状态，进程优先级</p><p>资源分配清单</p><p>CPU信息，也就是进程运行时的上下文</p><p>PCB通常使用链表组织起来，一般同一种状态的进程被串在同一个链表里。选择链表的原因是，操作系统随时面临着进程的增加与删除，链表相比数组在增删方面更有优势。</p><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><ol><li><p>管道</p></li><li><p>消息队列</p></li></ol><p>  管道的通信方式效率比较低下，通信双方必须是同步的。消息队列很好的解决了这个问题，它是保存在内核中的消息链表，如果进程A需要与进程B通信，它只需要向消息队列中投放要发送的信息，不需要等待B的响应，然后B从消息队列中读取，并自行处理即可。</p><p>  但消息队列也有缺点，首先因为使用了内核内存，因此消息大小不宜过大。其次，由于接收者必须主动到消息队列中收取消息，存在通信不及时的情况。</p><p>  还有一点是，当进程要发送消息时，涉及将数据从用户空间到内核空间的拷贝，这里有一次状态转换。接收消息同理</p><ol start="3"><li>共享内存</li></ol><p>  取出一块虚拟地址空间，映射到相同的内存地址中去。这就免去了拷贝，且更新几乎是实时的。不过缺点在于，共享内存会引入资源竞争。</p><p>  为了解决资源竞争的问题，操作系统引入了信号量，它是用于进程间同步或互斥的手段。（具体情况去看操作系统）</p><ol start="4"><li>信号</li></ol><p>  进程间的异步通信机制，发送者可以在任意时刻发送信号给指定进程。在收到信号后可以采取以下措施：</p><p>  <strong>1.执行默认操作</strong>。Linux 对每种信号都规定了默认操作，例如，上面列表中的 SIGTERM 信号，就是终止进程的意思。</p><p>  <strong>2.捕捉信号</strong>。我们可以为信号定义一个信号处理函数。当信号发生时，我们就执行相应的信号处理函数。</p><p>  <strong>3.忽略信号</strong>。当我们不希望处理某些信号的时候，就可以忽略该信号，不做任何处理。有两个信号是应用进程无法捕捉和忽略的，即&nbsp;<code>SIGKILL</code>&nbsp;和&nbsp;<code>SEGSTOP</code>，它们用于在任何时候中断或结束某一进程。</p><ol start="5"><li>Socket</li></ol><h2 id="线程-1"><a href="#线程-1" class="headerlink" title="线程"></a>线程</h2><p>线程是进程中的一条执行流程</p><p>和进程相比，线程之间共享相同的地址空间，可以方便的相互通信。并且由于他们大部分资源都是共享的，在上下文切换时需要保存的资源就非常少，减少了系统的开销。</p><p>线程与进程之间最大的区别在于，线程是CPU的调度单位，进程是资源分配的单位</p><p>线程与进程的比较如下：</p><ul><li>进程是资源（ 包括内存、打开的文件等）分配的单位，线程是 CPU 调度的单位；</li><li>进程拥有一个完整的资源平台，而线程只独享必不可少的资源，如寄存器和栈；</li><li>线程同样具有就绪、阻塞、执行三种基本状态，同样具有状态之间的转换关系；</li><li>线程能减少并发执行的时间和空间开销；</li></ul><p>对于，线程相比进程能减少开销，体现在：</p><ul><li>线程的创建时间比进程快，因为进程在创建的过程中，还需要资源管理信息，比如内存管理信息、文件管理信息，而线程在创建的过程中，不会涉及这些资源管理信息，而是共享它们；</li><li>线程的终止时间比进程快，因为线程释放的资源相比进程少很多；</li><li>同一个进程内的线程切换比进程切换快，因为线程具有相同的地址空间（虚拟内存共享），这意味着同一个进程的线程都具有同一个页表，那么在切换的时候不需要切换页表。而对于进程之间的切换，切换的时候要把页表给切换掉，而页表的切换过程开销是比较大的；</li><li>由于同一进程的各线程间共享内存和文件资源，那么在线程之间数据传递的时候，就不需要经过内核了，这就使得线程之间的数据交互效率更高了；</li></ul><p>线程又分为用户线程以及内核线程，还有轻量级线程</p><h3 id="用户线程"><a href="#用户线程" class="headerlink" title="用户线程"></a>用户线程</h3><p>用户线程的线程管理与调度，不是由操作系统来执行，而是由特定的线程库来完成这些操作。</p><p>这样做的好处在于，它和操作系统完全解耦，甚至可以在不支持线程计数的操作系统上运行。同时也减少了内核态与用户态的切换，效率很高。</p><p>不过缺点在于，操作系统对用户线程是无感知的，如果一个线程因为系统调用而阻塞，进程中的其他用户线程都不能执行，并且由于用户线程没有权限打断其他运行中的线程，一旦一个线程开始运行，除非它主动让出CPU，否则进程中的其他用户线程都无法运行。</p><p>此外，因为时间片是分配给进程的，因此如果某个线程得到的时间片较少，执行效率就会很低。</p><h3 id="内核线程"><a href="#内核线程" class="headerlink" title="内核线程"></a>内核线程</h3><p>内核线程都由操作系统直接管理，线程对应的TCB都存储在操作系统里。</p><p>对于一个内核线程来说，如果进程内其他线程被阻塞，并不会影响自身运行，因为CPU分配时间片的单位是线程。并且多线程的进程可以获取更多的时间片。</p><p>不过内核线程的缺陷在于，它的所有管理与调度完全由内核完成，效率不如用户线程高，并且只能在支持线程的操作系统中运行。</p><h2 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h2><h3 id="调度原则"><a href="#调度原则" class="headerlink" title="调度原则"></a>调度原则</h3><ol><li><p>在发生IO这类导致CPU空闲的事件时，调度程序需要从内存中取出一个就绪的线程来执行，避免资源浪费。</p></li><li><p>权衡长任务与短任务运行的运行完成数量</p></li><li><p>避免进程饥饿，尽可能减少进程的周转时间（等待时间+运行时间）</p></li><li><p>已经处于就绪队列中的进程，等待时间应该越短越好</p></li><li><p>对于交互式较强的应用，要考虑响应时间</p></li></ol><h3 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h3><ol><li><p>先来先服务</p></li><li><p>最短作业优先</p></li><li><p>高响应比优先</p></li></ol><p>  $$<br>  权重 = (等待时间+运行时间) \div 运行时间<br>  $$</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;高响应比优先算法在确保短作业优先执行的前提下，保证了长作业的运行，确保长作业不会饥饿。</p><ol start="4"><li>时间片轮换算法</li></ol><p>  将CPU运行时间划分为一个一个时间片分配给进程，每个进程只有在分配到时间片时才能运行。如果时间片用完还没有执行完，也强制阻塞这个进程，将CPU资源释放出来。</p><ol start="5"><li>最高优先级调度算法</li></ol><p>  这种算法挑选就绪队列中优先级最高的进程执行，优先级分为以下两种：</p><ul><li><p>静态优先级：在运行之前就决定好的优先级</p></li><li><p>动态优先级：运行期间动态改变的优先级，一个进程运行时间越长，优先级越低，等待时间越长，优先级越高</p></li></ul><ol start="6"><li>多级反馈队列算法</li></ol><p>  这种算法建立了多个优先级队列，队列优先级从高到低，分配的时间片随着优先级降低而增多。如果在低优先级队列的任务执行过程中，有新的任务到来，就立即将当前进程停止，并移动到原队列末尾，转去执行新来的任务。</p><p>  这种算法可以确保短任务可以很快被执行完，长任务虽然会随着执行次数增多，优先级降低，但每次分配到的时间片变多了。</p><p>  <img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B/28-%E5%A4%9A%E7%BA%A7%E9%98%9F%E5%88%97.jpg" alt="多级反馈队列"></p><h1 id="IO多路复用"><a href="#IO多路复用" class="headerlink" title="IO多路复用"></a>IO多路复用</h1><p>由于为每个连接都分配一个进程或线程是一种很低效的做法，因此人们开始寻找是否有一种方法可以让一个进程维护多条连接。</p><p>IO多路复用就是这样的一个技术，虽然一个进程在同一时刻只能处理一个请求，但如果每个请求的处理时间可以压缩到1ms，那么在外界看来，就好像一个进程在1s内处理了1000条连接。这就是所谓的时分多路复用。</p><h2 id="select-x2F-poll"><a href="#select-x2F-poll" class="headerlink" title="select/poll"></a>select/poll</h2><p>select实现多路复用的方式是，将所有已连接的Socket放到一个文件描述符集合，然后调用select函数将文件描述符集合拷贝到内核里，由内核来检查是否有读/写事件的发生。如果有发生，就将它添加到可读可写集合中，最后拷贝到用户态里面。</p><p>这里总共发生了两次遍历文件描述符集合，并且进行了两次拷贝。</p><p>poll的基本实现思路和select一样，区别在于它使用链表和动态数组而非bitMaps作为文件描述符集合，突破了select文件描述符个数的限制，不过依旧会受系统描述符个数的限制。</p><h2 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h2><p>epoll的流程：</p><p>首先调用epoll_create建立一个epoll对象，接着将待检测的socket加入到epoll对象中，然后使用epoll_wait等待事件发生</p><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost4@main/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/epoll.png"></p><p>epoll相比于select和poll进行了如下改进：</p><ol><li><p>在内核中维护一个红黑树，存储待检测的socket，因此用户只需要传入一个待检测socket到内核即可，而不需要传入整个待检测socket集合。</p></li><li><p>epoll使用事件驱动，在内核里维护一个链表来存储就绪事件，当某个socket有事件发生时，就通过回调函数将事件加入到链表当中。当用户调用<code>epoll_wait</code>时只会返回就绪事件的个数，而不需要直接遍历整个socket集合。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 八股 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis入门</title>
      <link href="/2023/01/25/redis/"/>
      <url>/2023/01/25/redis/</url>
      
        <content type="html"><![CDATA[<p>实用主义的redis学习日志，使用的资料为《Redis实战》</p><span id="more"></span><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Redis是一个速度非常快的非关系型数据库，可以存储键与5种不同类型的值，可以将存储在内存的键值持久化到硬盘，可以使用复制特性来扩展读性能，还可以使用客户端分片来扩展写性能。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>redis有五种数据结构：String, List, Set, Hash, ZSet(有序集合)</p><table><thead><tr><th>结构类型</th><th>结构存储的值</th><th>结构的读写能力</th></tr></thead><tbody><tr><td>string</td><td>字符串，整数或浮点数</td><td>对整个字符串或字符串的一部分执行操作，可以对数字类型执行增减操作</td></tr><tr><td>list</td><td>一个链表，每个结点都包含一个字符串</td><td>从链表的两端推入或弹出元素，根据偏移量对链表进行修剪；读取单个或多个元素，根据值查找或移除元素</td></tr><tr><td>set</td><td>包含字符串的无序收集器</td><td>添加，获取，移除单个元素；检查一个元素是否存在；计算并交叉</td></tr><tr><td>hash</td><td>包含键值对的无序列表</td><td>添加，获取单个键值对，获取所有键值对</td></tr><tr><td>zset</td><td>字符串成员与浮点数分值(score)之间的有序映射，元素的排列由分值决定</td><td>添加，获取，删除单个元素；根据分值范围获取元素。</td></tr></tbody></table><p>在Redis中存储的基本思路：键名称为 xx:id, 冒号前表明这组数据属于的实体类，冒号之后用于分割实体类对应的不同对象(如果需要的话)。值使用的数据结构则要根据实际情况判断，例如hash适用于存储对象中字段和对应的值；set适用于需要去重/并交叉运算的情况；zset可以用于需要排序的情况。<br>一些例子.<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/redis/20220814203913.png"><br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/redis/20220814203946.png"><br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/redis/20220814204014.png"></p><h2 id="Redis在Web中的应用"><a href="#Redis在Web中的应用" class="headerlink" title="Redis在Web中的应用"></a>Redis在Web中的应用</h2><h3 id="管理用户登录会话"><a href="#管理用户登录会话" class="headerlink" title="管理用户登录会话"></a>管理用户登录会话</h3><p>每一个web服务都会使用cookie来记录访客的身份，并要求浏览器存储这些数据，在下一次登录时携带这些数据。</p><table><thead><tr><th>cookie类型</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>签名cookie</td><td>验证cookie需要的一切信息都存储在cookie里，cookie也可以包含额外的信息，并且对这些信息签名也很容易</td><td>正确处理签名很困难，容易造成安全漏洞</td></tr><tr><td>令牌cookie</td><td>添加信息非常容易。cookie体积非常小，可以有效提升访问速度</td><td>需要在服务器中存储更多数据，用关系型数据库存储会带来较大的开销。</td></tr></tbody></table><p>下面假设一个场景：假如我们希望记录用户最近浏览的内容，由于这类数据一般都有微量，不定期的特质，如果使用关系型数据库会导致大量细碎的IO，严重拖慢运行速率。但是使用redis的话就可以有效解决在效率上的问题，但是内存的大小也同样不是无限的，因此我们需要定期对数据进行修剪。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">update_token</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> token<span class="token punctuation">,</span> user<span class="token punctuation">,</span> item<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    timestamp <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>hset<span class="token punctuation">(</span><span class="token string">'login:'</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> user<span class="token punctuation">)</span> <span class="token comment"># 维护用户和令牌的映射关系</span>    conn<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">'recent:'</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> timestamp<span class="token punctuation">)</span> <span class="token comment"># 记录token最后一次使用时间</span>    <span class="token keyword">if</span> item<span class="token punctuation">:</span>        conn<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">'viewed:'</span> <span class="token operator">+</span> token<span class="token punctuation">,</span> item<span class="token punctuation">,</span> timestamp<span class="token punctuation">)</span> <span class="token comment"># 添加最近浏览的商品</span>        conn<span class="token punctuation">.</span>zremrangebyrank<span class="token punctuation">(</span><span class="token string">'viewed:'</span> <span class="token operator">+</span> token<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">26</span><span class="token punctuation">)</span> <span class="token comment"># 移除旧的记录，只保留最近的25个</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只在服务端维持指定数量的token，每隔一段时间检查token数是否超标，如果超过阈值就将最老的token删除。<br>这里会存在一个竞争问题，如果要删除的token正在进行操作就会导致用户在操作中途被要求重新登陆。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">QUIT <span class="token operator">=</span> <span class="token boolean">False</span>LIMIT <span class="token operator">=</span> <span class="token number">1000000</span><span class="token keyword">def</span> <span class="token function">clean_session</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> QUIT<span class="token punctuation">:</span>        size <span class="token operator">=</span> conn<span class="token punctuation">.</span>zcard<span class="token punctuation">(</span><span class="token string">'recent:'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> size <span class="token operator">&lt;=</span> LIMIT<span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        end_index <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>size <span class="token operator">-</span> LIMIT<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>        tokens <span class="token operator">=</span> conn<span class="token punctuation">.</span>zrange<span class="token punctuation">(</span><span class="token string">'recent:'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> end_index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        session_keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> token <span class="token keyword">in</span> tokens<span class="token punctuation">:</span>            session_keys<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'viewed:'</span> <span class="token operator">+</span> token<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token operator">*</span>session_keys<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>hdel<span class="token punctuation">(</span><span class="token string">'login:'</span><span class="token punctuation">,</span> <span class="token operator">*</span>tokens<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span><span class="token string">'recent:'</span><span class="token punctuation">,</span> <span class="token operator">*</span>tokens<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="购物车功能"><a href="#购物车功能" class="headerlink" title="购物车功能"></a>购物车功能</h3><p>在过去，网站常常将购物车功能集成在cookie当中，这样做的缺点就是会导致cookie体积过大，拖慢请求速度；此外，网站对cookie的验证也会变得困难。<br>在上一节我们做到了将会话cookie以及用户最近浏览商品存储在redis中，接下来我们可以尝试将购物车也存储在redis中。<br>购物车的结构非常简单，使用散列存储商品id与数量的映射，利用cart与用户token形成命名空间。不过添加购物车之后在上面清理token的部分就需要添加对购物车的清理。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add_to_cart</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> session<span class="token punctuation">,</span> item<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>        conn<span class="token punctuation">.</span>hrem<span class="token punctuation">(</span><span class="token string">'cart:'</span> <span class="token operator">+</span> session<span class="token punctuation">,</span> item<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        conn<span class="token punctuation">.</span>hset<span class="token punctuation">(</span><span class="token string">'cart:'</span> <span class="token operator">+</span> session<span class="token punctuation">,</span> item<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过这一系列的优化，我们就可以通过较低的代价获取到用户最近浏览的商品，用户加入购物车的商品，用户下单的商品这些数据源，方便后续分析。</p><h3 id="网页缓存"><a href="#网页缓存" class="headerlink" title="网页缓存"></a>网页缓存</h3><p>接下来就是最常用的缓存网页响应操作。对于大多数动态生成，但数据变化次数极少的网页，我们可以使用redis将请求的响应缓存下来，在下一次接收到请求之后直接调取缓存中的响应，减少响应时间也减轻了服务器的负担。<br>tip：中间件：能够在处理请求之前或之后添加层的框架</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cache_request</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> request<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> can_cache<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> callback<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    page_key <span class="token operator">=</span> <span class="token string">'cache:'</span> <span class="token operator">+</span> hash_request<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    content <span class="token operator">=</span> conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span>page_key<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> content<span class="token punctuation">:</span>        content <span class="token operator">=</span> callback<span class="token punctuation">(</span>request<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>setex<span class="token punctuation">(</span>page_key<span class="token punctuation">,</span> content<span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> content<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据行缓存"><a href="#数据行缓存" class="headerlink" title="数据行缓存"></a>数据行缓存</h3><p>考虑到有一部分页面只需要表中的一部分数据行，这些页面势必无法整个缓存下来，但如果每次请求页面都去查询的话又会给数据库带来极大的压力。因此这里我们就要考虑缓存部分需要的数据行来提升效率。<br>如果上面的描述过于抽象的话就想一想淘宝的特价促销页面吧。<br>这方面优化的具体做法是：编写一个守护进程函数，让他定期将数据行更新到缓存中。这里数据行在redis中的数据结构为字符串，键为类型+商品id，值为JSON格式的商品属性。调度的处理方法为使用两个有序集合，一个负责记录何时进行调度，成员为数据行id，值为更新该数据的时间戳。另一个负责记录延时，成员为数据行id，值为更新数据的间隔。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">schedule_row_cache</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> row_id<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">:</span>    conn<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">'delay:'</span><span class="token punctuation">,</span> row_id<span class="token punctuation">,</span> delay<span class="token punctuation">)</span> <span class="token comment"># 添加延迟</span>    conn<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">'schedule:'</span><span class="token punctuation">,</span> row_id<span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 立即进行调度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cache_rows</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> QUIT<span class="token punctuation">:</span>        <span class="token comment"># 获取下一个调度的商品</span>        <span class="token builtin">next</span> <span class="token operator">=</span> conn<span class="token punctuation">.</span>zrange<span class="token punctuation">(</span><span class="token string">'schedule:'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> withscores<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        now <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 如果没有商品或还没轮到则休眠后继续</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">next</span> <span class="token keyword">or</span> <span class="token builtin">next</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> row<span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">.05</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        row_id <span class="token operator">=</span> <span class="token builtin">next</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        delay <span class="token operator">=</span> conn<span class="token punctuation">.</span>zscore<span class="token punctuation">(</span><span class="token string">'delay:'</span><span class="token punctuation">,</span> row_id<span class="token punctuation">)</span>        <span class="token keyword">if</span> delay <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>            conn<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span><span class="token string">'delay:'</span><span class="token punctuation">,</span> row_id<span class="token punctuation">)</span>            conn<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span><span class="token string">'schedule:'</span><span class="token punctuation">,</span> row_id<span class="token punctuation">)</span>            conn<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">'inv:'</span> <span class="token operator">+</span> row_id<span class="token punctuation">)</span>            <span class="token keyword">continue</span>        row <span class="token operator">=</span> Inventory<span class="token punctuation">.</span>get<span class="token punctuation">(</span>row_id<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">'schedule:'</span><span class="token punctuation">,</span> row_id<span class="token punctuation">,</span> now <span class="token operator">+</span> delay<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'inv:'</span> <span class="token operator">+</span> row_id<span class="token punctuation">,</span> json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>row<span class="token punctuation">.</span>to_dict<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tip：redis不支持数据结构的嵌套，因为这会导致命令语法复杂性直线上升。如果希望达成类似的效果可以在命名空间尝试分割例如user:123存储用户信息，user:123:posts存储用户发表的文章。</p><h3 id="网页分析"><a href="#网页分析" class="headerlink" title="网页分析"></a>网页分析</h3><p>上面我们通过缓存web页面来减少页面载入时间，但假如我们在内存大小有限的情况下，缓存所有的页面就不太现实了。这时候就需要有选择性的去缓存，比如缓存访问量前10000的商品。<br>这就需要我们再添加一个有序列表来记录各个商品的访问量，每当商品被访问后，它对应的分数就-1，这样访问量最多的商品就会排在列表的第一位。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">update_token</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> token<span class="token punctuation">,</span> user<span class="token punctuation">,</span> item<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    timestamp <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>hset<span class="token punctuation">(</span><span class="token string">'login:'</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> user<span class="token punctuation">)</span> <span class="token comment"># 维护用户和令牌的映射关系</span>    conn<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">'recent:'</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> timestamp<span class="token punctuation">)</span> <span class="token comment"># 记录token最后一次使用时间</span>    <span class="token keyword">if</span> item<span class="token punctuation">:</span>        conn<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">'viewed:'</span> <span class="token operator">+</span> token<span class="token punctuation">,</span> item<span class="token punctuation">,</span> timestamp<span class="token punctuation">)</span> <span class="token comment"># 添加最近浏览的商品</span>        conn<span class="token punctuation">.</span>zremrangebyrank<span class="token punctuation">(</span><span class="token string">'viewed:'</span> <span class="token operator">+</span> token<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">26</span><span class="token punctuation">)</span> <span class="token comment"># 移除旧的记录，只保留最近的25个</span>        conn<span class="token punctuation">.</span>zincrby<span class="token punctuation">(</span><span class="token string">'viewed:'</span><span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment"># 增加访问量 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时为了减少内存的使用，我们只记录指定数量的商品。这需要一个守护进程函数去定期进行修剪。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">rescale_viewed</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> QUIT<span class="token punctuation">:</span>        conn<span class="token punctuation">.</span>zremrangebyrank<span class="token punctuation">(</span><span class="token string">'viewed:'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">20001</span><span class="token punctuation">)</span> <span class="token comment"># 删除排名在2000后的商品</span>        conn<span class="token punctuation">.</span>zinterstore<span class="token punctuation">(</span><span class="token string">'viewed:'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'viewed:'</span><span class="token punctuation">:</span><span class="token number">.5</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就是修改can_cache，用新的逻辑来判断是否需要缓存</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">can_cache</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">:</span>    item_id <span class="token operator">=</span> extract_item_id<span class="token punctuation">(</span>request<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> item_id <span class="token keyword">or</span> is_dynamic<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    rank <span class="token operator">=</span> conn<span class="token punctuation">.</span>zrank<span class="token punctuation">(</span><span class="token string">'viewed:'</span><span class="token punctuation">,</span> item_id<span class="token punctuation">)</span>    <span class="token keyword">return</span> rank <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">and</span> rank <span class="token operator">&lt;</span> <span class="token number">10000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Redis命令"><a href="#Redis命令" class="headerlink" title="Redis命令"></a>Redis命令</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>redis字符串可以存储以下三种数据</p><ul><li>字节串</li><li>整数（长整型）</li><li>浮点数（double）</li></ul><p>当用户向redis中存储字符串时，如果它可以被解释成整数或是浮点数，redis会察觉到这一点并提供增减值的方法，如果对字节串进行增减操作则会收到一个错误反馈。如果对不存在与redis中的键执行增减方法，redis会先将键对应的值初始化为0，然后再执行指定的操作。</p><p>Redis中的自增和自减命令</p><table><thead><tr><th>命令</th><th>用例和描述</th></tr></thead><tbody><tr><td>INCR</td><td>INCR key-name 将键存储的值加1</td></tr><tr><td>DECR</td><td>DECR key-name 将键存储的值减1</td></tr><tr><td>INCRBY</td><td>INCRBY key-name amount 将键存储的值加amout</td></tr><tr><td>DECRBY</td><td>DECRBY key-name amount 将键存储的值减amout</td></tr><tr><td>INCRBYFLOAT</td><td>INCRBYFLOAT key-name amount 将键存储的值加浮点数amout</td></tr></tbody></table><p>Redis处理子串和二进制位的命令</p><table><thead><tr><th>命令</th><th>用例和描述</th></tr></thead><tbody><tr><td>APPEND</td><td>APPEND key-name value 将value追加到给定key当前存储的串的末尾</td></tr><tr><td>GETRANGE</td><td>GETRANGE key-name start end 获取由偏移量start到end范围内所有字符组成的子串</td></tr><tr><td>SETRANGE</td><td>SETRANGE key-name offset value 将从偏移量offset开始的字符串设置为给定值</td></tr><tr><td>GETBIT</td><td>GETBIT key-name offset 将字节串看作是二进制位，并返回串中偏移量为offset的二进制位的值</td></tr><tr><td>SETBIT</td><td>SETBIT key-name offset value 将字节串二进制位中偏移量为offset的位设为value</td></tr></tbody></table><p>其中处理子串的方法，对于超出原有长度的部分都会当作空串处理，例如setrange在处理超出原本字符串长度的偏移量时，其作用就相当于将新的值添加在字符串末尾。</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表是一个由多个字符串组成的有序序列结构，可以用于存储任务信息，最近浏览过的文章或常用联系人信息。</p><table><thead><tr><th>命令</th><th>用例和描述</th></tr></thead><tbody><tr><td>RPUSH</td><td>RPUSH key-name value [value …] 将若干个值推入列表的右侧</td></tr><tr><td>LPUSH</td><td>LPUSH key-name value [value …] 将若干个值推入列表的左侧</td></tr><tr><td>RPOP</td><td>RPOP key-name 移除并返回列表右侧的元素</td></tr><tr><td>LPOP</td><td>LPOP key-name 移除并返回列表左侧的元素</td></tr><tr><td>LINDEX</td><td>LINDEX key-name offset 返回本列表中偏移量为offset的元素</td></tr><tr><td>LRANGE</td><td>LRANGE key-name start end 返回列表中第start到第end个元素</td></tr><tr><td>LTRIM</td><td>LTRIM key-name start end 对列表进行修剪，只保留从start到end的元素</td></tr></tbody></table><p>其中LTRIM和LRANGE的组合使用可以做到功能上类似LPOP和RPOP，但能够一次返回多个元素。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> rpush list a b c d<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> ltrim list <span class="token number">1</span> <span class="token number">2</span>OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> lrange list <span class="token number">0</span> -1<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"b"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"c"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上的所有方法在列表中没有可以使用的元素时都会返回nil，但redis还提供了使用阻塞队列的列表方法，在列表中没有可用元素时不会立即返回而是阻塞一段时间等待可用元素。<br>阻塞式的列表弹出命令以及在列表间移动元素的命令</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>BLPOP</td><td>BLPOP key-name [key-name …] timeout  从遇到的首个非空队列中弹出最左边的元素，或者阻塞timeout秒并等待可以弹出的元素。</td></tr><tr><td>BRPOP</td><td>BRPOP key-name [key-name …] timeout  从遇到的首个非空队列中弹出最右边的元素，或者阻塞timeout秒并等待可以弹出的元素。</td></tr><tr><td>RPOPLPUSH</td><td>RPOPLPUSH source-key dest-key 从source-key最右边弹出一个元素，假如dest-key的最左端，并将这个元素返回给用户</td></tr><tr><td>BRPOPLPUSH</td><td>BRPOPLPUSH source-key dest-key timeout 和上面一个命令效果一样，区别在于如果source-key中没有元素，就阻塞timeout秒并等待可弹出的元素</td></tr></tbody></table><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>Redis的集合以无序的方式来存储多个各不相同的元素，可以快速执行添加元素操作，移除元素操作以及检查一个元素是否存在于集合里。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>SADD</td><td>SADD key-name item [item …] 将一个或多个元素添加到集合里，并返回被添加进去的元素数量</td></tr><tr><td>SREM</td><td>SREM key-name item [item …] 从集合中移除一个或多个元素，并返回被移除的元素的数量</td></tr><tr><td>SISMEMBER</td><td>SISMEMBER key-name item 检查元素item是否存在于集合key-name里</td></tr><tr><td>SCARD</td><td>SCARD key-name 返回集合包含的元素数量</td></tr><tr><td>SMEMBERS</td><td>SMEMBERS key-name 返回集合包含的元素数量</td></tr><tr><td>SRANDMEMBER</td><td>SRANDMEMBER key-name [count] 从集合里随机返回一个或多个元素。当count为正数时，返回的随机元素不会重复。当count为负数时，返回的元素可能会重复。</td></tr><tr><td>SPOP</td><td>随机移除集合中的一个元素，并返回被移除的元素</td></tr><tr><td>SMOV</td><td>SMOV source-key dest-key item 如果集合source-key包含元素item，那从中移除item并添加到dest-key中。如果item被成功移除就返回1否则返回0。</td></tr></tbody></table><p>以上就是redis集合的基本操作，接下来介绍集合间的组合与关联，这也是集合最有用的方法。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>SDIFF</td><td>SDIFF key-name [key-name …] 返回存在于第一个集合但不存在与其他集合中的元素</td></tr><tr><td>SDIFFSTORE</td><td>SDIFFSTORE dest-key key-name [key-name …] 将差集运算的结果存储到dest-key里</td></tr><tr><td>SINTER</td><td>SINTER key-name [key-name …] 返回交集运算的结果</td></tr><tr><td>SINTERSTORE</td><td>SINTERSTORE dest-key key-name [key-name …] 将交集运算的结果存储到dest-key中</td></tr><tr><td>SUNION</td><td>SUNION key-name [key-name …] 返回并集运算的结果</td></tr><tr><td>SUNIONSTORE</td><td>SUNIONSTORE dest-key key-name [key-name …] 将并集运算的结果存储到dest-key中</td></tr></tbody></table><h3 id="散列"><a href="#散列" class="headerlink" title="散列"></a>散列</h3><p>Redis的散列可以将多个键值对存储在一个Redis键里面。因此散列非常适合将一些相关的数据存储在一起。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>HMGET</td><td>HMGET key-name key [key …] 从散列里面获取一个或多个键的值</td></tr><tr><td>HMSET</td><td>HMSET key-name key value [key value …] 为散列里面的一个或多个键设置值</td></tr><tr><td>HDEL</td><td>HDEL key-name key [key …] 删除散列里面的一个或多个键值对，返回成功找到并删除的键值对数量</td></tr><tr><td>HLEN</td><td>HLEN key-name 返回散列包含的键值对数量</td></tr></tbody></table><p>像是这一类批量处理的命令，既可以给用户带来便利，同时也可以通过减少命令的调用次数以及客户端与redis之间通信往返的次数来提升redis性能。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>HEXISTS</td><td>HEXISTS key-name key 检查给定键是否存在于散列中</td></tr><tr><td>HKEYS</td><td>HKEYS key-name 获取散列包含的所有键</td></tr><tr><td>HVALS</td><td>HVALS key-name 获取散列包含的所有值</td></tr><tr><td>HGETALL</td><td>HGETALL key-name 获取散列包含的所有键值对</td></tr><tr><td>HINCRBY</td><td>HINCRBY key-name key increment 将键key存储的值加上increment</td></tr><tr><td>HINCRBYFLOAT</td><td>HINCRBYFLOAT key-name key increment 将键key存储的值加上浮点数increment</td></tr></tbody></table><p>虽然HGETALL可以获取所有的键值对，但并不代表HKEYS和HVALS就没有用处。如果散列的值非常大，那么可以先使用HKEYS获取散列包含的所有键，然后再一个一个取出值，避免因一次获取多个大体积的值而导致服务器阻塞。</p><h3 id="有序集合"><a href="#有序集合" class="headerlink" title="有序集合"></a>有序集合</h3><p>有序集合存储成员与分值之间的键值对映射，并且提供分值处理，以及根据分值大小有序的获取或扫描成员和分值。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>ZADD</td><td>ZADD key-name score member [score member …] 添加若干个成员，分数键值对到集合中去。</td></tr><tr><td>ZREM</td><td>ZREM key-name member [member …] 移除给定的成员，并返回移除的数量。</td></tr><tr><td>ZCARD</td><td>ZCARD key-name 返回有序集合包含的成员数量</td></tr><tr><td>ZINCRBY</td><td>ZINCRYBY key-name increment member 将指定成员的分数加上increment</td></tr><tr><td>ZCOUNT</td><td>ZCOUNT key-name min max 返回分数介于min和max之间的成员数量</td></tr><tr><td>ZRANK</td><td>ZRANK key-name member 返回指定成员的排名</td></tr><tr><td>ZSCORE</td><td>ZSCORE key-name member 返回指定成员的分数</td></tr><tr><td>ZRANGE</td><td>ZRANGE key-name start stop [WITHSCORES] 返回有序集合中排名介于start和stop之间的成员。如果给定了WITHSCORES，则会连分值一并返回</td></tr></tbody></table><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>ZREVRANK</td><td>ZREVRANK key-name member 返回有序集合里成员member的排名。这里按分值从大到小排</td></tr><tr><td>ZREVRANGE</td><td>ZREVRANGE key-name start stop [WITHSCORES]  返回有序集合给定排名范围内的成员，同样是从大到小排</td></tr><tr><td>ZRANGEBYSCORE</td><td>ZRANGEBYSCORE min max [WITHSCORES] [LIMIT offset count] 返回有序集合中，分值介于min和max的成员</td></tr><tr><td>ZREVRANGEBYSCORE</td><td>功能同上，但顺序相反</td></tr><tr><td>ZREMRANGEBYRANK</td><td>ZREMRANGEBYRANK key-name start stop 移除有序集合中排名介于start和stop之间的成员</td></tr><tr><td>ZREMRANGEBYSCORE</td><td>ZREMRANGEBYSCORE key-name min max 移除有序集合中分值介于min和max之间的所有成员</td></tr><tr><td>ZINTERSTORE</td><td>ZINTERSTORE dest-key key-count key [key …] [WEIGHTS weight …] [AGGREGATE SUM|MIN|MAX] 对给定有序集合执行交集运算</td></tr><tr><td>ZUNION</td><td>ZUNION dest-key key-count key [key …] [WEIGHTS weight …] [AGGREGATE SUM|MIN|MAX] 对给定有序集合执行并集运算</td></tr></tbody></table><p>这里稍微解释一下redis中的集合运算，当若干个有序集合进行集合运算后，其成员部分的结果和我们熟知的数学意义上的集合运算结果一致。而分数部分则由用户传入的WEIGHT和AGGREGATE决定，WEIGHT可以决定各个集合中分数的权重，默认为1。AGGREGATE则决定集合之间找到匹配项后对分数的处理行为，是直接相加还是取最大或最小值。</p><h3 id="发布与订阅"><a href="#发布与订阅" class="headerlink" title="发布与订阅"></a>发布与订阅</h3><p>订阅者可以订阅指定的频道，发布者可以向指定的频道传输信息，这些信息一旦被传输到给定频道，所有订阅该频道的订阅者都会收到信息。<br>Redis也提供了一系列用于发布与订阅的命令</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>SUBSCRIBE</td><td>SUBSCRIBE channel [channel …]  订阅给定的一个或多个频道</td></tr><tr><td>UNSUBSCRIBE</td><td>UNSUBSCRIBE channel [channel …] 退订给定的一个或多个频道，如果没有指定，就退订所有频道</td></tr><tr><td>PUBLISH</td><td>PUBLISH channel msg 向给定频道发送信息</td></tr><tr><td>PSUBSCRIBE</td><td>PSUBSCRIBE pattern [pattern …] 订阅与给定模式相匹配的所有频道</td></tr><tr><td>PUNSUBSCRIBE</td><td>PUNSUBSCRIBE pattern [pattern …] 退订与给定模式相匹配的所有频道</td></tr><tr><td>虽然redis的订阅发布模式很有用，但其也有一定的局限性：</td><td></td></tr></tbody></table><ol><li>如果一个客户端订阅了某个频道，但其自身的读取速度不够快，这时就会导致大量的消息积压在redis的输出缓冲区，这可能会降低redis的效率，甚至对OS造成伤害。不过在新版的redis中，它会自动断开不符合输出缓冲区大小限制的订阅客户端。</li><li>任何网络系统在执行操作时都可能会碰上断线，如果客户端在执行订阅发布的过程中断线，那就会丢失掉断线期间的所有数据。</li></ol><h3 id="排序命令"><a href="#排序命令" class="headerlink" title="排序命令"></a>排序命令</h3><p>redis中的sort命令可以同时处理字符串，集合，列表和散列。sort命令可以根据字符串，列表，集合，有序集合，散列这5种键里面存储的数据，对列表，集合，以及有序集合进行排序。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>SORT</td><td>SORT source-key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern …]] [ASC|DESC] [ALPHA] [STORE dest-key]——根据给定的选项，对输入列表、集合或者有序集合进行排序，然后返回或者存储排序的结果</td></tr><tr><td>这里就大致讲一下BY和GET参数的意义</td><td></td></tr><tr><td>有时我们希望能够自定义排序规则，例如列表中的数字都有不同的权重，而这些权重值存储在weight_*当中，其中的*代表列表中的数字元素，sort命令会根据列表中的元素去散列weight_之中寻找匹配的权重，并进行排序。</td><td></td></tr><tr><td>每次排序完成后都会返回顺序列表，但有时我们希望获取的是外部数据，例如对应的权重，这时就可以使用到GET，匹配方式和BY相同。</td><td></td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> rpush sort-input <span class="token number">23</span> <span class="token number">15</span> <span class="token number">110</span> <span class="token number">7</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> hset d-7 field <span class="token number">5</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> hset d-23 field <span class="token number">30</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> hset d-110 field <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> hset d-15 field <span class="token number">5</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token comment"># 根据d-*中field的值对sort-input进行排序</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token function">sort</span> sort-input by d-*-<span class="token operator">&gt;</span>field<span class="token comment"># 排序后返回权重值</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token function">sort</span> sort-input by d-*-<span class="token operator">&gt;</span>field get d-*-<span class="token operator">&gt;</span>field<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="基本事务"><a href="#基本事务" class="headerlink" title="基本事务"></a>基本事务</h3><p>redis的基本事务要使用到MULTI和EXEC命令，MULTI命令代表事务的开始，EXEC代表事务的结束。一旦事务开启，Redis就只会处理该客户端的命令，被上述两条命令包裹的命令会一个接一个执行直到所有命令都完成。<br>在Redis接到MULTI命令之后，就会将该客户端后续发送的所有命令都放入一个队列里面，并在不被打断的情况下完成里面的所有命令。这种做法不仅可以有效解决并行状态下的问题，还可以减少与redis的通信往返次数，以此提升效率。<br>这里要特别注意的是，和数据库事务不同，在redis中事务的所有操作都不会被立刻执行，而是缓存在一个队列里，只有在执行过程中，他才是无法打断的。这种事务更接近于一种消息队列。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> multiOK<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> hset <span class="token builtin class-name">test</span> o ggQUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> hset <span class="token builtin class-name">test</span> niubi <span class="token number">1</span>QUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> hget <span class="token builtin class-name">test</span> niubiQUEUED<span class="token number">127.0</span>.0.1:6379<span class="token punctuation">(</span>TX<span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token builtin class-name">exec</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"1"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在第二章中提到，用户操作与token删除之间有一个竞争关系，我们可以让二者以事务的方式执行，这样就可以有效避免竞争。</p><h3 id="键的过期时间"><a href="#键的过期时间" class="headerlink" title="键的过期时间"></a>键的过期时间</h3><p>对于那些在某个时间点之后就不再有用的数据，我们可以通过设置过期时间来让一个键在给定时间之后自动删除。<br>不过这种做法也有限制，对于那些无法原子地为键设置过期时间的情况，这种方法就有点鸡肋了。因此，设置过期时间往往只适用于字符串类型，或是在指定时间后可以直接完全删除，而非删除数据结构中指定部分的情况。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>PERSIST</td><td>PERSIST key-name 移除键的过期时间</td></tr><tr><td>TTL</td><td>TTL key-name 查看给定键距离过期还有多少时间</td></tr><tr><td>EXPIRE</td><td>EXPIRE key-name seconds 让给定键在指定的秒数过后过期</td></tr><tr><td>EXPIREAT</td><td>EXPIREAT key-name timestamp 将给定键的过期时间设置为给定的UNIX时间戳</td></tr><tr><td>PTTL</td><td>PTTL key-name 查看给定键距离过期还有多少毫秒</td></tr><tr><td>PEXPIRE</td><td>PEXPIRE key-name milliseconds 让给定键在指定的毫秒之后过期</td></tr><tr><td>PEXPIREAT</td><td>PEXPIREAT key-name timestamp-milliseconds 让一个毫秒级精度的UNIX时间戳设置为给定键的过期时间</td></tr></tbody></table><h2 id="Redis线程模型"><a href="#Redis线程模型" class="headerlink" title="Redis线程模型"></a>Redis线程模型</h2><p>我们常说Redis是单线程的，这里指的是Redis在处理命令时只使用主线程，但这并不代表Redis只有一个线程，他在启动的时候会启动后台线程，这些后台线程分别负责：</p><ol><li><p>AOF刷盘</p></li><li><p>关闭文件</p></li><li><p>释放内存</p></li></ol><p>之所以将这些任务交给后台线程，是因为这些都是十分耗时的任务，放在主线程中会大幅降低效率。</p><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/redis/%E5%85%AB%E8%82%A1%E6%96%87/redis%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B.drawio.png"></p><p> 上图是Redis线程模型的具体执行流程：</p><p>Redis首先会检查写发送队列里是否有待发送的数据，如果有就调用write函数发送数据，如果没有发送完，就注册写事件来处理函数。</p><p>接着就会调用epoll_wait等待事件到来：</p><ol><li><p>如果连接事件到来，调用accept获取已连接socket，然后把它注册到epoll中，最后注册读事件</p></li><li><p>如果是读事件，使用read接收数据，接着解析指令，执行指令。然后把<em>客户端发送对象</em>添加到发送队列，把执行结果写入缓冲区等待发送</p></li><li><p>如果是写事件，调用write发送数据，如果没有发完，就注册写事件，等待有数据可发后再发。</p></li></ol><h2 id="数据安全与性能保障"><a href="#数据安全与性能保障" class="headerlink" title="数据安全与性能保障"></a>数据安全与性能保障</h2><h3 id="持久化选项"><a href="#持久化选项" class="headerlink" title="持久化选项"></a>持久化选项</h3><p>快照：将存在与某一时刻的所有数据都写入硬盘<br>只追加文件(AOF)：在执行写命令时，将该命令复制到磁盘里。<br>一般来说，将数据持久化到磁盘的目的主要是为了之后重用数据，或为了防止系统故障而将数据备份到一个远程位置。此外，redis中也可能存储着复杂任务的执行结果，若能存储起来就可以避免后续的计算。</p><pre class="line-numbers language-ad-info" data-language="ad-info"><code class="language-ad-info">快照持久化选项save 60 1000   60秒内若有1000次更改就执行存储以此快照stop-writes-on-bgsave-error nordbcompression yesdbfilename dump.rdb  快照文件AOF 持久化选项appendonly noappendfsync everysecno-appendfsync-on-rewrite noauto-aof-rewrite-percentage 100auto-aof-rewrite-min-size 64mbdir ./   决定快照文件和AOF文件的保存路径<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><h4 id="创建快照"><a href="#创建快照" class="headerlink" title="创建快照"></a>创建快照</h4><ol><li>客户端可以向服务器发送一个<code>bgsave</code>命令来创建快照。服务器接收到之后会fork一个子进程将快照内容写入磁盘，父进程继续处理请求。</li><li>客户端还可以发送<code>save</code>命令来创建快照。接到save命令的服务器会停止处理一切客户端请求，开始创建快照。一般只用在内存不足的情况。</li><li>当满足了上面设置的save要求后，也会自动触发<code>bgsave</code>创建快照。</li><li>当redis接收到<code>shutdown</code>命令或接收到标准<code>trem</code>信号时，会执行<code>save</code>命令，并在完成后关闭服务器。</li><li>当一个Redis服务器连接另一个Redis服务器，并向对方发送<code>SYNC</code>命令来开始一次复制操作的时候，如果主服务器目前没有在执行<code>BGSAVE</code>操作，或者主服务器并非刚刚执行完<code>BGSAVE</code>操作，那么主服务器就会执行<code>BGSAVE</code>命令。</li></ol><p>在使用快照之前，首先必须意识到，如果系统真的崩溃，用户将丢失最近一次生成快照之后更改的所有数据。因此快照只适合于即使丢失一部分数据也不会造成问题的应用。</p><h4 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h4><p>当Redis服务器执行RDB快照时，会fork出一个子进程执行相关操作，具体流程同AOF。不过需要注意的时，RDB期间服务器通过写时复制修改的内容不会在本次RDB中被写入RDB文件，只能等待下一次<code>bgsave</code>或<code>save</code>执行。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><h5 id="个人开发"><a href="#个人开发" class="headerlink" title="个人开发"></a>个人开发</h5><p>在个人开发服务器上，我们主要考虑的是尽可能降低快照持久化带来的资源消耗。如果打算在服务器中使用快照持久化，并存储大量的数据，那尽量让开发服务器的硬件配置接近生产服务器的配置，方便快速判断快照生成频率是否恰当。</p><h5 id="对日志进行聚合运算"><a href="#对日志进行聚合运算" class="headerlink" title="对日志进行聚合运算"></a>对日志进行聚合运算</h5><p>在对日志文件进行聚合计算或者对页面浏览量进行分析时，唯一要考虑的是，如果redis因崩溃而没能创建快照，我们可以承受丢失多长时间内产生的数据，并在配置文件中用save做好处理。除此之外，还要解决如何恢复因故障而被终端的日志操作。<br>在数据恢复时，首先要做的是弄清楚丢失了哪些数据。因此在处理日志的同时要记录被处理日志的有关信息。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">process_logs</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> path<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 获取文件当前的处理进度</span>    current_file<span class="token punctuation">,</span> offset <span class="token operator">=</span> conn<span class="token punctuation">.</span>mget<span class="token punctuation">(</span><span class="token string">'progress:file'</span><span class="token punctuation">,</span> <span class="token string">'progress:position'</span><span class="token punctuation">)</span>    pipe <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">update_progress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pipe<span class="token punctuation">.</span>mset<span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string">'progress:file'</span><span class="token punctuation">:</span>fname<span class="token punctuation">,</span>            <span class="token string">'progress:position'</span><span class="token punctuation">:</span>offset        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment"># 执行日志更新操作，并记录日志名以及偏移量(处理进度)</span>        pipe<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> fname <span class="token keyword">in</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 跳过已经完成处理的文件</span>        <span class="token keyword">if</span> fname <span class="token operator">&lt;</span> current_file<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        inp <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> fname<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>        <span class="token comment"># 跳过目标日志已被处理的部分</span>        <span class="token keyword">if</span> fname <span class="token operator">==</span> current_file<span class="token punctuation">:</span>            inp<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>offset<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            offset <span class="token operator">=</span> <span class="token number">0</span>        current_file <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">for</span> lno<span class="token punctuation">,</span> line <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>inp<span class="token punctuation">)</span><span class="token punctuation">:</span>            callback<span class="token punctuation">(</span>pipe<span class="token punctuation">,</span> line<span class="token punctuation">)</span> <span class="token comment"># 调用回调函数处理日志行</span>            offset <span class="token operator">+=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>offset<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span> <span class="token comment"># 更新偏移量</span>            <span class="token comment"># 每处理1000个日志行或处理完一个日志文件就更新以此日志处理进度</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>lno <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">:</span>                update_progress<span class="token punctuation">(</span><span class="token punctuation">)</span>        update_progress<span class="token punctuation">(</span><span class="token punctuation">)</span>        inp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h5><p>可以通过调用使用<code>save</code>，而非<code>bgsave</code>减少redis在备份时的停顿时间。可以取消配置文件中自动的save，转而用手动的方式(发送save命令)来处理快照的生成</p><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><p>AOF持久命令会将被执行的写命令写到AOF文件的末尾，以此来记录数据的变化。因此只需要从头到尾执行一遍AOF文件包含的写命令就可以恢复AOF文件记录的数据集。</p><h4 id="文件同步"><a href="#文件同步" class="headerlink" title="文件同步"></a>文件同步</h4><p>向硬盘写入文件时，要经历以下阶段：<br>当调用写入方法时，内容会先被存储到缓冲区，然后操作系统会在将来的某个时候将缓冲区存储的内容写入硬盘。</p><table><thead><tr><th>选项</th><th>同步频率</th></tr></thead><tbody><tr><td>always</td><td>每个Redis写命令都要同步写入硬盘，这样做会严重降低Redis的速度</td></tr><tr><td>everysec</td><td>每秒执行一次同步，显式将多个写命令同步到磁盘</td></tr><tr><td>no</td><td>让操作系统来决定何时同步</td></tr></tbody></table><p>一般来说使用everysec选项就足够了，no选项虽然可以让redis的性能免受AOF影响，但却会导致崩溃后不定量的数据缺失。</p><pre class="line-numbers language-ad-danger" data-language="ad-danger"><code class="language-ad-danger">如果不想让自己的固态尽早报废，不要使用always选项。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="重写-x2F-压缩AOF文件"><a href="#重写-x2F-压缩AOF文件" class="headerlink" title="重写/压缩AOF文件"></a>重写/压缩AOF文件</h4><p>AOF虽然可以很大程度上减少数据丢失的量，并且能在极短时间内完成持久化操作。但其并非十全十美。<br>随着时间推移，AOF的文件体积会不断增长，占用大量的磁盘空间，同时redis每次重启都要执行AOF中的写明了来还原数据集，如果AOF非常大，还原会非常缓慢。<br>为解决AOF体积不断增大的问题，用户可以向redis发送<code>BGREWRITEAOF</code>命令，它会通过移除AOF文件中的冗余命令来重写AOF文件。要注意的是，该命令的执行逻辑与快照<code>BGSAVE</code>基本相同，因此有同样的缺陷。在使用时要谨慎选择时间段，因为如果AOF非常大的话，内存和时间消耗会很大。<br><code>auto-aof-rewrite-percentage</code>:当AOF体积达到最小体积阈值的指定百分比时开始重写<br><code>auto-aof-rewrite-min-size</code>：AOF在磁盘上可接受的最小文件大小</p><p><strong>AOF重写流程</strong></p><p>当AOF重写开始后，会fork出一个子<strong>进程</strong>来执行相关操作。使用进程而非线程的原因是，子线程与父进程共享内存，在执行修改时必须通过加锁来保证数据一致性。而使用进程，我们就可以通过COW避免加锁带来的开销。</p><blockquote><p><strong>COW在AOF中的应用</strong><br>主线程通过<code>fork</code>调用生成子进程时，操作系统会将主进程的页表复制一份给子进程，这个页表记录虚拟地址和物理地址映射关系，而不会复制物理内存。<br>这样一来，子进程就和父进程共享了物理内存数据，同时页表对应的页表项也会标记为只读。<br>当子进程或父进程想要修改共享内存中的数据时，就会触发写时复制，此时OS就会进行物理内存的复制，并重新设置内存映射关系。这个新的页表专属于发起修改的一方，它具有读写权限</p></blockquote><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/20230124103337.png" alt="COW示意图"></p><p>既然使用了写时复制，那么父进程在AOF期间进行的修改操作对执行AOF的子进程就是不可见的了，这显然会导致数据不一致。因此，父进程会将新写入的数据写入AOF缓冲区（等待被写入AOF文件的缓冲区）和AOF重写缓存区（处理AOF重写的缓冲区）。当子进程完成AOF时会向父进程发送一个信号，此时父进程会将AOF重写缓冲区的所有内容追加到AOF文件中，并重命名。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/20230124103643.png"></p><h4 id="混合持久化"><a href="#混合持久化" class="headerlink" title="混合持久化"></a>混合持久化</h4><p>通过上面的讨论，我们可以看出AOF和RDB都各有优劣。而为了最大程度上利用二者的优势，Redis推出了混合持久化。</p><p>开启混合持久化后，进行AOF重写时，fork出来的重写子进程会先将与主线程共享的内存数据以RDB的形式写入AOF文件。在此期间主线程处理的写操作会写入到AOF重写缓冲区，最后它会以增量命令的形式被写入AOF文件。写入完成后通知主线程将新的含有RDB格式和AOF格式的文件替换掉旧的AOF文件。</p><p>这样做的好处在于，重启Redis加载数据时，由于数据量很大的部分使用RDB存储，它的加载速度会很快。而之后一些琐碎的修改使用AOF存储，可以很大程度上减少数据的丢失。</p><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><p>让其他服务器拥有一个不断更新的数据副本，使得拥有数据副本的服务器可以用于处理用户发送的请求。<br>在需要扩展读请求或是在需要写入临时数据的时候，用户可以通过设置额外的Redis从服务器来保存数据集的副本。客户端每次向主服务器进行写入时，从服务器都会实时地得到更新。</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>前文提到当主服务器被连接时，会存储一份快照，因此要确保主服务器的<code>dir</code>,<code>dbfilename</code>被正确配置，并且拥有相应的权限。<br>从服务器可以同过<code>slaveof host port</code>来连接主服务器，也可以通过<code>slaveof no one</code>让服务器停止复制操作。</p><h4 id="启动过程"><a href="#启动过程" class="headerlink" title="启动过程"></a>启动过程</h4><table><thead><tr><th>步骤</th><th>主服务器操作</th><th>从服务器操作</th></tr></thead><tbody><tr><td>1</td><td>等待命令进入</td><td>连接主服务器，发送SYNC命令</td></tr><tr><td>2</td><td>开始执行BGSAVE，并使用缓冲区记录BGSAVE之后执行的所有写命令</td><td>根据配置选项来决定是继续使用现有的数据响应请求还是向发送请求的客户端返回错误</td></tr><tr><td>3</td><td>BGSAVE执行完毕，向从服务器发送快照文件，并在发送期间继续使用缓冲区记录被执行的写命令</td><td>丢弃所有旧数据，开始载入发来的快照文件</td></tr><tr><td>4</td><td>快照文件发送完毕，开始向从服务器发送存储在缓冲区里面的写命令</td><td>完成对快照文件的解释操作，像往常一样开始接收命令请求</td></tr><tr><td>5</td><td>缓冲区存储的写命令发送完毕；从此开始，每执行一个写命令，就向从服务器发送相同命令</td><td>执行主服务器发来的所有写命令</td></tr></tbody></table><p>从上面的步骤不难看出，Redis的主从交互需要网络畅通，同时最好在主服务器中预留下30%-45%的内存用于执行BGSAVE和创建记录写命令的缓冲区。<br>当有多台从服务器尝试连接主服务器时，就会出现下面两种情况之一：</p><ol><li>快照还没发送：所有从服务器收到相同的快照和写命令</li><li>快照正在发送或已经发送：当主服务器与较早进行连接的从服务器执行完复制所需的5个步骤之后，主服务器会与新连接的从服务器执行一次新的步骤1至步骤5</li></ol><p>考虑到主从服务器间的网络不可能永远畅通，我们必须准备一些应对网络问题的措施。当发生主从服务器断开连接后又重新连接的情况时，最简单的处理方式就是让它们再进行一次全量复制，这显然是非常耗时的。</p><p>因此，面对这种情况，Redis采用了增量复制，当从服务器重新连接主服务器后，它仍会向主服务器发送<code>psync</code>，不过这次offset值不再是-1（全量复制时为-1）。主服务器收到后会发送CONTINUE命令，告诉从服务器这是一次增量复制。</p><p><strong>主服务器处理增量复制的方式</strong></p><p>主服务器会维护一个环形缓冲区，里面记录了所有最近执行的命令，同时主服务器也会维护一个变量用于记录自己写到哪里了。</p><p>主服务器在收到从服务器的<code>psync</code>命令后，会比较收到的offset和自己维护的写入offset，如果从服务器缺失的数据还在环形缓冲区里，就会执行增量复制，否则会执行全量复制。</p><h4 id="主从链"><a href="#主从链" class="headerlink" title="主从链"></a>主从链</h4><p>创建太多个从服务器可能会造成网络不可用，尤其是在复制需要通过互联网或在不同数据中心之间进行时。为了缓解这一问题，我们让从服务器也可以拥有自己的从服务器，并由此形成主从链。<br>从从复制和主从复制的区别在于，如果从服务器X拥有从服务器Y，那么当从服务器执行复制步骤4时，会断开与服务器Y的连接，导致从服务器Y需要重新连接并重新同步。</p><p>当读请求的重要性明显高于写请求的重要性，并且读请求的数量远远超出一台Redis服务器可以处理的范围时，用户就需要添加新的从服务器来处理读请求。随着负载不断上升，主服务器可能会无法快速地更新所有从服务器，或者因为重新连接和重新同步从服务器而导致系统超载。为了缓解这个问题，用户可以创建一个由Redis主从节点（master/slave node）组成的中间层来分担主服务器的复制工作<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/redis/NeatReader-1661071382123.png"></p><h4 id="检验硬盘写入"><a href="#检验硬盘写入" class="headerlink" title="检验硬盘写入"></a>检验硬盘写入</h4><p>验证主服务器发送的数据是否被从服务器写入磁盘需要以下两个步骤：</p><ol><li>判断数据是否已经到达了从服务器：向主服务器写入真正的数据后，再向主服务器写入一个唯一的虚构值，然后通过检查虚构值是否存在于从服务器来判断写数据是否到达从服务器。</li><li>判断从服务器是否已经把数据写入了磁盘：检查<code>INFO</code>命令的输出结果中<code>aof_pending_bio_fsync</code>的属性值是否为0。</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">wait_for_sync</span><span class="token punctuation">(</span>mconn<span class="token punctuation">,</span> sconn<span class="token punctuation">)</span><span class="token punctuation">:</span>    identifier <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 用于判断数据是否抵达的虚拟值</span>    mconn<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">'sync:wait'</span><span class="token punctuation">,</span> identifier<span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 等待服务器完成同步</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> sconn<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'master_link_status'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'up'</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">.001</span><span class="token punctuation">)</span>    <span class="token comment"># 等待从服务器接收数据</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> sconn<span class="token punctuation">.</span>zscore<span class="token punctuation">(</span><span class="token string">'sync:wait'</span><span class="token punctuation">,</span> identifier<span class="token punctuation">)</span><span class="token punctuation">:</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">.001</span><span class="token punctuation">)</span>    <span class="token comment"># 检查数据是否已经被写入磁盘，1s后超时</span>    deadline <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1.01</span>    <span class="token keyword">while</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> deadline<span class="token punctuation">:</span>        <span class="token keyword">if</span> sconn<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'aof_pending_bio_fsync'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">.001</span><span class="token punctuation">)</span>    <span class="token comment"># 清理令牌，同时清理之前可能留下的旧令牌</span>    mconn<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span><span class="token string">'sync:wait'</span><span class="token punctuation">,</span> identifier<span class="token punctuation">)</span>    mconn<span class="token punctuation">.</span>zremrangebyscore<span class="token punctuation">(</span><span class="token string">'sync:wait'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">900</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="减少数据丢失"><a href="#减少数据丢失" class="headerlink" title="减少数据丢失"></a>减少数据丢失</h4><p><strong>异步复制</strong></p><hr><p>Redis主从复制采用的是异步复制，如果主节点向从节点同步写请求时宕机，主节点内存中的数据就会完全丢失。</p><p>Redis配置中有一个参数<code>min-slaves-max-lag</code>。一旦所有的从节点复制/同步数据的耗时都超过了这个配置的值，主服务器就会停止服务，因为它判断，这种情况下继续服务，一旦宕机，会造成大量的数据丢失。</p><p>此时客户端可以选择服务降级，先使用本地缓存继续服务，等待主服务器恢复正常后，再重新发起请求。</p><p><strong>脑裂</strong></p><hr><p>如果主节点无法与从节点交互，也无法响应哨兵的心跳，就会被判断死亡，此时哨兵会选举出一个新的主节点继续服务。</p><p>但假如原主节点是由于网络分区的原因而无法进行响应与同步，当主节点连接回来之后，会被哨兵降级为从节点，此时会进行一次全量复制。这导致主节点在被隔离状态下处理的所有写请求都被清理掉，产生数据丢失。</p><p>为了处理这种情况，Redis使用两个配置参数：</p><ol><li>min-slaves-to-write x 主节点必须要能与x个节点连接，否则它禁止写入数据</li><li>min-slaves-max-lag x 主从数据复制和同步的延迟不能超过 x 秒</li></ol><p>通过上面两个配置，我们能保证主服务器在假死状态下也不会写入数据，当它重新连回集群后，也就不存在数据丢失。</p><h3 id="处理系统故障"><a href="#处理系统故障" class="headerlink" title="处理系统故障"></a>处理系统故障</h3><p>Redis提供了两个命令用于快照和AOF文件的检查与恢复<br>redis-check-aof [–fix] &lt;file.aof&gt;<br>Redis会扫描指定的aof文件，寻找不正确或不完整的命令。如果添加了fix选项，Redis就会删除从第一个不正确命令开始的所有命令。<br>redis-check-dump &lt;dump.rdb&gt;<br>Redis检查指定的快照文件是否出错，但无法进行修复。</p><h3 id="哨兵"><a href="#哨兵" class="headerlink" title="哨兵"></a>哨兵</h3><p>Redis使用哨兵来进行主从故障转移，同时监控主从节点的状态。哨兵节点主要负责三件事：监控，选主，通知</p><p><strong>监控</strong></p><p>哨兵每隔1秒就会向所有的主从节点发送ping，如果某个节点没有在规定时间内（由配置项<code>down-after-milliseconds</code>设置）响应，就会被判断<strong>主观下线</strong>。</p><p>有主观下线，那么自然也有客观下线，当一个哨兵判断某个节点主观下线后就会向其他哨兵发起命令，询问他们是否也认为这个节点主观下线。如果赞成的哨兵数达到配置项<code>quorum</code>指定的值，该节点就会被判断为客观下线。</p><p><strong>选主</strong></p><p>当哨兵集群判断主节点客观下线后，就会选派出一个leader节点进行主从故障转移。通常是由判断主节点客观下线的节点担任<strong>候选者</strong>。</p><p>一个候选者要想赢得选举需要以下两个条件：</p><ol><li>获取半数以上的赞成票</li><li>获取的票数大于配置项<code>quorum</code>值</li></ol><p>主从故障转移流程：</p><ol><li>在已下线主节点的所有网络状态良好的从节点中选出一个从节点担任新的主节点。选取标准为：优先级，复制进度，ID号</li><li>让其余的从节点复制新的主节点</li><li>将新主节点的IP地址等信息通过发布/订阅模式通知给客户端。</li><li>继续监视旧主节点，如果它连回集群，将其设为从节点。</li></ol><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/20230125105755.png" alt="选取新主库流程"></p><p><strong>哨兵节点之间的发现方式</strong></p><p>哨兵之间会通过发布-订阅的方式相互发现，他们通过在订阅主节点上的<code>__sentinel__:hello</code>频道来实现相互发现，首次加入集群的哨兵会往频道中发送自己的IP和端口号，其他哨兵就可以借此获知新成员的信息。</p><p>接着，哨兵又可以向主节点发送INFO命令，来获取从节点的信息。</p><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>之前已经简单提过了命令的基本操作，但这一部分命令只能够帮助我们以流水线的方式提升程序效率，它并没有对数据一致性的保障。例如，假设一个客户开启了事务，并决定修改某个键，如果此时另一个客户端修改了这个键，事务最终仍会顺利执行，但最终结果却可能天差地别。<br>在分布式事务的情况下，常常会采用2PC(二阶段提交)，但如果连数据一致性都无法维持的话，2PC无法实现。例如，商店进了一批货，老板1更新好了库存，而老板2没更新好库存，这时候这批货就无法被记录，因为老板之间数据不一致，在投票时会发生明显分歧。<br>为了保证数据的一致性，Redis还提供了<code>WATCH</code>, <code>UNWATCH</code>, <code>DISCARD</code>命令。<br>WATCH会监视指定的键，在开启WATCH到使用EXEC提交这段时间，如果有其他用户对被监视的键做出了修改，在用户尝试执行EXEC的时候就会返回一个错误。<br>UNWATCH会取消Redis对所有监视键的监视<br>DISCARD会取消监视，同时放弃事务中的所有命令</p><p>接下来用一个商场案例来解释事务的用法<br>首先是用户将商品放到商场上销售，这时要监视的键是用户持有物，如果用户将商品挂上去后就用掉了商品，自然是不允许卖出的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">list_item</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> itemid<span class="token punctuation">,</span> sellerid<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">:</span>    inventory <span class="token operator">=</span> <span class="token string">"inventory:%s"</span><span class="token operator">%</span>sellerid    item <span class="token operator">=</span> <span class="token string">"%s.%s"</span><span class="token operator">%</span><span class="token punctuation">(</span>itemid<span class="token punctuation">,</span> sellerid<span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span>    pipe <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> end<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            pipe<span class="token punctuation">.</span>watch<span class="token punctuation">(</span>inventory<span class="token punctuation">)</span>            <span class="token comment"># 如果指定的商品已经不再用户包裹里，就放弃监视</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> pipe<span class="token punctuation">.</span>sismember<span class="token punctuation">(</span>inventory<span class="token punctuation">,</span> itemid<span class="token punctuation">)</span><span class="token punctuation">:</span>                pipe<span class="token punctuation">.</span>unwatch<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">None</span>            pipe<span class="token punctuation">.</span>multi<span class="token punctuation">(</span><span class="token punctuation">)</span>            pipe<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">"market:"</span><span class="token punctuation">,</span> item<span class="token punctuation">,</span> price<span class="token punctuation">)</span>            pipe<span class="token punctuation">.</span>srem<span class="token punctuation">(</span>inventory<span class="token punctuation">,</span> itemid<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>            <span class="token comment"># 如果出现变动就开始重试</span>        <span class="token keyword">except</span> redis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>WatchError<span class="token punctuation">:</span>            <span class="token keyword">pass</span>    <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而对于购买商品来说，就需要监视商场的货物变化情况以及买家的钱包状况</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">purchase_item</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> buyerid<span class="token punctuation">,</span> itemid<span class="token punctuation">,</span> sellerid<span class="token punctuation">,</span> lprice<span class="token punctuation">)</span><span class="token punctuation">:</span>    buyer <span class="token operator">=</span> <span class="token string">"users:%s"</span><span class="token operator">%</span>buyerid    seller <span class="token operator">=</span> <span class="token string">"users:%s"</span><span class="token operator">%</span>sellerid    item <span class="token operator">=</span> <span class="token string">"%s.%s"</span><span class="token operator">%</span><span class="token punctuation">(</span>itemid<span class="token punctuation">,</span> sellerid<span class="token punctuation">)</span>    inventory <span class="token operator">=</span> <span class="token string">"inventory:%s"</span><span class="token operator">%</span>buyerid    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span>    pipe <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> end<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            pipe<span class="token punctuation">.</span>watch<span class="token punctuation">(</span><span class="token string">"market:"</span><span class="token punctuation">,</span> buyer<span class="token punctuation">)</span>            price <span class="token operator">=</span> pipe<span class="token punctuation">.</span>zscore<span class="token punctuation">(</span><span class="token string">"market:"</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>            funds <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>pipe<span class="token punctuation">.</span>hget<span class="token punctuation">(</span>buyer<span class="token punctuation">,</span> <span class="token string">"funds"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> price <span class="token operator">!=</span> lprice <span class="token keyword">or</span> price <span class="token operator">&gt;</span> funds<span class="token punctuation">:</span>                pipe<span class="token punctuation">.</span>unwatch<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">None</span>            pipe<span class="token punctuation">.</span>multi<span class="token punctuation">(</span><span class="token punctuation">)</span>            pipe<span class="token punctuation">.</span>hincrby<span class="token punctuation">(</span>seller<span class="token punctuation">,</span> <span class="token string">"funds"</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span>            pipe<span class="token punctuation">.</span>hincrby<span class="token punctuation">(</span>buyer<span class="token punctuation">,</span> <span class="token string">"funds"</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token operator">-</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span>            pipe<span class="token punctuation">.</span>sadd<span class="token punctuation">(</span>inventory<span class="token punctuation">,</span> itemid<span class="token punctuation">)</span>            pipe<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span><span class="token string">"market:"</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>            pipe<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">except</span> redis<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>WatchError<span class="token punctuation">:</span>            <span class="token keyword">pass</span>    <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Redis不像关系型数据库一样，在要访问的数据上加锁，因为持有锁的客户端处理越慢，等待的时间就越长。Redis只会在监视的数据被更改时，通知客户端，避免了等待，当客户端接到失败通知时，只需要尝试重新执行即可。</p><h2 id="构建支持程序"><a href="#构建支持程序" class="headerlink" title="构建支持程序"></a>构建支持程序</h2><h3 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h3><p>常用的日志记录方式有两种，第一种是将日志记录到文件里面。然后随着程序的运行不断将新的日志行记录到日志文件中。并在一段时间之后创建新的日志文件。这种日志记录方式很难聚合所有的日志并进行处理。<br>另一种方式就是本章使用的syslog。该服务运行在Linux服务器的514号TCP端口和UDP端口上，syslog接收其他程序发来的日志并将这些信息路由到存储在硬盘上的各个日志文件中</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将所有的日志级别映射为字符串</span>SEVERITY <span class="token operator">=</span> <span class="token punctuation">{</span>    logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">:</span> <span class="token string">'debug'</span><span class="token punctuation">,</span>    logging<span class="token punctuation">.</span>INFO<span class="token punctuation">:</span> <span class="token string">'info'</span><span class="token punctuation">,</span>    logging<span class="token punctuation">.</span>WARNING<span class="token punctuation">:</span> <span class="token string">'warning'</span><span class="token punctuation">,</span>    logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">:</span> <span class="token string">'error'</span><span class="token punctuation">,</span>    logging<span class="token punctuation">.</span>CRITICAL<span class="token punctuation">:</span> <span class="token string">'critical'</span><span class="token punctuation">}</span>SEVERITY<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">for</span> name <span class="token keyword">in</span> SEVERITY<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">log_recent</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> name<span class="token punctuation">,</span> message<span class="token punctuation">,</span> severity<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> pipe<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    severity <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>SEVERITY<span class="token punctuation">.</span>get<span class="token punctuation">(</span>severity<span class="token punctuation">,</span> severity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    destination <span class="token operator">=</span> <span class="token string">'recent:%s:%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> severity<span class="token punctuation">)</span>    message <span class="token operator">=</span> time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> message    pipe <span class="token operator">=</span> pipe <span class="token keyword">or</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 使用流水线降低通信次数</span>    pipe<span class="token punctuation">.</span>lpush<span class="token punctuation">(</span>destination<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token comment"># 将日志加入列表</span>    pipe<span class="token punctuation">.</span>ltrim<span class="token punctuation">(</span>destination<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span> <span class="token comment"># 让日志只包含最新的100条</span>    pipe<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的实例可以很方便的记录最新的日志，但是对于日志的重要程度以及出现频率无法进行统计，因此我们再添加一个用于记录常见日志的方法。<br>程序会将消息作为成员存储到有序集合里面，并将消息出现的频率设置为成员的分值。为了确保我们看见的常见消息都是最新的，程序会以每小时一次的频率对消息进行轮换，并在轮换日志的时候保留上一个小时记录的常见消息，从而防止没有任何消息存在的情况出现。<br>程序还需要谨慎处理上一个小时收集到的日志，因为涉及改名操作，因此需要将其放在一个事务里面。此外，程序会将流水线传递给log_recent()来减少记录常见日志和记录最新日志时的通信次数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">log_common</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> name<span class="token punctuation">,</span> message<span class="token punctuation">,</span> severity<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    severity <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>SEVERITY<span class="token punctuation">.</span>get<span class="token punctuation">(</span>severity<span class="token punctuation">,</span> severity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    destination <span class="token operator">=</span> <span class="token string">'common:%s:%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> severity<span class="token punctuation">)</span>    start_key <span class="token operator">=</span> destination <span class="token operator">+</span> <span class="token string">':start'</span> <span class="token comment"># 程序每小时轮换一次日志，使用一个键来存储当前所处的时间</span>    pipe <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> timeout    <span class="token keyword">while</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> end<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment"># 对记录当前小时数的键进行监视，确保轮换操作正确执行</span>            pipe<span class="token punctuation">.</span>watch<span class="token punctuation">(</span>start_key<span class="token punctuation">)</span>            now <span class="token operator">=</span> datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 获取当前小时数</span>            hour_start <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token operator">*</span>now<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isoformat<span class="token punctuation">(</span><span class="token punctuation">)</span>            existing <span class="token operator">=</span> pipe<span class="token punctuation">.</span>get<span class="token punctuation">(</span>start_key<span class="token punctuation">)</span>            <span class="token comment"># 开启事务</span>            pipe<span class="token punctuation">.</span>multi<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 如果记录的是上一个小时的日志，就将他归档</span>            <span class="token keyword">if</span> existing <span class="token keyword">and</span> existing <span class="token operator">&lt;</span> hour_start<span class="token punctuation">:</span>                pipe<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>destination<span class="token punctuation">,</span> destination <span class="token operator">+</span> <span class="token string">':last'</span><span class="token punctuation">)</span>                pipe<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>start_key<span class="token punctuation">,</span> destination <span class="token operator">+</span> <span class="token string">':pstart'</span><span class="token punctuation">)</span>                pipe<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>start_key<span class="token punctuation">,</span> hour_start<span class="token punctuation">)</span>            <span class="token keyword">elif</span> <span class="token keyword">not</span> existing<span class="token punctuation">:</span>                pipe<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>start_key<span class="token punctuation">,</span> hour_start<span class="token punctuation">)</span>            <span class="token comment"># 更新日志出现次数</span>            pipe<span class="token punctuation">.</span>zincrby<span class="token punctuation">(</span>destination<span class="token punctuation">,</span> message<span class="token punctuation">)</span>            <span class="token comment"># 记录日志</span>            log_recent<span class="token punctuation">(</span>pipe<span class="token punctuation">,</span> name<span class="token punctuation">,</span> message<span class="token punctuation">,</span> severity<span class="token punctuation">,</span> pipe<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token keyword">except</span> redis<span class="token punctuation">.</span>exception<span class="token punctuation">.</span>WatchError<span class="token punctuation">:</span>            <span class="token keyword">continue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在Redis中存储计数器"><a href="#在Redis中存储计数器" class="headerlink" title="在Redis中存储计数器"></a>在Redis中存储计数器</h3><p>在监控应用程序的同时，持续地收集信息是一件非常重要的事情。那些影响网站响应速度以及网站所能服务的页面数量的代码改动、新的广告营销活动或者是刚刚接触系统的新用户，都有可能会彻底地改变网站载入页面的数量，并因此而影响网站的各项性能指标。但如果我们平时不记录任何指标数据的话，我们就不可能知道指标发生了变化，也就不可能知道网站的性能是在提高还是在下降。<br>在收集指标数据方面，我们可以使用Redis构建一个工具。创建的每一个计数器都有自己的名字，并且会以不同的精度存储最新的数据样本。<br>在存储计数器方面，使用hash存储每个计数器在各个时间段的计数，用计数器的名字和频率构成命名空间。除此之外，利用有序集合存储计数器，并将他们的分值全部设为0，这样Redis在排序的时候就会根据成员值排序。<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/redis/20220823154309.png"><br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/redis/20220823154332.png"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 计数器精度</span>PRECISION <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">3600</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">update_counter</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> name<span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> now<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    now <span class="token operator">=</span> now <span class="token keyword">or</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 用流水线减少消息通信次数</span>    pipe <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 更新各个频率的相关计数器</span>    <span class="token keyword">for</span> prec <span class="token keyword">in</span> PRECISION<span class="token punctuation">:</span>        pnow <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>now <span class="token operator">/</span> prec<span class="token punctuation">)</span> <span class="token operator">*</span> prec        <span class="token builtin">hash</span> <span class="token operator">=</span> <span class="token string">'%s:%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>prec<span class="token punctuation">,</span> name<span class="token punctuation">)</span>        pipe<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">'known:'</span><span class="token punctuation">,</span> <span class="token builtin">hash</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>        pipe<span class="token punctuation">.</span>hincrby<span class="token punctuation">(</span><span class="token string">'count:'</span> <span class="token operator">+</span> <span class="token builtin">hash</span><span class="token punctuation">,</span> pnow<span class="token punctuation">,</span> count<span class="token punctuation">)</span>    pipe<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_counter</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> name<span class="token punctuation">,</span> precision<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">hash</span> <span class="token operator">=</span> <span class="token string">'%s:%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>precision<span class="token punctuation">,</span> name<span class="token punctuation">)</span>    data <span class="token operator">=</span> conn<span class="token punctuation">.</span>hgetall<span class="token punctuation">(</span><span class="token string">'count:'</span> <span class="token operator">+</span> <span class="token builtin">hash</span><span class="token punctuation">)</span>    to_return <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> data<span class="token punctuation">.</span>iteritems<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        to_return<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    to_return<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> to_return<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就是清理计数器了，如果我们只是一味存储数据而不清理旧数据，必然会导致OOM。不过由于我们之前已经将计数器记录在了Redis的有序集合中，因此只需要遍历它并删除指定的数据即可。<br>在执行清理的过程中要注意以下几点：</p><ul><li>任何时候都可能会有新的计数器被添加进来</li><li>同一时候可能会有多个不同的清理操作</li><li>对于一个每天只更新一次的计数器来说，频繁扫描它的状态会浪费大量资源</li><li>不应尝试清理一个不包含数据的计数器</li></ul><p>接下来简单说一下清理的逻辑：开启一个守护进程，每隔60s扫描一次计数器，对于更新频率高于扫描频率的，每次扫描后都进行清理；而对那些更新频率低于扫描频率的则可以适当减少清理次数，比如一个5min更新一次的计数器，可以每扫描5次清理一次。获取要清理的计数器后，就按照可保存的最大样本数计算记录的截止时间，将截止时间之前的记录全部清理掉。清理完毕之后检查计数器中剩余的数据，如果没有数据了，就尝试删除，不过要监视该计数器，如果有别的客户端添加数据就放弃。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">clean_counters</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>    pipe <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    passed <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 记录清理程序的运行次数，用于同步不同频率的计数器的清理</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> QUIT<span class="token punctuation">:</span>        start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        index <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> index <span class="token operator">&lt;</span> conn<span class="token punctuation">.</span>zcard<span class="token punctuation">(</span><span class="token string">'known:'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">hash</span> <span class="token operator">=</span> conn<span class="token punctuation">.</span>zrange<span class="token punctuation">(</span><span class="token string">'known:'</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> index<span class="token punctuation">)</span>            index <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">hash</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token comment"># 获取计数器名称以及频率</span>            <span class="token builtin">hash</span> <span class="token operator">=</span> <span class="token builtin">hash</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            prec <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">hash</span><span class="token punctuation">.</span>partition<span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment"># 计算计数器的清理频率</span>            hprec <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>prec <span class="token operator">//</span> <span class="token number">60</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token number">1</span>            <span class="token keyword">if</span> passes <span class="token operator">%</span> hprec<span class="token punctuation">:</span>                <span class="token keyword">continue</span>            hkey <span class="token operator">=</span> <span class="token string">'count:'</span> <span class="token operator">+</span> <span class="token builtin">hash</span>            <span class="token comment"># 计算允许存在的记录的截止时间</span>            cutoff <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> SAMPLE_COUNT <span class="token operator">*</span> prec            <span class="token comment"># 获取计数器的时间戳</span>            samples <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> conn<span class="token punctuation">.</span>hkeys<span class="token punctuation">(</span>hkey<span class="token punctuation">)</span><span class="token punctuation">)</span>            samples<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 计算清理的数量</span>            remove <span class="token operator">=</span> bbisect<span class="token punctuation">.</span>bisect_right<span class="token punctuation">(</span>samples<span class="token punctuation">,</span> cutoff<span class="token punctuation">)</span>            <span class="token keyword">if</span> remove<span class="token punctuation">:</span>                conn<span class="token punctuation">.</span>hdel<span class="token punctuation">(</span>hkey<span class="token punctuation">,</span> <span class="token operator">*</span>samples<span class="token punctuation">[</span><span class="token punctuation">:</span>remove<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token comment"># 如果清理完之后计数器内容为空，尝试删除</span>                <span class="token keyword">if</span> remove <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>samples<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">try</span><span class="token punctuation">:</span>                        pipe<span class="token punctuation">.</span>watch<span class="token punctuation">(</span>hkey<span class="token punctuation">)</span>                        <span class="token keyword">if</span> <span class="token keyword">not</span> pipe<span class="token punctuation">.</span>hlen<span class="token punctuation">(</span>hkey<span class="token punctuation">)</span><span class="token punctuation">:</span>                            pipe<span class="token punctuation">.</span>multi<span class="token punctuation">(</span><span class="token punctuation">)</span>                            pipe<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span><span class="token string">'known:'</span><span class="token punctuation">,</span> <span class="token builtin">hash</span><span class="token punctuation">)</span>                            pipe<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>                            index <span class="token operator">-=</span> <span class="token number">1</span>                        <span class="token keyword">else</span><span class="token punctuation">:</span>                            pipe<span class="token punctuation">.</span>unwatch<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">except</span> redis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>WatchError<span class="token punctuation">:</span>                        <span class="token keyword">pass</span>    <span class="token comment"># 修改清理器的轮数</span>    passes <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment"># 计算清理器的耗时</span>    duration <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span>    <span class="token comment"># 让程序睡眠到下一个1分钟开始，如果之前已经运行了1min，就休眠1s</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">60</span> <span class="token operator">-</span> duration<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="存储统计数据"><a href="#存储统计数据" class="headerlink" title="存储统计数据"></a>存储统计数据</h3><p>对于给定的上下文和类型，可以使用Redis的有序集合来存储类型的统计数据。当然这里不是为了利用它有序的特性，而是为了方便之后进行交并集运算。这里我们分析一下存储统计数据的需求：首先需要一种键值对的存储形式，可以将统计数据对应起来，其次需要能够进行交并运算方便不同统计数据间的比对，满足以上两个条件的只有有序集合。<br>接下来简单讲讲存储统计数据的思路：前一部分操作和log_common类似，记录当前小时和前1小时的信息。接着新建两个有序集合，一个作为最小值集合，一个作为最大值集合，然后利用适当的聚合函数计算新的最大最小值。这里专门使用并集运算的原因在于，这类值变动频率很大，自己用watch修改较为麻烦，不如交给redis的命令操作。然后对各成员进行更新即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">update_stats</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> context<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    destination <span class="token operator">=</span> <span class="token string">'stats:%s:%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">)</span>    start_key <span class="token operator">=</span> destination <span class="token operator">+</span> <span class="token string">':start'</span>    pipe <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> timeout    <span class="token keyword">while</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> end<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            pipe<span class="token punctuation">.</span>watch<span class="token punctuation">(</span>start_key<span class="token punctuation">)</span>            now <span class="token operator">=</span> datetime<span class="token punctuation">.</span>utcnow<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>timetuple<span class="token punctuation">(</span><span class="token punctuation">)</span>            hour_start <span class="token operator">=</span> datetime<span class="token punctuation">(</span><span class="token operator">*</span>now<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isoformat<span class="token punctuation">(</span><span class="token punctuation">)</span>            existing <span class="token operator">=</span> pipe<span class="token punctuation">.</span>get<span class="token punctuation">(</span>start_key<span class="token punctuation">)</span>            pipe<span class="token punctuation">.</span>multi<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> existing <span class="token keyword">and</span> existing <span class="token operator">&lt;</span> hour_start<span class="token punctuation">:</span>                pipe<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>destination<span class="token punctuation">,</span> destination <span class="token operator">+</span> <span class="token string">':last'</span><span class="token punctuation">)</span>                pipe<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>start_key<span class="token punctuation">,</span> destination <span class="token operator">+</span> <span class="token string">':pstart'</span><span class="token punctuation">)</span>                pipe<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>start_key<span class="token punctuation">,</span> hour_start<span class="token punctuation">)</span>            <span class="token keyword">elif</span> <span class="token keyword">not</span> existing<span class="token punctuation">:</span>                pipe<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span>start_key<span class="token punctuation">,</span> hour_start<span class="token punctuation">)</span>            tkey1 <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            tkey2 <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            pipe<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span>tkey1<span class="token punctuation">,</span> <span class="token string">'min'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>            pipe<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span>tkey2<span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>            pipe<span class="token punctuation">.</span>zunionstore<span class="token punctuation">(</span>destination<span class="token punctuation">,</span>                 <span class="token punctuation">[</span>destination<span class="token punctuation">,</span> tkey1<span class="token punctuation">]</span><span class="token punctuation">,</span> aggregate<span class="token operator">=</span><span class="token string">'min'</span><span class="token punctuation">)</span>            pipe<span class="token punctuation">.</span>zunionstore<span class="token punctuation">(</span>destination<span class="token punctuation">,</span>                <span class="token punctuation">[</span>destination<span class="token punctuation">,</span> tkey2<span class="token punctuation">]</span><span class="token punctuation">,</span> aggregate<span class="token operator">=</span><span class="token string">'max'</span><span class="token punctuation">)</span>            pipe<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>tkey1<span class="token punctuation">,</span> tkey2<span class="token punctuation">)</span>            pipe<span class="token punctuation">.</span>zincrby<span class="token punctuation">(</span>destination<span class="token punctuation">,</span> <span class="token string">'count'</span><span class="token punctuation">)</span>            pipe<span class="token punctuation">.</span>zincrby<span class="token punctuation">(</span>destination<span class="token punctuation">,</span> <span class="token string">'sum'</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>            pipe<span class="token punctuation">.</span>zincrby<span class="token punctuation">(</span>destination<span class="token punctuation">,</span> <span class="token string">'sumsq'</span><span class="token punctuation">,</span> value<span class="token operator">*</span>value<span class="token punctuation">)</span>            <span class="token keyword">return</span> pipe<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment"># 返回一些后续要用到的统计信息</span>        <span class="token keyword">except</span> redis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>WatchError<span class="token punctuation">:</span>            <span class="token keyword">continue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在存储了统计数据之后，我们就可以开始尝试寻找例如生成速度较慢的网页，以方便后续优化。<br>我们可以给每个页面都添加一个计时器来解决这个问题，但要注意的是，我们真正需要的是统计数据，是访问最慢的几个页面，因此需要实现一个既能计时，又能将计时结果存储起来的东西。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@contextlib<span class="token punctuation">.</span>contextmanager</span><span class="token keyword">def</span> <span class="token function">access_time</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">:</span>    start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token comment"># 执行被上下文管理器包裹的代码</span>    delta <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start    stats <span class="token operator">=</span> update_stats<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> context<span class="token punctuation">,</span> <span class="token string">'AccessTime'</span><span class="token punctuation">,</span> delta<span class="token punctuation">)</span>    average <span class="token operator">=</span> stats<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> stats<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment"># 计算平均访问时长</span>    pipe <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    pipe<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">'slowest:AccessTime'</span><span class="token punctuation">,</span> context<span class="token punctuation">,</span> average<span class="token punctuation">)</span>    pipe<span class="token punctuation">.</span>zremrangebyrank<span class="token punctuation">(</span><span class="token string">'slowest:AccessTime'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">101</span><span class="token punctuation">)</span> <span class="token comment"># 只保留最慢的100个界面</span>    pipe<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 使用方式</span><span class="token keyword">with</span> access_time<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">:</span>    callback<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>统计数据不知能记录网页的加载速度，同样还可以加载模板的渲染速度，数据库的加载速度等等。除此之外，我们还可以将明显出现异常的统计数据输出到日志当中，方便进行问题的排查与优化。</p><h3 id="查找IP属地以及国家"><a href="#查找IP属地以及国家" class="headerlink" title="查找IP属地以及国家"></a>查找IP属地以及国家</h3><p>这一节要实现根据用户的IP定位其所在的地区。难点在于同一属地的IP地址数量很大，普通的筛选策略会消耗大量机器资源。不过同一地区的IP地址有一种特征：相比其他地区的起始IP，必然与所属地区IP的一致位数最多。因此这里可以将城市IP地址转换为分数，用有序队列存储。用户所属的地区IP就是在所有比用户IP分数小的地区IP中最大的那个。<br>在本例中使用散列存储城市详细信息，用有序队列存储ip分数与城市id的映射</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># IP转换为分数的函数</span><span class="token keyword">def</span> <span class="token function">ip_to_score</span><span class="token punctuation">(</span>ip_address<span class="token punctuation">)</span><span class="token punctuation">:</span>    score <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> v <span class="token keyword">in</span> ip_address<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        score <span class="token operator">=</span> score <span class="token operator">*</span> <span class="token number">256</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> score<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将城市id以及其IP地址的分数添加到有序集合</span><span class="token keyword">def</span> <span class="token function">import_ips_to_redis</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    csv_file <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> count<span class="token punctuation">,</span> row <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>csv_file<span class="token punctuation">)</span><span class="token punctuation">:</span>        start_ip <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">if</span> row <span class="token keyword">else</span> <span class="token string">''</span>        <span class="token keyword">if</span> <span class="token string">'i'</span> <span class="token keyword">in</span> start_ip<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> <span class="token string">'.'</span> <span class="token keyword">in</span> start_ip<span class="token punctuation">:</span>            start_ip <span class="token operator">=</span> ip_to_score<span class="token punctuation">(</span>start_ip<span class="token punctuation">)</span>        <span class="token keyword">elif</span> start_ip<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            start_ip <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>start_ip<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        city_id <span class="token operator">=</span> row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'_'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">'ip2cityid:'</span><span class="token punctuation">,</span> city_id<span class="token punctuation">,</span> start_ip<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find_city_by_ip</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> ip_address<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>ip_address<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ip_address <span class="token operator">=</span> ip_to_score<span class="token punctuation">(</span>ip_address<span class="token punctuation">)</span>    <span class="token comment"># 查找所属城市的id</span>    city_id <span class="token operator">=</span> conn<span class="token punctuation">.</span>zrevrangebyscore<span class="token punctuation">(</span><span class="token string">'ip2cityid:'</span><span class="token punctuation">,</span> ip_address<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> city_id<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    city_id <span class="token operator">=</span> city_id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>partition<span class="token punctuation">(</span><span class="token string">'_'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>conn<span class="token punctuation">.</span>hget<span class="token punctuation">(</span><span class="token string">'cityid2city:'</span><span class="token punctuation">,</span> city_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="构建应用程序组件"><a href="#构建应用程序组件" class="headerlink" title="构建应用程序组件"></a>构建应用程序组件</h2><h3 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h3><p>假设我们现在需要完成一个最近联系人的自动补全功能。这需要我们能够快速向列表中添加或是删除联系人，除此之外，这个功能不能占用太多的内存。综合以上考量，应当选择列表作为存储结构，因为列表是Redis中内存占用最小的数据结构。<br>在构建最近联系人阶段，主要分为以下三个步骤：</p><ol><li>如果该联系人已经存在，就删除它</li><li>将新的最近联系人插入</li><li>如果最近联系人个数超出阈值就进行修剪</li></ol><p>当需要自动补全时，从Redis中获取最近联系人列表并进行匹配，返回匹配的联系人列表。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fetch_autocomplete_list</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> conn<span class="token punctuation">:</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">:</span>    candidates <span class="token operator">=</span> conn<span class="token punctuation">.</span>lrange<span class="token punctuation">(</span><span class="token string">'recent:'</span> <span class="token operator">+</span> user<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    matches <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> candidates<span class="token punctuation">:</span>        <span class="token keyword">if</span> c<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">:</span>            matches<span class="token punctuation">.</span>append<span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token keyword">return</span> matches<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为在构建最近联系人列表时，我们已经有意限制了联系人数量的大小，因此这种解决方案可以取得十分优秀的效果。但如果面对的是大量数据的情况，这种方案就不太适用了。可以考虑使用带有时间戳的有序列表实现该功能。</p><p>在上面的例子中，我们的解决思路是直接从Redis现有列表中查找匹配的元素。但当元素数量很多时，扫描整个列表只为寻找几个匹配的记录就显得不是那么划算了。对于与时间有关的自动补全已经给出了方案，但如果只给定范围呢，例如公会成员列表又该怎么做呢？</p><p>接下来要介绍的方案的核心思路是：根据给定参数创建查找范围从而提升查找效率。<br>在介绍解决方案之前还要先介绍以下有序集合的一种变相用法，前文有提到过，当所有成员的分值都相同时，Redis就会根据成员字符串的ASCII码来进行排序(这里假设所有成员名称均为纯英文)。因此，如果用户给定abc开头的前缀，那就是需要查找abbz…与abd之间的所有成员，程序可以通过向Redis中插入abb{和abc{来创建出查找范围(在ASCII码中，`是首个排在a前的字符，{是首个排在z后的字符)</p><p>创建查找范围的思路：利用二分查找找到prefix末尾的前置字符，然后添加’{‘作为查找范围的起点，然后在prefix最后添加{作为终点。实际上是找到首个小于prefix，以及首个大于prefix的字符串。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">valid_charater <span class="token operator">=</span> <span class="token string">'`abcdefghijklmnopqrstuvwxyz{'</span><span class="token keyword">def</span> <span class="token function">find_prefix_range</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">:</span>    pos <span class="token operator">=</span> bisect<span class="token punctuation">.</span>bisect_left<span class="token punctuation">(</span>valid_charater<span class="token punctuation">,</span> prefix<span class="token punctuation">)</span>    suffix <span class="token operator">=</span> valid_charater<span class="token punctuation">[</span><span class="token punctuation">(</span>pos <span class="token keyword">or</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> prefix<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> suffix <span class="token operator">+</span> <span class="token string">'{'</span><span class="token punctuation">,</span> prefix <span class="token operator">+</span> <span class="token string">'{'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体查询的时候就是先向Redis插入刚刚创建的两个范围界限，在查找完成之后将它们删除。考虑到同一时间可能会有多个客户端尝试查询，在删除时需要开启事务，同时在返回结果时也要注意将带有{的元素清除(查询过程中可能有客户端插入了界限元素)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">auto_complete_on_prefix</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> guide<span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">:</span>    start<span class="token punctuation">,</span> end <span class="token operator">=</span> find_prefix_range<span class="token punctuation">(</span>prefix<span class="token operator">=</span>prefix<span class="token punctuation">)</span>    identifier <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 为避免多个客户端同时查询导致起始元素和终止元素被重复添加</span>    start <span class="token operator">+=</span> identifier    end <span class="token operator">+=</span> identifier    zset_name <span class="token operator">=</span> <span class="token string">"member:"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>guide<span class="token punctuation">)</span>    conn<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span>zset_name<span class="token punctuation">,</span> <span class="token punctuation">{</span>start<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            pipeline<span class="token punctuation">.</span>watch<span class="token punctuation">(</span>zset_name<span class="token punctuation">)</span>            sindex <span class="token operator">=</span> pipeline<span class="token punctuation">.</span>zrank<span class="token punctuation">(</span>zset_name<span class="token punctuation">,</span> start<span class="token punctuation">)</span>            eindex <span class="token operator">=</span> pipeline<span class="token punctuation">.</span>zrank<span class="token punctuation">(</span>zset_name<span class="token punctuation">,</span> end<span class="token punctuation">)</span>            erange <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>sindex <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">,</span> eindex <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment"># type: ignore</span>            pipeline<span class="token punctuation">.</span>multi<span class="token punctuation">(</span><span class="token punctuation">)</span>            pipeline<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span>zset_name<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span>            pipeline<span class="token punctuation">.</span>zrange<span class="token punctuation">(</span>zset_name<span class="token punctuation">,</span> sindex<span class="token punctuation">,</span> erange<span class="token punctuation">)</span>  <span class="token comment"># type: ignore</span>            items <span class="token operator">=</span> pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">break</span>        <span class="token keyword">except</span> redis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>WatchError<span class="token punctuation">:</span>            <span class="token keyword">continue</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>item <span class="token keyword">for</span> item <span class="token keyword">in</span> items <span class="token keyword">if</span> <span class="token string">'{'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> item<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>在上面的例子中，我们使用WATCH命令来保证数据的一致性。但在高负载的情况下，WATCH会导致大量的重试操作，大大拉低系统的性能。<br>以下列举一些并发情况下锁在不正确运行的症状：</p><ul><li>持有锁的进程因为操作时间过长而导致锁被自动释放，但进程本身并不知晓这一点，甚至还可能会错误地释放掉了其他进程持有的锁。</li><li>一个持有锁并打算执行长时间操作的进程已经崩溃，但其他想要获取锁的进程不知道哪个进程持有着锁，也无法检测出持有锁的进程已经崩溃，只能白白地浪费时间等待锁被释放。</li><li>在一个进程持有的锁过期之后，其他多个进程同时尝试去获取锁，并且都获得了锁。</li><li>上面提到的第一种情况和第三种情况同时出现，导致有多个进程获得了锁，而每个进程都以为自己是唯一一个获得锁的进程。</li></ul><p>下面我们来尝试以下手动实现一个简易的锁，具体思路如下：用锁名称构成命名空间，将值设置为一个uuid生成的字符串，所有涉及共享数据操作的程序都要尝试去获取指定的锁。程序会使用Redis命令<code>setnx</code>尝试获取锁(setnx只会在当前键没有值时将值插入进去)，插入成功就代表成功获取到锁，否则就不断重试去获取锁。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">acquire_lock</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> lockname<span class="token punctuation">,</span> acquire_timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    identifier <span class="token operator">=</span> uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> acquire_timeout    <span class="token keyword">while</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> end<span class="token punctuation">:</span>        <span class="token keyword">if</span> conn<span class="token punctuation">.</span>setnx<span class="token punctuation">(</span><span class="token string">'lock'</span> <span class="token operator">+</span> lockname<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> identifier        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">.001</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在购买操作时，就只需要将完整的购买操作包裹在持有锁的阶段就行。其中购买操作放在try代码段内是为了保证即使程序中途异常也能保证锁最后被释放。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">purchase_item_with_lock</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> buyerid<span class="token punctuation">,</span> itemid<span class="token punctuation">,</span> sellerid<span class="token punctuation">)</span><span class="token punctuation">:</span>    buyer <span class="token operator">=</span> <span class="token string">"users:%s"</span><span class="token operator">%</span>buyerid    seller <span class="token operator">=</span> <span class="token string">"users:%s"</span><span class="token operator">%</span>sellerid    item <span class="token operator">=</span> <span class="token string">"%s.%s"</span><span class="token operator">%</span><span class="token punctuation">(</span>itemid<span class="token punctuation">,</span> sellerid<span class="token punctuation">)</span>    inventory <span class="token operator">=</span> <span class="token string">"inventory:%s"</span><span class="token operator">%</span>buyerid    locked <span class="token operator">=</span> acquire_lock<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> market<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> locked<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    pipe <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        pipe<span class="token punctuation">.</span>zscore<span class="token punctuation">(</span><span class="token string">"market:"</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>        pipe<span class="token punctuation">.</span>hget<span class="token punctuation">(</span>buyer<span class="token punctuation">,</span> <span class="token string">'funds'</span><span class="token punctuation">)</span>        price<span class="token punctuation">,</span> funds <span class="token operator">=</span> pipe<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> price <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> price <span class="token operator">&gt;</span> funds<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>        pipe<span class="token punctuation">.</span>hincrby<span class="token punctuation">(</span>seller<span class="token punctuation">,</span> <span class="token string">'funds'</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span>        pipe<span class="token punctuation">.</span>hincrby<span class="token punctuation">(</span>buyer<span class="token punctuation">,</span> <span class="token string">'funds'</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token operator">-</span>price<span class="token punctuation">)</span><span class="token punctuation">)</span>        pipe<span class="token punctuation">.</span>sadd<span class="token punctuation">(</span>inventory<span class="token punctuation">,</span> itemid<span class="token punctuation">)</span>        pipe<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span><span class="token string">'market:'</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>        pipe<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        release_lock<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> market<span class="token punctuation">,</span> locked<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而在释放锁的时候要注意：要监视锁对应键的情况，避免某一把锁被多次释放</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">release_lock</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> lockname<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span><span class="token punctuation">:</span>    pipe <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    lockname <span class="token operator">=</span> <span class="token string">'lock:'</span> <span class="token operator">+</span> lockname    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            pipe<span class="token punctuation">.</span>watch<span class="token punctuation">(</span>lockname<span class="token punctuation">)</span>            <span class="token keyword">if</span> pipe<span class="token punctuation">.</span>get<span class="token punctuation">(</span>lockname<span class="token punctuation">)</span> <span class="token operator">==</span> identifier<span class="token punctuation">:</span>                pipe<span class="token punctuation">.</span>multi<span class="token punctuation">(</span><span class="token punctuation">)</span>                pipe<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>lockname<span class="token punctuation">)</span>                pipe<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            pipe<span class="token punctuation">.</span>unwatch<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        <span class="token keyword">except</span> redis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>WatchError<span class="token punctuation">:</span>            <span class="token keyword">pass</span>    <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上的实例代码只实现了和watch同一粒度的锁，但在市场交易这种情况下，明显细粒度锁更加适合。因此只需要将传入<code>acquire_lock</code>中的lockname进行对应的修改就能实现粒度的更改。</p><p>dogpile效应：执行事务所需的时间越长，就会有越多待处理的事务互相重叠，这种重叠增加了执行单个事务所需的时间，并使得那些带有时间限制的事务失败的几率大幅上升，最终导致所有事务执行失败的几率和进行重试的几率都大幅地上升。典型例子就是用户等得不耐烦，重复发起请求，服务器压力飙升。</p><p>在完成了锁的创建与失效之后，就要考虑锁的超时处理了。为了保证客户端即使崩溃，也能正确释放锁，需要在其他客户端尝试请求锁且失败时，检查这一把锁的过期时间，如果没有过期就为其设置超时时间。这样，即使客户端在获取锁后，设置过期时间前崩溃了，也不会导致某一把锁从此无法获取。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">acquire_lock_with_timeout</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> lockname<span class="token punctuation">,</span> acquire_timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> lock_timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    identifier <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    lockname <span class="token operator">=</span> <span class="token string">'lock:'</span> <span class="token operator">+</span> lockname    lock_timeout <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>lock_timeout<span class="token punctuation">)</span><span class="token punctuation">)</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> acquire_timeout    <span class="token keyword">while</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> end<span class="token punctuation">:</span>        <span class="token keyword">if</span> conn<span class="token punctuation">.</span>setnx<span class="token punctuation">(</span>lockname<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span><span class="token punctuation">:</span>            conn<span class="token punctuation">.</span>expire<span class="token punctuation">(</span>lockname<span class="token punctuation">,</span> lock_timeout<span class="token punctuation">)</span>            <span class="token keyword">return</span> identifier        <span class="token keyword">elif</span> <span class="token keyword">not</span> conn<span class="token punctuation">.</span>ttl<span class="token punctuation">(</span>lockname<span class="token punctuation">)</span><span class="token punctuation">:</span>            conn<span class="token punctuation">.</span>expire<span class="token punctuation">(</span>lockname<span class="token punctuation">,</span> lock_timeout<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">.001</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用这个新的锁，我们就可以重新实现上面的自动补全功能，每有用户需要自动补全时就直接锁定整个联系人列表，避免多个用户查询导致不断的冲突重试。</p><h3 id="计数信号量"><a href="#计数信号量" class="headerlink" title="计数信号量"></a>计数信号量</h3><p>计数信号量用于限制一个资源最多能被多少进程同时访问，用于限定能被同时使用的资源数量。客户端获取信号量与锁的方式相同，区别在于获取不到锁会等待，而获取不到信号量则会直接返回结果。<br>这里使用有序队列搭配时间戳实现信号量的获取限制，程序为每一个进程生成一个唯一表示作为有序集合的成员，时间戳则为分数。若成员在指定排名之内则能够获取到信号量，否则删除自身在有序集合中的记录并返回空。同时程序在向集合中添加前会先清除过期记录。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">acquire_semaphore</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> semname<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    identidier <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    now <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zremrangebyscore<span class="token punctuation">(</span>semname<span class="token punctuation">,</span> <span class="token string">'-inf'</span><span class="token punctuation">,</span> now <span class="token operator">-</span> timeout<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span>semname<span class="token punctuation">,</span> identidier<span class="token punctuation">,</span> now<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zrank<span class="token punctuation">(</span>semname<span class="token punctuation">,</span> identidier<span class="token punctuation">)</span>    <span class="token keyword">if</span> pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> limit<span class="token punctuation">:</span>        <span class="token keyword">return</span> identidier    conn<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span>semname<span class="token punctuation">,</span> identidier<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token keyword">def</span> <span class="token function">release_semaphore</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> semname<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> conn<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span>semname<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面是一个非常简单的信号量实现，它的缺陷在于会默认所有发起请求的客户端的系统时间都是一样的。如果系统A比系统B快10ms，只要B在A获取信号量的10ms以内尝试获取信号量，就能窃取到A的信号量。因类似情况导致锁获取结果不同的锁或信号量，我们称他们为不公平的锁/信号量。</p><p>为了让信号量尽量公平，我们可以在程序中再添加一个计数器，每当有一个进程尝试来获取信号量就将计数器值自增并赋给对应进程。在分配信号量时，根据进程获得的计数器值来确定。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">acquire_fair_semaphore</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> semname<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    identifier <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    czset <span class="token operator">=</span> semname <span class="token operator">+</span> <span class="token string">':owner'</span>    ctr <span class="token operator">=</span> semname <span class="token operator">+</span> <span class="token string">':counter'</span>    now <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zremrangebyscore<span class="token punctuation">(</span>semname<span class="token punctuation">,</span> <span class="token string">'-inf'</span><span class="token punctuation">,</span> now <span class="token operator">-</span> timeout<span class="token punctuation">)</span> <span class="token comment"># 将已经超时的信号量删除</span>    pipeline<span class="token punctuation">.</span>zinterstore<span class="token punctuation">(</span>czset<span class="token punctuation">,</span> <span class="token punctuation">{</span>czset<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> semname<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment"># czset中只会保留还在semaphore中的记录</span>    pipeline<span class="token punctuation">.</span>incr<span class="token punctuation">(</span>ctr<span class="token punctuation">)</span>    counter <span class="token operator">=</span> pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span>semname<span class="token punctuation">,</span> identifier<span class="token punctuation">,</span> now<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span>czset<span class="token punctuation">,</span> identifier<span class="token punctuation">,</span> counter<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zrank<span class="token punctuation">(</span>czset<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span>    <span class="token keyword">if</span> pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> limit<span class="token punctuation">:</span>        <span class="token keyword">return</span> identifier    pipeline<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span>semname<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span>czset<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token keyword">def</span> <span class="token function">release_fair_semaphore</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> semname<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span><span class="token punctuation">:</span>    pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span>semname<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span>semname <span class="token operator">+</span> <span class="token string">':owner'</span><span class="token punctuation">,</span> identifier<span class="token punctuation">)</span>    <span class="token keyword">return</span> pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">acquire_fair_semaphore</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> semname<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    identifier <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    czset <span class="token operator">=</span> semname <span class="token operator">+</span> <span class="token string">':owner'</span>    ctr <span class="token operator">=</span> semname <span class="token operator">+</span> <span class="token string">':counter'</span>    now <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zremrangebyscore<span class="token punctuation">(</span>semname<span class="token punctuation">,</span> <span class="token string">'-inf'</span><span class="token punctuation">,</span> now <span class="token operator">-</span> timeout<span class="token punctuation">)</span> <span class="token comment"># 将已经超时的信号量删除</span>    pipeline<span class="token punctuation">.</span>zinterstore<span class="token punctuation">(</span>czset<span class="token punctuation">,</span> <span class="token punctuation">{</span>czset<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> semname<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment"># czset中只会保留还在semaphore中的记录</span>    pipeline<span class="token punctuation">.</span>incr<span class="token punctuation">(</span>ctr<span class="token punctuation">)</span>    counter <span class="token operator">=</span> pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span>semname<span class="token punctuation">,</span> identifier<span class="token punctuation">,</span> now<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span>czset<span class="token punctuation">,</span> identifier<span class="token punctuation">,</span> counter<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zrank<span class="token punctuation">(</span>czset<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span>    <span class="token keyword">if</span> pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> limit<span class="token punctuation">:</span>        <span class="token keyword">return</span> identifier    pipeline<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span>semname<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span>czset<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token keyword">def</span> <span class="token function">release_fair_semaphore</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> semname<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span><span class="token punctuation">:</span>    pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span>semname<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span>semname <span class="token operator">+</span> <span class="token string">':owner'</span><span class="token punctuation">,</span> identifier<span class="token punctuation">)</span>    <span class="token keyword">return</span> pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于这里我们只给信号量设置了10秒的超时时间，如果交易过程超过了10s，那就需要及时对信号量进行刷新。同时还需要注意如果信号量已经因为过期被删除，就需要拒绝调用这的请求。<br>在长时间使用信号量的时候，必须以合适的频率对信号量进行刷新，避免超时导致信号量被删除。<br>因为我们在上面区分开了超时序列和计数序列，计数序列的内容根据超时序列进行同步，因此刷新时只需要更新超时序列，确保计数序列中的对应记录不被删除即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">refresh_fair_semaphore</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> semname<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> conn<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span>semname<span class="token punctuation">,</span> identifier<span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        release_fair_semaphore<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> semname<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在完成以上功能之后，就要开始考虑消除竞争条件了。下面想象一下这样的场景：线程A首先完成了计数器的自增操作，但在线程A将自己的标识符加入有序集合之前，B完成了自增操作和添加操作，抢先一步拿到信号量。这样，虽然线程A的计数排名靠前，但因为还没有加入集合，所以信号量归B。之后信号量A将自己加入集合，检查排名发现自己满足条件，于是便能直接窃取B已经获取的信号量。而B不会收到任何提示，只会在尝试删除信号量或刷新信号量时发现。</p><p>想要解决上述问题，首先要明确问题的根源：获取信号量的过程不是原子性的，是可再分的，因此在并发环境下它就是线程不安全的。而想让一个线程不安全的操作变得线程安全，最简单的方法就是加锁，加锁是一个原子性操作，获取锁之后的操作都将是线程安全的。因此只需要在获取信号量之前，先尝试获取对应信号量的锁。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">acquire_semaphore_with_lock</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> semname<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">.01</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    identifier <span class="token operator">=</span> market<span class="token punctuation">.</span>acquire_lock_with_timeout<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> semname<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>    <span class="token keyword">if</span> identifier<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> acquire_fair_semaphore<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> semname<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span>        <span class="token keyword">finally</span><span class="token punctuation">:</span>            market<span class="token punctuation">.</span>release_lock<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> semname<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a>任务队列</h3><p>在处理请求时，对于那些执行时间较长的操作，可以放入队列，之后再对队列进行处理。这样用户可以及时得到反馈，服务器也不会因某个任务而阻塞。<br>任务队列的应用非常广泛，最典型的就是给用户发送邮件、验证码。</p><h4 id="先进先出队列"><a href="#先进先出队列" class="headerlink" title="先进先出队列"></a>先进先出队列</h4><p>这里先介绍先进先出队列，用发送邮件当作例子。由于发送邮件都有较高的延迟，且容易出现失败的情况，因此将它交给队列处理会是个好选择。将要发送的邮件信息先存储在队列当中，当要发送时，构建一个工作进程以并行的方式一次发送多封邮件。<br>这里使用列表来存储邮件信息，用<code>RPUSH</code>添加邮件，<code>BLPOP</code>提取出要发送的邮件。由于邮件不一定每时每刻都有，因此使用阻塞队列可以避免程序过多次重试。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">process_sold_email_queue</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> QUIT<span class="token punctuation">:</span>        packed <span class="token operator">=</span> conn<span class="token punctuation">.</span>blpop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'queue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> packed<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        to_send <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>packed<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            fetch_data_and_send_sold_email<span class="token punctuation">(</span>to_send<span class="token punctuation">)</span>        <span class="token keyword">except</span> EmailSenderError <span class="token keyword">as</span> e<span class="token punctuation">:</span>            log_error<span class="token punctuation">(</span><span class="token string">"Failed to send"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            log_success<span class="token punctuation">(</span><span class="token string">"Send sold email"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是队列的最简单的一种实现方式，接下来尝试给他添加优先级。<br>最简单的一种方式就是用不同的队列表示不同的优先级，并按顺序将他们放入列表传递给函数。Redis的<code>BLPOP</code>命令会在接收到的队列列表中按顺序从最先给他提供数据的列表中抽取对象。</p><h4 id="延迟队列"><a href="#延迟队列" class="headerlink" title="延迟队列"></a>延迟队列</h4><p>通常应用程序还会希望能让某个任务被延迟执行，例如B站发送视频设置准点发送就可以交给延迟队列来处理。这里最容易想到的一种方法就是使用有序集合存储任务的执行时间戳，定期扫描集合中有没有到期的任务要执行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">execute_later</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> queue<span class="token punctuation">,</span> name<span class="token punctuation">,</span> args<span class="token punctuation">,</span> delay<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    identifier <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    item <span class="token operator">=</span> json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token punctuation">[</span>identifier<span class="token punctuation">,</span> queue<span class="token punctuation">,</span> name<span class="token punctuation">,</span> args<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> delay <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        conn<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">'delayed:'</span><span class="token punctuation">,</span> item<span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> delay<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        conn<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">'queue:'</span> <span class="token operator">+</span> queue<span class="token punctuation">,</span> item<span class="token punctuation">)</span>    <span class="token keyword">return</span> identifier<span class="token keyword">def</span> <span class="token function">poll_queue</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> QUIT<span class="token punctuation">:</span>        item <span class="token operator">=</span> conn<span class="token punctuation">.</span>zrange<span class="token punctuation">(</span><span class="token string">'delayed:'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> withscores<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> item <span class="token keyword">or</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">.01</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span>        item <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        identifier<span class="token punctuation">,</span> queue<span class="token punctuation">,</span> function<span class="token punctuation">,</span> args <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        locked <span class="token operator">=</span> lock<span class="token punctuation">.</span>acquire_lock_with_timeout<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> locked<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> conn<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span><span class="token string">'delayed:'</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>            conn<span class="token punctuation">.</span>rpush<span class="token punctuation">(</span><span class="token string">'queue:'</span> <span class="token operator">+</span> queue<span class="token punctuation">,</span> item<span class="token punctuation">)</span>        lock<span class="token punctuation">.</span>release_lock<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> identifier<span class="token punctuation">,</span> locked<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现时要注意的一点是，在转移任务时要给对应的任务加锁，避免某个任务被多次执行。</p><h3 id="消息拉取"><a href="#消息拉取" class="headerlink" title="消息拉取"></a>消息拉取</h3><p>当要实现两个或多个客户端之间的相互通信时，常常使用Redis的订阅发布功能，但这种实现必须要求收发方同时在线，一旦出现连接问题，发送的消息就会丢失。此外，如果客户端速度缓慢，也会拖慢Redis的运行效率。<br>基于以上问题，我们可以实现一个类似邮箱的功能，即使用户不在线也不影响发送消息，连接断开也不会导致消息丢失。<br>具体的实现思路非常简单，用一个队列存储用户的未读消息，每当有消息要发送，就将它放入队列，用户通过请求获取存储在队列中的消息。发送方也可以通过这个队列明确消息是否已被收到。</p><p>但是只实现一个一对一的消息收发肯定是不够的，接下来我们尝试实现一个一对多的消息拉取。<br>首先要明确存储的信息：消息需要存储在一个队列中，通过命名空间与指定群组绑定。还需要一个集合存储群组中的成员,其分值为该成员最后阅读的消息方便后续清理所有用户都阅读过的消息。这里还另外用集合存储了用户在各个群组最后的已读消息，方便用户筛选新的消息。<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/redis/NeatReader-1661760163701.png"></p><p>然后就是创建群组的逻辑：程序会为当前群聊生成一个编号，然后初始化对应的成员集合以及已读集合，将对应成员的已读集合中群组的分值设为0. 最后发送初始化消息.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">create_chat</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> sender<span class="token punctuation">,</span> recipients<span class="token punctuation">,</span> message<span class="token punctuation">,</span> chat_id<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    chat_id <span class="token operator">=</span> chat_id <span class="token keyword">or</span> conn<span class="token punctuation">.</span>incr<span class="token punctuation">(</span><span class="token string">'ids:chat'</span><span class="token punctuation">)</span>    recipients<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sender<span class="token punctuation">)</span>    recipients_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">for</span> r <span class="token keyword">in</span> recipients<span class="token punctuation">)</span>    pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">'chat:'</span> <span class="token operator">+</span> chat_id<span class="token punctuation">,</span> <span class="token operator">**</span>recipients_dict<span class="token punctuation">)</span>    <span class="token keyword">for</span> r <span class="token keyword">in</span> recipients<span class="token punctuation">:</span>        pipeline<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">'seen:'</span> <span class="token operator">+</span> r<span class="token punctuation">,</span> chat_id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> send_message<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> chat_id<span class="token punctuation">,</span> sender<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">send_message</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> chat_id<span class="token punctuation">,</span> sender<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">:</span>    identifier <span class="token operator">=</span> lock<span class="token punctuation">.</span>acquire_lock<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token string">'chat:'</span> <span class="token operator">+</span> chat_id<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> identifier<span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"Couldn't get the lock"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        mid <span class="token operator">=</span> conn<span class="token punctuation">.</span>incr<span class="token punctuation">(</span><span class="token string">"ids:"</span> <span class="token operator">+</span> chat_id<span class="token punctuation">)</span>        ts <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        packed <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string">'id'</span><span class="token punctuation">:</span> mid<span class="token punctuation">,</span>            <span class="token string">'ts'</span><span class="token punctuation">:</span> ts<span class="token punctuation">,</span>            <span class="token string">'sender'</span><span class="token punctuation">:</span> sender<span class="token punctuation">,</span>            <span class="token string">'message'</span><span class="token punctuation">:</span> message        <span class="token punctuation">}</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">'msgs:'</span> <span class="token operator">+</span> chat_id<span class="token punctuation">,</span> packed<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        lock<span class="token punctuation">.</span>release_lock<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token string">'chat:'</span> <span class="token operator">+</span> chat_id<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span>    <span class="token keyword">return</span> chat_id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里只有发送消息的部分需要注意:需要用锁来包裹发送消息的代码. 一般来说，当程序使用一个来自Redis的值去构建另一个将要被添加到Redis里面的值时，就需要使用锁或者由<code>WATCH</code>、<code>MULTI</code>和<code>EXEC</code>组成的事务来消除竞争条件。</p><p>接下来是获取用户消息,由于我们已经在已读集合中存储了用户读取的最后一条消息的id,可以很轻易的构建出搜索范围.用户拉取到最新消息之后,更新对应的已读列表,并根据当前群组已读消息的最小id清理被所有用户阅读过的消息.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fetch_pending_message</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> recipient<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 获取当前用户所有已经阅读过的信息</span>    seen <span class="token operator">=</span> conn<span class="token punctuation">.</span>zrange<span class="token punctuation">(</span><span class="token string">'seen:'</span> <span class="token operator">+</span> recipient<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> withscores<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># 获取用户所处群组所有的未读信息</span>    <span class="token keyword">for</span> chat_id<span class="token punctuation">,</span> seen_id <span class="token keyword">in</span> seen<span class="token punctuation">:</span>        pipeline<span class="token punctuation">.</span>zrangebyscore<span class="token punctuation">(</span>            <span class="token string">'msgs:'</span> <span class="token operator">+</span> chat_id<span class="token punctuation">,</span> seen_id <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'inf'</span>        <span class="token punctuation">)</span>    chat_info <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>seen<span class="token punctuation">,</span> pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>chat_id<span class="token punctuation">,</span> seen_id<span class="token punctuation">)</span><span class="token punctuation">,</span> messages<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>chat_info<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> messages<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token comment"># 反序列化所有的未读消息</span>        messages<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span>loads<span class="token punctuation">,</span> messages<span class="token punctuation">)</span>        seen_id <span class="token operator">=</span> messages<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span>        <span class="token comment"># 更新用户看过的最后一条消息</span>        conn<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">'chat:'</span> <span class="token operator">+</span> chat_id<span class="token punctuation">,</span> recipient<span class="token punctuation">,</span> seen_id<span class="token punctuation">)</span>        <span class="token comment"># 获取被所有人读过的消息的最小id</span>        min_id <span class="token operator">=</span> conn<span class="token punctuation">.</span>zrange<span class="token punctuation">(</span>            <span class="token string">'chat:'</span> <span class="token operator">+</span> chat_id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> withscores<span class="token operator">=</span><span class="token boolean">True</span>        <span class="token punctuation">)</span>        <span class="token comment"># 更新群组中的最后一条已读消息</span>        pipeline<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">'seen:'</span> <span class="token operator">+</span> recipient<span class="token punctuation">,</span> chat_id<span class="token punctuation">,</span> seen_id<span class="token punctuation">)</span>        <span class="token keyword">if</span> min_id<span class="token punctuation">:</span>            pipeline<span class="token punctuation">.</span>zremrangebyscore<span class="token punctuation">(</span>                <span class="token string">'msgs:'</span> <span class="token operator">+</span> chat_id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> min_id<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token punctuation">)</span>        <span class="token comment"># 组装需要返回给用户的消息</span>        chat_info<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>chat_id<span class="token punctuation">,</span> messages<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> chat_info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后是加入以及退出群组<br>当用户要加入群组时,需要把他添加到群组的有序集合,并更新用户已读集合.由于新加入群组必然会拉取最新的消息,因此将对应的已读id修改为最新的id.<br>在删除用户时,先将用户在对应群组的数据删除.然后检查群组人数,如果没有人了就直接将群组删除.如果还有人就根据最新的已读id删除所有被阅读过的消息.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">leave_chat</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> chat_id<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">:</span>    pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span><span class="token string">'chat:'</span> <span class="token operator">+</span> chat_id<span class="token punctuation">,</span> user<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span><span class="token string">'seen:'</span> <span class="token operator">+</span> user<span class="token punctuation">,</span> chat_id<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zcard<span class="token punctuation">(</span><span class="token string">'chat:'</span> <span class="token operator">+</span> chat_id<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        pipeline<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">'msgs:'</span> <span class="token operator">+</span> chat_id<span class="token punctuation">)</span>        pipeline<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">'ids:'</span> <span class="token operator">+</span> chat_id<span class="token punctuation">)</span>        pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        oldest <span class="token operator">=</span> conn<span class="token punctuation">.</span>zrange<span class="token punctuation">(</span><span class="token string">'chat:'</span> <span class="token operator">+</span> chat_id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> withscores<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        conn<span class="token punctuation">.</span>zremrangebyscore<span class="token punctuation">(</span><span class="token string">'msgs:'</span> <span class="token operator">+</span> chat_id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> oldest<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基于搜索的应用程序"><a href="#基于搜索的应用程序" class="headerlink" title="基于搜索的应用程序"></a>基于搜索的应用程序</h2><h3 id="使用Redis进行搜索"><a href="#使用Redis进行搜索" class="headerlink" title="使用Redis进行搜索"></a>使用Redis进行搜索</h3><p>在讲解如何使用Redis构建搜索引擎之前，我们首先要了解一下基本的搜索原理。要想获得比扫描文档更快的搜索速度，一个显而易见的方法就是构建索引，不过通常情况下的索引都是帮助快速从文档中找到对应内容，但这里要建的索引，是根据它的内容标记对应的文档，因此称为反向索引。<br>在Redis中，使用集合或有序集合来存储每一个关键字对应的文档，这样在搜索的时候就能根据关键字对应的文档集合计算交并集，快速的获取查询结果。<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/redis/NeatReader-1661844354039.png" alt="反向索引"></p><h4 id="基本索引"><a href="#基本索引" class="headerlink" title="基本索引"></a>基本索引</h4><p>在给程序创建索引之前，首先要对文档进行标记化(tokenization)。这里我们采取一种非常简单的标记化方法：认定单词只能由英文字母和单引号组成，并且每个单词至少有两个字符长。<br>标记化的一个附加步骤，就是移除内容中的非用词(stop word)，这些词都不能提供有效的信息，剔除他们可以有效提升程序性能并且减小索引体积。<br>建立索引的基本思路就是：利用正则表达式找到匹配的单词，筛选出长度符合条件并且不属于非用词的部分，在他们对应的集合中加上文档的id</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">WORDS_RE <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">"[a-z']{2,}"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">tokenize</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    words <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token keyword">match</span> <span class="token keyword">in</span> WORDS_RE<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>content<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        word <span class="token operator">=</span> <span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">:</span>            words<span class="token punctuation">.</span>add<span class="token punctuation">(</span>word<span class="token punctuation">)</span>    <span class="token keyword">return</span> words <span class="token operator">-</span> STOP_WORDS<span class="token keyword">def</span> <span class="token function">index_document</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> docid<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    words <span class="token operator">=</span> tokenize<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>        pipeline<span class="token punctuation">.</span>sadd<span class="token punctuation">(</span><span class="token string">'idx:'</span> <span class="token operator">+</span> word<span class="token punctuation">,</span> docid<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果文档的索引会变化，则可以在标记化的过程中将所有的符合条件的单词以JSON字符串格式存储进Redis中，当文档变化重新构建索引时，就可以根据里面的内容剔除掉失效的索引。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">index_document</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> docid<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    words_json <span class="token operator">=</span> conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'words:'</span> <span class="token operator">+</span> docid<span class="token punctuation">)</span>    words <span class="token operator">=</span> tokenize<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token keyword">if</span> words_json<span class="token punctuation">:</span>        old_words <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>words_json<span class="token punctuation">)</span>        invalid_words <span class="token operator">=</span> old_words <span class="token operator">-</span> words    pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> invalid_words<span class="token punctuation">:</span>        pipeline<span class="token punctuation">.</span>srem<span class="token punctuation">(</span><span class="token string">'idx:'</span> <span class="token operator">+</span> word<span class="token punctuation">,</span> docid<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> pipeline<span class="token punctuation">.</span>scard<span class="token punctuation">(</span><span class="token string">'idx:'</span> <span class="token operator">+</span> word<span class="token punctuation">)</span><span class="token punctuation">:</span>            pipeline<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token string">'idx:'</span> <span class="token operator">+</span> word<span class="token punctuation">)</span>    <span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>        pipeline<span class="token punctuation">.</span>sadd<span class="token punctuation">(</span><span class="token string">'idx:'</span> <span class="token operator">+</span> word<span class="token punctuation">,</span> docid<span class="token punctuation">)</span>    conn<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'words:'</span> <span class="token operator">+</span> docid<span class="token punctuation">,</span> json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后要考虑的就是搜索结果的生成操作，对于简单的搜索可以直接使用交集完成。但用户有时会希望使用同义词查询或是剔除掉包含指定单词的搜索结果，这就要用到并集和差集。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_set_common</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> method<span class="token punctuation">,</span> names<span class="token punctuation">,</span> ttl<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> execute<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">id</span> <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> execute <span class="token keyword">else</span> conn    names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'idx:'</span> <span class="token operator">+</span> name <span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">]</span>    <span class="token builtin">getattr</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'idx:'</span> <span class="token operator">+</span> <span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token operator">*</span>names<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>expire<span class="token punctuation">(</span><span class="token string">'idx:'</span> <span class="token operator">+</span> <span class="token builtin">id</span><span class="token punctuation">,</span> ttl<span class="token punctuation">)</span>    <span class="token keyword">if</span> execute<span class="token punctuation">:</span>        pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">id</span><span class="token keyword">def</span> <span class="token function">intersect</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> items<span class="token punctuation">,</span> ttl<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> _execute<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> _set_common<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token string">'sinterstore'</span><span class="token punctuation">,</span> items<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> _execute<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">union</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> items<span class="token punctuation">,</span> ttl<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> _execute<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> _set_common<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token string">'sunionstore'</span><span class="token punctuation">,</span> items<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> _execute<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">difference</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> items<span class="token punctuation">,</span> ttl<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> _execute<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> _set_common<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token string">'sdiffstore'</span><span class="token punctuation">,</span> items<span class="token punctuation">,</span> ttl<span class="token punctuation">,</span> _execute<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来一步就是进行语法分析，这里规定对于以+为前缀的单词，表示这一个单词是之前单词的同义词，以-为前缀的单词表示要去掉包含该单词的搜索结果。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">:</span>    unwanted <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token builtin">all</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    current <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token keyword">match</span> <span class="token keyword">in</span> QUERY_RE<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span>query<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        word <span class="token operator">=</span> <span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>        prefix <span class="token operator">=</span> word<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> prefix <span class="token keyword">in</span> <span class="token string">'+-'</span><span class="token punctuation">:</span>            word <span class="token operator">=</span> word<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            prefix <span class="token operator">=</span> <span class="token boolean">None</span>        word <span class="token operator">=</span> word<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token keyword">or</span> word <span class="token keyword">in</span> STOP_WORDS<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> prefix <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">:</span>            unwanted<span class="token punctuation">.</span>add<span class="token punctuation">(</span>word<span class="token punctuation">)</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> current <span class="token keyword">and</span> <span class="token keyword">not</span> prefix<span class="token punctuation">:</span>            <span class="token builtin">all</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>            current <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        current<span class="token punctuation">.</span>add<span class="token punctuation">(</span>word<span class="token punctuation">)</span>    <span class="token keyword">if</span> current<span class="token punctuation">:</span>        <span class="token builtin">all</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">all</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span>unwanted<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后就是实现查找功能了，具体思路是：对于每一个同义词列表都进行并运算后将其对应的临时集合id添加到接下来的运算集合中，对于只有一个元素的集合则直接添加。将收集到的运算集合进行交集运算获得结果，如果没有要提出的关键字就直接返回，如果有则再将他们剔除</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">parse_and_search</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> query<span class="token punctuation">,</span> ttl<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">all</span><span class="token punctuation">,</span> unwanted <span class="token operator">=</span> parse<span class="token punctuation">(</span>query<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">all</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    to_intersect <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> syn <span class="token keyword">in</span> <span class="token builtin">all</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>syn<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>            to_intersect<span class="token punctuation">.</span>append<span class="token punctuation">(</span>union<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> syn<span class="token punctuation">,</span> ttl<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            to_intersect<span class="token punctuation">.</span>append<span class="token punctuation">(</span>syn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>to_intersect<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>        intersect_result <span class="token operator">=</span> intersect<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> to_intersect<span class="token punctuation">,</span> ttl<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        intersect_result <span class="token operator">=</span> to_intersect<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> unwanted<span class="token punctuation">:</span>        unwanted<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> intersect_result<span class="token punctuation">)</span>        <span class="token keyword">return</span> difference<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> unwanted<span class="token punctuation">,</span> ttl<span class="token punctuation">)</span>    <span class="token keyword">return</span> intersect_result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过单纯找出搜索结果还不够，最好可以根据关联度对搜索结果进行排序，方便用户查找需要的消息。这里使用最简单的一种关联度排序方式：根据文章的最后更新时间。<br>关联度排序的实现可以使用Redis的sort函数，它可以根据外部数据对结果进行排序。<br>对于排序生成的结果可以让他们的生存时间更长一点</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">search_and_sort</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> query<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> ttl<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> sort<span class="token operator">=</span><span class="token string">'-updated'</span><span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    desc <span class="token operator">=</span> sort<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>    sort <span class="token operator">=</span> sort<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>    by <span class="token operator">=</span> <span class="token string">'kd:doc:*-&gt;'</span> <span class="token operator">+</span> sort    alpha <span class="token operator">=</span> sort <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'updated'</span><span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'created'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">id</span> <span class="token keyword">and</span> <span class="token keyword">not</span> conn<span class="token punctuation">.</span>expire<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> ttl<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 如果用户提供了id，并且还没有过期就延长它的生存周期</span>        <span class="token builtin">id</span> <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">id</span><span class="token punctuation">:</span> <span class="token comment"># 如果没有提供，就代表还没完成搜索</span>        <span class="token builtin">id</span> <span class="token operator">=</span> parse_and_search<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> query<span class="token punctuation">,</span> ttl<span class="token punctuation">)</span>    pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>scard<span class="token punctuation">(</span><span class="token string">'idx:'</span> <span class="token operator">+</span> <span class="token builtin">id</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token string">'idx:'</span> <span class="token operator">+</span> <span class="token builtin">id</span><span class="token punctuation">,</span> by<span class="token operator">=</span>by<span class="token punctuation">,</span> alpha<span class="token operator">=</span>alpha<span class="token punctuation">,</span> desc<span class="token operator">=</span>desc<span class="token punctuation">,</span> start<span class="token operator">=</span>start<span class="token punctuation">,</span> num<span class="token operator">=</span>num<span class="token punctuation">)</span>    results <span class="token operator">=</span> pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="有序索引"><a href="#有序索引" class="headerlink" title="有序索引"></a>有序索引</h4><p>但在真实的业务场景中，根据单一的指标进行关联度分析显然是不合理的，我们需要一种能够将各种指标按照指定的权重结合起来计算关联度的方法。<br>Redis的<code>ZINTERSTORE</code>命令可以将传入的集合，按照指定的权重进行聚合，这里我们让它按照计算各种指标的权重并相加。为了达成这个目的，还需要添加两个集合，一个统计投票数，一个统计更新时间。（ZINTERSTORE也可以接收普通集合，他们元素的分值都设为1）<br>解决思路：</p><ul><li><p>首先，如果程序接收到id并且该id没有过期，说明不需要再额外做一次查询，只需要将id对应的键的生命周期延长。</p></li><li><p>如果没有id或id过期，则再进行一次基本查询，获取到临时集合的id</p></li><li><p>接下来设置各个集合的权重，id对应的集合权重为0，因为该集合只负责与投票集合和更新集合匹配，投票集合以及更新集合的权重根据参数配置。之后将他们交给计算方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">search_and_zsort</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> query<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> ttl<span class="token operator">=</span><span class="token number">300</span><span class="token punctuation">,</span> update<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> vote<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> desc<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">if</span> <span class="token builtin">id</span> <span class="token keyword">and</span> <span class="token keyword">not</span> conn<span class="token punctuation">.</span>expire<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> ttl<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token builtin">id</span> <span class="token operator">=</span> <span class="token boolean">None</span>  <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">id</span><span class="token punctuation">:</span>      <span class="token builtin">id</span> <span class="token operator">=</span> parse_and_search<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> query<span class="token punctuation">,</span> ttl<span class="token operator">=</span>ttl<span class="token punctuation">)</span>      scored_search <span class="token operator">=</span> <span class="token punctuation">{</span>          <span class="token builtin">id</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>          <span class="token string">'sort:update'</span><span class="token punctuation">:</span> update<span class="token punctuation">,</span>          <span class="token string">'sort:votes'</span><span class="token punctuation">:</span> vote      <span class="token punctuation">}</span>      <span class="token builtin">id</span> <span class="token operator">=</span> zintersect<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> scored_search<span class="token punctuation">,</span> ttl<span class="token punctuation">)</span>  pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> desc<span class="token punctuation">:</span>      pipeline<span class="token punctuation">.</span>zrevrange<span class="token punctuation">(</span><span class="token string">'idx:'</span> <span class="token operator">+</span> <span class="token builtin">id</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> start <span class="token operator">+</span> num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">else</span><span class="token punctuation">:</span>      pipeline<span class="token punctuation">.</span>zrange<span class="token punctuation">(</span><span class="token string">'idx:'</span> <span class="token operator">+</span> <span class="token builtin">id</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> start <span class="token operator">+</span> num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  results <span class="token operator">=</span> pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> results<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>计算方法接收到参数后，将他们权重表中的键修改为Redis中对应的键，之后调用对应的方法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_zset_common</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> method<span class="token punctuation">,</span> scores<span class="token punctuation">,</span> ttl<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token builtin">id</span> <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  execute <span class="token operator">=</span> kw<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'_execute'</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>  pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">if</span> execute <span class="token keyword">else</span> conn  <span class="token keyword">for</span> key <span class="token keyword">in</span> scores<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      scores<span class="token punctuation">[</span><span class="token string">'idx:'</span> <span class="token operator">+</span> key<span class="token punctuation">]</span> <span class="token operator">=</span> scores<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>key<span class="token punctuation">)</span>  <span class="token builtin">getattr</span><span class="token punctuation">(</span>pipeline<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'idx:'</span> <span class="token operator">+</span> <span class="token builtin">id</span><span class="token punctuation">,</span> scores<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>  pipeline<span class="token punctuation">.</span>expire<span class="token punctuation">(</span><span class="token string">'idx:'</span> <span class="token operator">+</span> <span class="token builtin">id</span><span class="token punctuation">,</span> ttl<span class="token punctuation">)</span>  <span class="token keyword">if</span> execute<span class="token punctuation">:</span>      pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token builtin">id</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>def zintersect(conn, items, ttl=30, **kw):<br>    return _zset_common(conn, ‘zinterstore’, dict(items), ttl, **kw)</p><p>def zunion(conn, items, ttl=30, **kw):<br>    return _zset_common(conn, ‘zunionstore’, dict(items), ttl, **kw)</p><pre class="line-numbers language-none"><code class="language-none">如果要让Redis实现非数值排序，那要做的工作显然就是将对应的非数值按照一定规则转换为数值。当我们想要进行字符串排序时，可以将每个字母转换成对应的数字，ASCII码显然是个不错的选择。不过这也同样有所限制，Redis的有序集合的分值使用64位浮点型存储，最多处理8个字符。这里的例子只进行前6位字母的排序。```pythondef string_to_score(string, ignore_case=False):    if ignore_case:        string = string.lower()    pieces = map(ord, string[:6])    while len(pieces) &lt; 6:        pieces.append(-1)    score = 0    for piece in pieces:        score = score * 257 + piece + 1    return score * 2 + (len(string) &gt; 6)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有了将字符串转换为分值的启发，之前的自动补全功能也能进行进一步优化。如果我们将人名信息转换为分值，那么在查询时就不必再建立查找范围，只需将原先用于建立查找范围的边界值转换为分值，然后调用zrangebyscore即可。<br>此外，如果我们修改字符串转换的规则，例如，只考虑小写字母的匹配，那么每一个字符只需要使用5个位即可完成存储，这样就能容纳下更多的字符进行前缀匹配。</p><h3 id="职位搜索"><a href="#职位搜索" class="headerlink" title="职位搜索"></a>职位搜索</h3><p>本节将着手解决职位搜索问题，更好的找到匹配求职者现有技能的职位。<br>首先最简单的一种实现方式就是将职位所需的技能要求都添加到对应的集合中，当求职者要查看是否匹配时，就将职位的技能集合和求职者的技能集合进行差集计算。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add_job</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> job_id<span class="token punctuation">,</span> required_skills<span class="token punctuation">)</span><span class="token punctuation">:</span>    conn<span class="token punctuation">.</span>sadd<span class="token punctuation">(</span><span class="token string">'job:'</span> <span class="token operator">+</span> job_id<span class="token punctuation">,</span> <span class="token operator">*</span>required_skills<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">is_quialified</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> job_id<span class="token punctuation">,</span> candidate_skills<span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>sadd<span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token operator">*</span>candidate_skills<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>expire<span class="token punctuation">(</span>temp<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>sdiff<span class="token punctuation">(</span><span class="token string">'job:'</span> <span class="token operator">+</span> job_id<span class="token punctuation">,</span> temp<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">not</span> pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个实现方法非常简单，但是缺点也很明显，它需要对每个职位都进行单独的检查，十分影响后续的性能扩展。</p><p>除了这种最简单的搜索方法之外，还可以通过搜索的方式查找到合适的职位，不过他对Redis数据结构的操作和平常的方法并不一样。<br>首先我们像建立反向索引一样，在每一个技能集合下存储需要这个技能的职位id，然后将每个职位需要的技能数存储在一个有序集合中。当程序接收到用户传入的技能组后，它会将涉及的技能集合进行并集运算，由于集合的分值默认位1，因此这样生成的结果就是职位id与求职者满足该职位要求的技能的数量。然后再将这个临时集合与存储了职位要求技能数的结合进行交集运算，一个集合的权重为1，另一个为-1，最后生成的结果中，分数为0的职位就是满足要求的职位。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">index_job</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> job_id<span class="token punctuation">,</span> skills<span class="token punctuation">)</span><span class="token punctuation">:</span>    pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> skill <span class="token keyword">in</span> skills<span class="token punctuation">:</span>        pipeline<span class="token punctuation">.</span>sadd<span class="token punctuation">(</span><span class="token string">'idx:skill:'</span> <span class="token operator">+</span> skill<span class="token punctuation">,</span> job_id<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">'idx:jobs:req'</span><span class="token punctuation">,</span> job_id<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>skills<span class="token punctuation">)</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">find_jobs</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> candidate_skills<span class="token punctuation">)</span><span class="token punctuation">:</span>    skills <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> skill <span class="token keyword">in</span> <span class="token builtin">set</span><span class="token punctuation">(</span>candidate_skills<span class="token punctuation">)</span><span class="token punctuation">:</span>        skills<span class="token punctuation">[</span><span class="token string">'skill:'</span> <span class="token operator">+</span> skill<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    job_scores <span class="token operator">=</span> search<span class="token punctuation">.</span>zunion<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> skills<span class="token punctuation">)</span>    final_result <span class="token operator">=</span> search<span class="token punctuation">.</span>zintersect<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token punctuation">{</span>job_scores<span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'jobs:req'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> conn<span class="token punctuation">.</span>zrangebyscore<span class="token punctuation">(</span><span class="token string">'idx:'</span> <span class="token operator">+</span> final_result<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果还要加上对技能熟练度的考虑，可以用有序集合存储技能要求，并根据熟练度要求给每个职位赋予相应的分值。然后在计算用户得分时也根据熟练度计算分值，最后结果 &gt;0 的都是满足要求的职位。</p><h2 id="构建简单的社交网站"><a href="#构建简单的社交网站" class="headerlink" title="构建简单的社交网站"></a>构建简单的社交网站</h2><h3 id="用户和状态"><a href="#用户和状态" class="headerlink" title="用户和状态"></a>用户和状态</h3><p>对于用户信息，通常都是使用散列来存储。创建用户的整个过程非常简单，但是需要注意的是，为了防止多个请求注册相同用户名导致唯一性被破坏，在开始执行创建操作之前，需要将要注册的用户名锁起来(这里用户名就是一种资源)。除此之外还要注意用户的敏感信息不能存储在该散列中，因为程序会频繁取出这个散列用于响应，这些信息应当存储在其他地方。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">create_user</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> login<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    llogin <span class="token operator">=</span> login<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 尝试获取用户名对应的锁</span>    lock <span class="token operator">=</span> acquire_lock_with_timeout<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token string">"user:"</span> <span class="token operator">+</span> llogin<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># 如果获取失败，代表有别的线程在创建该用户名的角色</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> lock<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token comment"># 如果该用户名已被使用过，创建失败</span>    <span class="token keyword">if</span> conn<span class="token punctuation">.</span>hget<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token string">"user:"</span> <span class="token operator">+</span> llogin<span class="token punctuation">)</span><span class="token punctuation">:</span>        release_lock<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token string">"user:"</span> <span class="token operator">+</span> llogin<span class="token punctuation">,</span> lock<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token builtin">id</span> <span class="token operator">=</span> conn<span class="token punctuation">.</span>incr<span class="token punctuation">(</span><span class="token string">"user:id:"</span><span class="token punctuation">)</span>    pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>hset<span class="token punctuation">(</span><span class="token string">"users:"</span><span class="token punctuation">,</span> llogin<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>hmset<span class="token punctuation">(</span><span class="token string">"users:%s"</span><span class="token operator">%</span><span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token string">'login'</span><span class="token punctuation">:</span> login<span class="token punctuation">,</span>        <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token builtin">id</span><span class="token punctuation">,</span>        <span class="token string">'name'</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span>        <span class="token string">'followers'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token string">'following'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token string">'posts'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token string">'signup'</span><span class="token punctuation">:</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>    release_lock<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token string">"user:"</span> <span class="token operator">+</span> llogin<span class="token punctuation">,</span> lock<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">id</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建用户状态也非常简单，这里不多赘述</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">create_status</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token operator">**</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>hget<span class="token punctuation">(</span><span class="token string">'user:%s'</span><span class="token operator">%</span>uid<span class="token punctuation">,</span> <span class="token string">'login'</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>incr<span class="token punctuation">(</span><span class="token string">'status:id:'</span><span class="token punctuation">)</span>    login<span class="token punctuation">,</span> <span class="token builtin">id</span> <span class="token operator">=</span> pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> login<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    data<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token string">'message'</span><span class="token punctuation">:</span> message<span class="token punctuation">,</span>        <span class="token string">'posted'</span><span class="token punctuation">:</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token builtin">id</span><span class="token punctuation">,</span>        <span class="token string">'uid'</span><span class="token punctuation">:</span> uid<span class="token punctuation">,</span>        <span class="token string">'login'</span><span class="token punctuation">:</span> login    <span class="token punctuation">}</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>hmset<span class="token punctuation">(</span><span class="token string">'status:%s'</span><span class="token operator">%</span><span class="token builtin">id</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>hincrby<span class="token punctuation">(</span><span class="token string">'user:%s'</span><span class="token operator">%</span>uid<span class="token punctuation">,</span> <span class="token string">'posts'</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">id</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="主页时间线"><a href="#主页时间线" class="headerlink" title="主页时间线"></a>主页时间线</h3><p>在使用B站等应用时，一般都会有动态功能，也就是主页时间线。他记录了一段时间里关注对象发布的动态消息。由于主页时间线很多时候是用户进入应用的入口，因此对应的信息必须简单易获取。<br>这里使用一个有序队列来存储状态消息id和它的发布时间戳。在查询的时候按照从新到旧的顺序查找状态信息id，并根据获取到的id取得状态信息数据。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_status_message</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> timeline<span class="token operator">=</span><span class="token string">'home:'</span><span class="token punctuation">,</span> page<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    statuses <span class="token operator">=</span> conn<span class="token punctuation">.</span>zrevrange<span class="token punctuation">(</span><span class="token string">'%s%s'</span><span class="token operator">%</span><span class="token punctuation">(</span>timeline<span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>page<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>count<span class="token punctuation">,</span> page<span class="token operator">*</span>count<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token builtin">id</span> <span class="token keyword">in</span> statuses<span class="token punctuation">:</span>        pipeline<span class="token punctuation">.</span>hgetall<span class="token punctuation">(</span><span class="token string">'status:%s'</span><span class="token operator">%</span><span class="token builtin">id</span><span class="token punctuation">)</span>    <span class="token comment"># 用过滤器过滤掉已被删除的部分</span>    <span class="token keyword">return</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码除了查询主页时间线意外，还可以查询到个人时间线(只包含个人动态)，只需要修改<code>timeline</code>即可。</p><p>当然以上的操作都只设计查询，真正的应用还需要在关注和取消关注时维护对应的时间线集合。这里使用两个有序集合存储用户的关注列表和被关注列表。存储用户id以及对应的关注/被关注时间戳。</p><p>当用户执行关注操作时，除了将用户id存入二人的关注列表和被关注列表之外，还需要将被关注者的一部分状态信息更新到关注者的主页时间线当中。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">HOME_TIMELINE_SIZE <span class="token operator">=</span> <span class="token number">1000</span><span class="token keyword">def</span> <span class="token function">follow_user</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> other_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    fkey1 <span class="token operator">=</span> <span class="token string">'following:%s'</span><span class="token operator">%</span>uid    fkey2 <span class="token operator">=</span> <span class="token string">'followers:%s'</span><span class="token operator">%</span>other_id    <span class="token keyword">if</span> conn<span class="token punctuation">.</span>zscore<span class="token punctuation">(</span>fkey1<span class="token punctuation">,</span> other_id<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    now <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span>fkey1<span class="token punctuation">,</span> other_id<span class="token punctuation">,</span> now<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span>fkey2<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> now<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zrevrange<span class="token punctuation">(</span><span class="token string">'profile:%s'</span><span class="token operator">%</span>other_id<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> HOME_TIMELINE_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> withscores<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    following<span class="token punctuation">,</span> followers<span class="token punctuation">,</span> status_and_score <span class="token operator">=</span> pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    pipeline<span class="token punctuation">.</span>hincrby<span class="token punctuation">(</span><span class="token string">'user:%s'</span><span class="token operator">%</span>uid<span class="token punctuation">,</span> <span class="token string">'following'</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>following<span class="token punctuation">)</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>hincrby<span class="token punctuation">(</span><span class="token string">'user:%s'</span><span class="token operator">%</span>other_id<span class="token punctuation">,</span> <span class="token string">'followers'</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>followers<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> status_and_score<span class="token punctuation">:</span>        pipeline<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">'home:%s'</span><span class="token operator">%</span>uid<span class="token punctuation">,</span> <span class="token operator">**</span><span class="token builtin">dict</span><span class="token punctuation">(</span>status_and_score<span class="token punctuation">)</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zremrangebyrank<span class="token punctuation">(</span><span class="token string">'home:%s'</span><span class="token operator">%</span>uid<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>HOME_TIMELINE_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在将关注者的主页时间线更新之后，还需要将他们的大小缩减到阈值，避免OOM。</p><p>取关的操作流程刚好与关注的流程相反，只需要将用户id从关注者列表和被关注者列表中移除，然后在主页时间线中修改对应的信息即可。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">unfollow_user</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> other_uid<span class="token punctuation">)</span><span class="token punctuation">:</span>    fkey1 <span class="token operator">=</span> <span class="token string">'following:%s'</span><span class="token operator">%</span>uid    fkey2 <span class="token operator">=</span> <span class="token string">'followers:%s'</span><span class="token operator">%</span>other_uid    <span class="token keyword">if</span> <span class="token keyword">not</span> conn<span class="token punctuation">.</span>zscore<span class="token punctuation">(</span>fkey1<span class="token punctuation">,</span> other_uid<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span>fkey1<span class="token punctuation">,</span> other_uid<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span>fkey2<span class="token punctuation">,</span> uid<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zrevrange<span class="token punctuation">(</span><span class="token string">'profile:%s'</span><span class="token operator">%</span>other_uid<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> HOME_TIMELINE_SIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    following<span class="token punctuation">,</span> followers<span class="token punctuation">,</span> statuses <span class="token operator">=</span> pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    pipeline<span class="token punctuation">.</span>hincrby<span class="token punctuation">(</span><span class="token string">'user:%s'</span><span class="token operator">%</span>uid<span class="token punctuation">,</span> <span class="token string">'following'</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>following<span class="token punctuation">)</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>hincrby<span class="token punctuation">(</span><span class="token string">'user:%s'</span><span class="token operator">%</span>other_uid<span class="token punctuation">,</span> <span class="token string">'followers'</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>followers<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> statuses<span class="token punctuation">:</span>        pipeline<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span><span class="token string">'home:%s'</span><span class="token operator">%</span>uid<span class="token punctuation">,</span> <span class="token operator">*</span>statuses<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想要在取消关注后重新填充，只需在取关后记录下本次在主页时间线中删除的记录数，然后去用户关注的博主的个人时间线中获取对应数量的记录填充进来即可，最后将大小修建为阈值。<br>不过用户在取关之后肯定希望立即得到反馈，因此，重新填充的工作可以交给延迟队列来进行。</p><h3 id="状态信息的发布与删除"><a href="#状态信息的发布与删除" class="headerlink" title="状态信息的发布与删除"></a>状态信息的发布与删除</h3><p>前面只讲了程序如何获取状态信息，接下来要做的就是添加状态信息的发布与删除。当消息发布时，对应的id应当被推送的关注者的主页时间线当中。如果关注者的数量较少，这个操作可以被立即执行，但如果关注者的数量非常庞大，那立即更新就会导致很长的等待时间，这里可以使用延迟队列来确保函数最终能够以合理的等待时间返回。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">post_status</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token operator">**</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">id</span> <span class="token operator">=</span> create_status<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token operator">**</span>data<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">id</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    posted <span class="token operator">=</span> conn<span class="token punctuation">.</span>hget<span class="token punctuation">(</span><span class="token string">'status:%s'</span><span class="token operator">%</span><span class="token builtin">id</span><span class="token punctuation">,</span> <span class="token string">'posted'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> posted<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    post <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">(</span>posted<span class="token punctuation">)</span><span class="token punctuation">}</span>    conn<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">'profile:%s'</span><span class="token operator">%</span>uid<span class="token punctuation">,</span> <span class="token operator">**</span>post<span class="token punctuation">)</span>    syndicate_status<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> post<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">id</span>POST_PER_PASS <span class="token operator">=</span> <span class="token number">1000</span><span class="token keyword">def</span> <span class="token function">syndicate_status</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> post<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 获取最多1000个关注者</span>    followers <span class="token operator">=</span> conn<span class="token punctuation">.</span>zrangebyscore<span class="token punctuation">(</span><span class="token string">'followers:%s'</span><span class="token operator">%</span>uid<span class="token punctuation">,</span> start<span class="token punctuation">,</span> <span class="token string">'inf'</span><span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> num<span class="token operator">=</span>POST_PER_PASS<span class="token punctuation">,</span> withscores<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token comment"># 更新这些关注者的主页时间线</span>    <span class="token comment"># 遍历的同时更新start变量，作为下一次的起始</span>    <span class="token keyword">for</span> follower<span class="token punctuation">,</span> start <span class="token keyword">in</span> followers<span class="token punctuation">:</span>        pipeline<span class="token punctuation">.</span>zadd<span class="token punctuation">(</span><span class="token string">'home:%s'</span><span class="token operator">%</span>follower<span class="token punctuation">,</span> <span class="token operator">**</span>post<span class="token punctuation">)</span>        <span class="token comment"># 修剪主页时间线，防止它长度超过阈值</span>        pipeline<span class="token punctuation">.</span>zremrangebyrank<span class="token punctuation">(</span><span class="token string">'home:%s'</span><span class="token operator">%</span>follower<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>HOME_TIMELINE_SIZE<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 如果关注者数量很大，就将它推给延迟队列</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>followers<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> POST_PER_PASS<span class="token punctuation">:</span>        execute_later<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token string">'default'</span><span class="token punctuation">,</span> <span class="token string">'syndicate_status'</span><span class="token punctuation">,</span><span class="token punctuation">[</span>conn<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> post<span class="token punctuation">,</span> start<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而删除的操作相对来说就非常简单了，因为在获取状态消息时使用了filter过滤掉已经被删除的信息，因此只需要删除掉状态消息在散列中的记录，它就不会在任何时间线中出现了。具体的流程和别的删除操作没太大区别，同样是对被删除的记录加锁然后修改发布者的数据信息。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">delete_status</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> status_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> <span class="token string">'status:%s'</span><span class="token operator">%</span>status_id    lock <span class="token operator">=</span> acquire_lock_with_timeout<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> lock<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token keyword">if</span> conn<span class="token punctuation">.</span>hget<span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">'uid'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">:</span>        release_lock<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">,</span> lock<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span><span class="token string">'profile:%s'</span><span class="token operator">%</span>uid<span class="token punctuation">,</span> status_id<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span><span class="token string">'home:%s'</span><span class="token operator">%</span>uid<span class="token punctuation">,</span> status_id<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>hincrby<span class="token punctuation">(</span><span class="token string">'user:%s'</span><span class="token operator">%</span>uid<span class="token punctuation">,</span> <span class="token string">'posts'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>    release_lock<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">,</span> lock<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样的删除虽然简单，但是被删除的消息id依旧存储在用户的主页时间线里，时间久了会积压大量的无用数据，因此还需要对这些数据进行清理。<br>具体操作也非常简单，只需要通过消息散列获取对应的发布者id，得到关注者列表然后依据列表大小进行删除即可(分批/不分批)</p><h3 id="流API"><a href="#流API" class="headerlink" title="流API"></a>流API</h3><p>在开发网站的过程中，我们可能希望收集一些网站中发生的事件方便后续的优化与数据分析。最容易想到的实现方法就是专门执行一些调用来收集这些信息或是在所有执行操作的函数内部添加这部分功能。<br>不过在本节，我们使用另一种方法来实现这类功能：构建一些函数来广播事件，然后由负责数据分析的事件监听器来接收并处理。<br>流API与其他功能最大的区别就是，一般的操作都需要尽快完成并返回，而流API则需要在一定时间内持续返回结果。也就是说，随着事件推移，流API逐渐会构成一个由事件组成的序列，来让网站和客户端了解到在网站中发生的事情。<br>在接下来的例子中我们将让流API监控消息的创建与删除，由于流API不是像处理普通请求一样，一次性返回完整的所有数据，因此需要使用分块技术让HTTP服务器可以生成并发送增量式数据。</p><h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><p>首先第一步就是为流API创建一个服务器，这个服务器可以为每一个请求都开启一个线程进行处理。在服务器代码中体现的逻辑非常简单，就是先标识客户端接着验证请求是否合法然后交给过滤器进行过滤操作。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">StreamingAPIServer</span><span class="token punctuation">(</span>socketserver<span class="token punctuation">.</span>ThreadingMixIn<span class="token punctuation">,</span> http<span class="token punctuation">.</span>server<span class="token punctuation">.</span>HTTPServer<span class="token punctuation">)</span><span class="token punctuation">:</span>    deamon_threads <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">class</span> <span class="token class-name">StreamingAPIRequestHandler</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>server<span class="token punctuation">.</span>BaseHTTPRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">do_GET</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        parse_identifier<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>path <span class="token operator">!=</span> <span class="token string">'/statuses/sample.json'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>send_error<span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span>        process_filter<span class="token punctuation">(</span>self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">do_POST</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        parse_identifier<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>path <span class="token operator">!=</span> <span class="token string">'/statuses/filter.json'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>send_error<span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span>        process_filter<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来这部分是处理语法分析的函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">parse_identifier</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 将标识符和查询参数设为预留值</span>    handler<span class="token punctuation">.</span>identifier <span class="token operator">=</span> <span class="token boolean">None</span>    handler<span class="token punctuation">.</span>query <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token string">'?'</span> <span class="token keyword">in</span> handler<span class="token punctuation">.</span>path<span class="token punctuation">:</span>        <span class="token comment"># 取出路径中包含查询参数的部分并更新路径</span>        handler<span class="token punctuation">.</span>path<span class="token punctuation">,</span> _<span class="token punctuation">,</span> query <span class="token operator">=</span> handler<span class="token punctuation">.</span>path<span class="token punctuation">.</span>partition<span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span>        <span class="token comment"># 通过语法分析获取查询参数</span>        handler<span class="token punctuation">.</span>query <span class="token operator">=</span> urlparse<span class="token punctuation">.</span>parse_qs<span class="token punctuation">(</span>query<span class="token punctuation">)</span>        <span class="token comment"># 获取identifier的查询参数列表</span>        identifier <span class="token operator">=</span> handler<span class="token punctuation">.</span>query<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'identifier'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span>        handler<span class="token punctuation">.</span>identifier <span class="token operator">=</span> identifier<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后是校验请求并向客户端发送流数据，这个函数的基本构思是确保服务器取得客户端的标识符，并且成功获取请求指定的过滤参数。最终按照分块的方式将数据传递给客户端</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">FILTERS <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'track'</span><span class="token punctuation">,</span> <span class="token string">'filter'</span><span class="token punctuation">,</span> <span class="token string">'location'</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">process_filters</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">id</span> <span class="token operator">=</span> handler<span class="token punctuation">.</span>identifier    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">id</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> handler<span class="token punctuation">.</span>send_error<span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> <span class="token string">'identifier missing'</span><span class="token punctuation">)</span>    method <span class="token operator">=</span> handler<span class="token punctuation">.</span>path<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    name <span class="token operator">=</span> <span class="token boolean">None</span>    args <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">if</span> method <span class="token operator">==</span> <span class="token string">'filter'</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> cgi<span class="token punctuation">.</span>FieldStorage<span class="token punctuation">(</span>            fp<span class="token operator">=</span>handler<span class="token punctuation">.</span>rfile<span class="token punctuation">,</span>            headers<span class="token operator">=</span>handler<span class="token punctuation">.</span>headers<span class="token punctuation">,</span>            environ<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'REQUEST_METHOD'</span><span class="token punctuation">:</span><span class="token string">'POST'</span><span class="token punctuation">,</span>                    <span class="token string">'CONTENT_TYPE'</span><span class="token punctuation">:</span> handler<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Content-Type'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>        <span class="token punctuation">)</span>        <span class="token keyword">for</span> name <span class="token keyword">in</span> data<span class="token punctuation">:</span>            <span class="token keyword">if</span> name <span class="token keyword">in</span> FILTERS<span class="token punctuation">:</span>                args <span class="token operator">=</span> data<span class="token punctuation">.</span>getfirst<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> args<span class="token punctuation">:</span>            <span class="token keyword">return</span> handler<span class="token punctuation">.</span>send_error<span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">,</span> <span class="token string">"no filter provided"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        args <span class="token operator">=</span> handler<span class="token punctuation">.</span>query    handler<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>    handler<span class="token punctuation">.</span>send_header<span class="token punctuation">(</span><span class="token string">'Transfer-Encoding'</span><span class="token punctuation">,</span> <span class="token string">'chunked'</span><span class="token punctuation">)</span>    handler<span class="token punctuation">.</span>end_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>    quit <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> filter_content<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> name<span class="token punctuation">,</span> args<span class="token punctuation">,</span> quit<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            handler<span class="token punctuation">.</span>wfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'%X\r\n%s\r\n'</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> socket<span class="token punctuation">.</span>error<span class="token punctuation">:</span>            quit<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> quit<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        handler<span class="token punctuation">.</span>wfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'0\r\n\r\n'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对流消息进行过滤"><a href="#对流消息进行过滤" class="headerlink" title="对流消息进行过滤"></a>对流消息进行过滤</h4><p>一个大型的网站每时每刻都有大量的事件发生，如果将这些事件全部传输给客户端会带来大量的带宽消耗，因此让服务器只发送客户端需要的消息就非常重要了。<br>这里我们使用Redis的发布-订阅机制来实现部分功能：当用户发送一条消息时，将其发送给某一个频道，各个过滤器通过订阅那个频道来接收消息并当消息匹配时回传给客户端。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">create_status</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token operator">**</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>hget<span class="token punctuation">(</span><span class="token string">'user:%s'</span><span class="token operator">%</span>uid<span class="token punctuation">,</span> <span class="token string">'login'</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>incr<span class="token punctuation">(</span><span class="token string">'status:id:'</span><span class="token punctuation">)</span>    login<span class="token punctuation">,</span> <span class="token builtin">id</span> <span class="token operator">=</span> pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> login<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    data<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token string">'message'</span><span class="token punctuation">:</span> message<span class="token punctuation">,</span>        <span class="token string">'posted'</span><span class="token punctuation">:</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'id'</span><span class="token punctuation">:</span> <span class="token builtin">id</span><span class="token punctuation">,</span>        <span class="token string">'uid'</span><span class="token punctuation">:</span> uid<span class="token punctuation">,</span>        <span class="token string">'login'</span><span class="token punctuation">:</span> login    <span class="token punctuation">}</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>hmset<span class="token punctuation">(</span><span class="token string">'status:%s'</span><span class="token operator">%</span><span class="token builtin">id</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>hincrby<span class="token punctuation">(</span><span class="token string">'user:%s'</span><span class="token operator">%</span>uid<span class="token punctuation">,</span> <span class="token string">'posts'</span><span class="token punctuation">)</span>    <span class="token comment"># 新添加的代码，用于向过滤器发送消息</span>    pipeline<span class="token punctuation">.</span>publish<span class="token punctuation">(</span><span class="token string">'streaming:status:'</span><span class="token punctuation">,</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">id</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而当要删除某条消息时，则要向频道中传输一条该消息已被删除的消息。如果程序本身就纪录了发送消息的状态，那这一步就不需要了，不过这样做带来的是管理上的难度。如果我们通过传递删除消息给过滤器，就可以避免存储状态信息，简化了服务器设计且降低了内存占用。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">delete_status</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> status_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> <span class="token string">'status:%s'</span><span class="token operator">%</span>status_id    lock <span class="token operator">=</span> acquire_lock_with_timeout<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> lock<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token keyword">if</span> conn<span class="token punctuation">.</span>hget<span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">'uid'</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">:</span>        release_lock<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">,</span> lock<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    pipeline <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># 新增的代码，将已经删除了的消息发送给指定频道 </span>    status <span class="token operator">=</span> conn<span class="token punctuation">.</span>hgetall<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    status<span class="token punctuation">[</span><span class="token string">'deleted'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>    pipeline<span class="token punctuation">.</span>publish<span class="token punctuation">(</span><span class="token string">'streaming:status'</span><span class="token punctuation">,</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>delete<span class="token punctuation">(</span>key<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span><span class="token string">'profile:%s'</span><span class="token operator">%</span>uid<span class="token punctuation">,</span> status_id<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>zrem<span class="token punctuation">(</span><span class="token string">'home:%s'</span><span class="token operator">%</span>uid<span class="token punctuation">,</span> status_id<span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>hincrby<span class="token punctuation">(</span><span class="token string">'user:%s'</span><span class="token operator">%</span>uid<span class="token punctuation">,</span> <span class="token string">'posts'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    pipeline<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span>    release_lock<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">,</span> lock<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>处理好了发布消息的函数，接下来就要添加负责接收和处理流消息的函数了<br>首先创建一个过滤器来判断内容是否要发送给客户端。接着从频道中获取消息并取出消息状态；之后检查消息是否匹配，状态是否正常，如果消息已被删除则给客户端返回一个消息已删除的信息否则就返回整个消息。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@redis_connection</span><span class="token punctuation">(</span><span class="token string">'social-netword'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">filter_content</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> name<span class="token punctuation">,</span> args<span class="token punctuation">,</span> quit<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">match</span> <span class="token operator">=</span> create_filter<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> name<span class="token punctuation">,</span> args<span class="token punctuation">)</span>    pubsub <span class="token operator">=</span> conn<span class="token punctuation">.</span>pubsub<span class="token punctuation">(</span><span class="token punctuation">)</span>    pubsub<span class="token punctuation">.</span>subscribe<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'streaming:status:'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> pubsub<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        message <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span>        decoded <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>message<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">match</span><span class="token punctuation">(</span>decoded<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> decoded<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'deleted'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">yield</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">{</span>                    <span class="token string">'id'</span><span class="token punctuation">:</span> decoded<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token string">'deleted'</span><span class="token punctuation">:</span> <span class="token boolean">True</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">yield</span> message            <span class="token keyword">if</span> quit<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>    pubsub<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后具体的过滤器创建就不多赘述了，可以根据自己的业务要求创建需要的过滤器。</p><h2 id="降低内存占用"><a href="#降低内存占用" class="headerlink" title="降低内存占用"></a>降低内存占用</h2><h3 id="短结构"><a href="#短结构" class="headerlink" title="短结构"></a>短结构</h3><p>对于长度比较短的结构，Redis提供了一系列配置选项，可以让它以更节约空间的方式存储长度较短的结构。<br>在列表、散列和有序集合的长度较短或者体积较小的时候，Redis可以选择使用一种名为_压缩列表_（ziplist）的紧凑存储方式来存储这些结构。压缩列表是列表、散列和有序集合这3种不同类型的对象的一种非结构化（unstructured）表示。<br>压缩列表会以序列化的方式存储数据，每次读取都要对数据进行解码，每次写入也要进行局部的重新编码，并且可能需要对内存里的数据进行移动。</p><h4 id="压缩列表表示"><a href="#压缩列表表示" class="headerlink" title="压缩列表表示"></a>压缩列表表示</h4><p>在讲压缩列表之前，我们先看一下Redis列表的存储方式。<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/redis/20220914144938.png" alt="Redis长列表存储格式"></p><p>Redis在存储长列表时，会存储一个指向前面节点和后面节点的指针。在包含字符串的指针中，又会存储当前节点的字符串长度以及剩余可用的字节数量。也就是说每个节点都需要额外存储3个指针，两个整数，以及字符串内的一个额外字节，算下来每个节点都至少需要21个字节的额外开销。</p><p>而压缩列表则是用节点组成的序列，每个节点都用两个长度值和一个字符串组成。第一个长度值记录的是前一个节点的长度，这个长度值会被用来进行从后向前的遍历，第二个长度值记录了当前节点的长度，最后则是真正的字符串。压缩列表就是这样通过避免存储额外的元数据和指针来减少存储空间的占用。</p><p>Redis配置文件的设置</p><pre class="line-numbers language-none"><code class="language-none">list-max-ziplist-entries 512list-max-ziplist-value 64hash-max-ziplist-entries 512hash-max-ziplist-value 64zset-max-ziplist-entries 128zset-max-ziplist-value 64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>entries表示列表散列和有序集合在被编码为压缩列表的情况下允许包含的最大元素<br>value表示压缩列表每个节点的最大体积是多少个字节</p><h4 id="集合的整数集合编码"><a href="#集合的整数集合编码" class="headerlink" title="集合的整数集合编码"></a>集合的整数集合编码</h4><p>对于体积较小，并且成员都可以被解释为十进制整数的集合，Redis就会以有序数组的方式存储集合，这种存储方式又称为整数集合。</p><p>配置文件设置</p><pre class="line-numbers language-none"><code class="language-none">set-max-intset-entries 512<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="短结构存在的性能问题"><a href="#短结构存在的性能问题" class="headerlink" title="短结构存在的性能问题"></a>短结构存在的性能问题</h4><p>前面提到，Redis存储短结构时，是将他们序列化后存储在内存中，这就代表他在读写时多了编解码操作，因此当短结构的体积很大时，它反而会带来巨大的性能问题。<br>而对于整数集合来说，虽然它本身不需要序列化存储，但每一次插入都需要进行数据的移动，当数据量非常大时，这个操作就会很消耗时间。</p><h3 id="分片结构"><a href="#分片结构" class="headerlink" title="分片结构"></a>分片结构</h3><p>分片：本质上是基于某些简单的规则将数据划分为更小的部分，然后根据数据所属的部分来决定将数据发送到哪个位置上面。<br>ps：分片对有序集合来说提升并不明显，因为有序集合需要等待所有的分片完成操作之后才能获得结果。</p><h4 id="分片式散列"><a href="#分片式散列" class="headerlink" title="分片式散列"></a>分片式散列</h4><p>对散列进行分片首先需要选择一个方法来对数据进行划分。因为散列本身就存储着一些键，所以程序在对键进行划分的时候，可以把散列存储的键用作其中一个信息源，并使用散列函数为键计算出一个数字散列值。然后程序会根据需要存储的键的总数量以及每个分片需要存储的键数量，计算出所需的分片数量，并使用这个分片数量和键的散列值来决定应该把键存储到哪个分片里面。</p><p>分片函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">shard_key</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> key<span class="token punctuation">,</span> total_elements<span class="token punctuation">,</span> shard_size<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">or</span> key<span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        shard_id <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">//</span> shard_size    <span class="token keyword">else</span><span class="token punctuation">:</span>        shards <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> total_elements <span class="token operator">//</span> shard_size        shard_id <span class="token operator">=</span> binascii<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">%</span> shards    <span class="token keyword">return</span> <span class="token string">"%s:%s"</span><span class="token operator">%</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> shard_id<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面例子中的分片函数需要用户传入基础散列的名字，将要被存储到分片散列里的键，预计的元素总数量以及请求的分片数量<br>在对非数字键进行分片时，需要<code>total_elements</code>和<code>shard_size</code>用于计算实际所需的分片总数量。因此这两个参数都应尽量不发生变化，即使真的需要修改，也要使用<code>resharding</code>(重新分片)来讲数据从旧分片迁移到新分片。</p><p>分片的使用</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">shard_hset</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> base<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> total_elements<span class="token punctuation">,</span> shard_size<span class="token punctuation">)</span><span class="token punctuation">:</span>    shard <span class="token operator">=</span> shard_key<span class="token punctuation">(</span>base<span class="token punctuation">,</span> key<span class="token punctuation">,</span> total_elements<span class="token punctuation">,</span> shard_size<span class="token punctuation">)</span>    <span class="token keyword">return</span> conn<span class="token punctuation">.</span>hset<span class="token punctuation">(</span>shard<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">shard_hget</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> base<span class="token punctuation">,</span> key<span class="token punctuation">,</span> total_elements<span class="token punctuation">,</span> shard_size<span class="token punctuation">)</span><span class="token punctuation">:</span>    shard <span class="token operator">=</span> shard_key<span class="token punctuation">(</span>base<span class="token punctuation">,</span> key<span class="token punctuation">,</span> total_elements<span class="token punctuation">,</span> shard_size<span class="token punctuation">)</span>    <span class="token keyword">return</span> conn<span class="token punctuation">.</span>hget<span class="token punctuation">(</span>shard<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分片集合"><a href="#分片集合" class="headerlink" title="分片集合"></a>分片集合</h4><p>之前我们提到过计算网站唯一访客的数量，这里提一下另一种做法：使用集合存储到访用户的id，但如果单纯使用集合存储，那往往会导致最终集合的体积异常庞大，这时就可以使用到分片技术了。<br>只要使用上一节讲的分片方法，我们就能很轻易的实现分片集合，但由于我们存储的是UUID，它的过长的长度会导致我们无法享受到整数集合带来的好处。因此，我们可以将UUID的前15个十六进制数字用作分片的键。<br>使用UUID的前15个十六进制数字可以大幅减少内存的占用，同时让Redis能够以整数集合的方式存储。</p><p>具体实现<br>思路：根据用户的会话id生成传入Redis的id，并获取预期的访客数量，交给分片集合函数进行处理。如果成功添加，就将当天的访客数+1</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">shard_sadd</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> base<span class="token punctuation">,</span> member<span class="token punctuation">,</span> total_elements<span class="token punctuation">,</span> shard_size<span class="token punctuation">)</span><span class="token punctuation">:</span>    shard <span class="token operator">=</span> shard_key<span class="token punctuation">(</span>base<span class="token punctuation">,</span> <span class="token string">'x'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>member<span class="token punctuation">)</span><span class="token punctuation">,</span> total_elements<span class="token punctuation">,</span> shard_size<span class="token punctuation">)</span>    <span class="token keyword">return</span> conn<span class="token punctuation">.</span>sadd<span class="token punctuation">(</span>shard<span class="token punctuation">,</span> member<span class="token punctuation">)</span>SHARD_SIZE <span class="token operator">=</span> <span class="token number">512</span><span class="token keyword">def</span> <span class="token function">count_visit</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> session_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    today <span class="token operator">=</span> date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span>    key <span class="token operator">=</span> <span class="token string">'unique:%s'</span><span class="token operator">%</span>today<span class="token punctuation">.</span>isoformat<span class="token punctuation">(</span><span class="token punctuation">)</span>    expected <span class="token operator">=</span> get_expected<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">,</span> today<span class="token punctuation">)</span>    <span class="token builtin">id</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>session_id<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> shard_sadd<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">,</span> expected<span class="token punctuation">,</span> SHARD_SIZE<span class="token punctuation">)</span><span class="token punctuation">:</span>        conn<span class="token punctuation">.</span>incr<span class="token punctuation">(</span>key<span class="token punctuation">)</span>DAILY_EXPECTED <span class="token operator">=</span> <span class="token number">1000000</span>EXPECTED <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">def</span> <span class="token function">get_expected</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">,</span> today<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> key <span class="token keyword">in</span> DAILY_EXPECTED<span class="token punctuation">:</span>        <span class="token keyword">return</span> EXPECTED<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    exkey <span class="token operator">=</span> key <span class="token operator">+</span> <span class="token string">':expected'</span>    expected <span class="token operator">=</span> conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span>exkey<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> expected<span class="token punctuation">:</span>        yesterday <span class="token operator">=</span> <span class="token punctuation">(</span>today <span class="token operator">-</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isoformat<span class="token punctuation">(</span><span class="token punctuation">)</span>        expected <span class="token operator">=</span> conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'unique:%s'</span><span class="token operator">%</span>yesterday<span class="token punctuation">)</span>        expected <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>expected <span class="token keyword">or</span> DAILY_EXPECTED<span class="token punctuation">)</span>        expected <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">**</span><span class="token builtin">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>math<span class="token punctuation">.</span>log<span class="token punctuation">(</span>expected<span class="token operator">*</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> conn<span class="token punctuation">.</span>setnx<span class="token punctuation">(</span>exkey<span class="token punctuation">,</span> expected<span class="token punctuation">)</span><span class="token punctuation">:</span>            expected <span class="token operator">=</span> conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span>exkey<span class="token punctuation">)</span>    EXPECTED<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span>    <span class="token keyword">return</span> EXPECTED<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="扩展Redis"><a href="#扩展Redis" class="headerlink" title="扩展Redis"></a>扩展Redis</h2><h3 id="扩展读性能"><a href="#扩展读性能" class="headerlink" title="扩展读性能"></a>扩展读性能</h3><p>在开始扩展性能之前，先回顾一下可以提高性能的几个途径：</p><ol><li>使用上一章提到的短结构时，确保压缩列表的最大长度不会太大以至于影响性能。</li><li>根据程序需要执行的查询类型，选择能为这种查询提供最好性能的结构。</li><li>在将大体积的对象缓存到Redis里之前，考虑先对它进行压缩以减少读取和写入对象时所需的网络带宽。</li><li>使用流水线和连接池。</li></ol><p>接下来就可以开始考虑提升Redis读取能力的方法了，最容易想到的就是添加只读从服务器。<br>在使用只读从服务器时，必须牢记只可以对Redis主服务器进行写入。</p><p>在使用多个Redis从服务器处理查询时可能会遇到的最棘手的问题就是主服务器临时下线或者永久下线。所以每当有从服务器尝试与主服务器建立连接时，主服务器都会为从服务器创建一个快照，如果有多个从服务器建立连接，他们最后都会收到同一个快照。这大幅减少了创建快照的工作负担。<br>不过大量的发送快照副本也会大量消耗主服务器的带宽，导致主服务器延迟变高，甚至主服务器已经建立的连接断开。</p><p>因此，想要解决服务器重同步问题的办法之一，就是减少主服务器传送给从服务器的数据量。而最简单的实现方法，就是添加一个中间层，让中间层的服务器负责转发数据副本。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/redis/20220923104227.png"></p><p>中间层可以有效分担主服务器传输数据副本的压力，不过这也导致了复杂的网络拓扑结构，增加了处理故障的难度。</p><p>除了添加服务器群组之外，解决重同步的另一个方向就是对网络连接进行压缩，从而减少需要传送的数据量。</p><blockquote><p>[!note]+ 加密和压缩开销</p></blockquote><p>使用带压缩的SSH隧道可以有效减少网络负载。<br>SSH隧道：在SSH客户端与SSH服务端之间建立一个隧道，将网络数据通过该隧道转发至指定端口，从而进行网络通信。SSH隧道自动提供了相应的加密及解密服务，保证了数据传输的安全性。<br>SSH的加密算法并不会占用很多的处理器资源，一般来说会将SSH压缩的等级控制在5级以下。因为5级压缩可以在1级压缩的基础上，将数据的总体积减少10%～20%，并且只需要相当于1级压缩2～3倍的处理时间。</p><blockquote><p>[!note]+ 使用OPENVPN进行压缩</p></blockquote><p>初看上去，使用AES加密和lzo压缩的OpenVPN似乎是一个绝妙的现成解决方案，跟SSH需要使用第三方脚本才能进行自动重连接相比，OpenVPN不仅提供加密和压缩功能，而且还具有对用户透明的重连接功能。遗憾的是，我能够找到的大部分信息都显示OpenVPN在开启lzo压缩之后，对于10兆网络连接的性能提升只有25%～30%，而对于速度更快的连接，lzo压缩不会给性能带来任何提升。</p><blockquote><p>[!def]+ Sentinal</p></blockquote><p>Redis的哨兵可以配合Redis的复制功能使用，并对下线的主服务器进行故障转移。哨兵会监视系一列主服务器以及这些主服务器的从服务器。<br>通过向主服务器发送PUBLISH和SUBSCRIBE命令(确认主服务器能够正确收发消息)，并向主从服务器发送PING命令，各个哨兵进程可以自主识别可用的从服务器和其他的哨兵。当主服务器失效时，监视该主服务器的所有哨兵会基于彼此共有的信息选出一个哨兵，并选出一个新的主服务器。选出的哨兵会负责让剩余的从服务器去复制这个新的主服务器。</p><h3 id="扩展写性能"><a href="#扩展写性能" class="headerlink" title="扩展写性能"></a>扩展写性能</h3><p>在扩展写性能之前，我们同样需要检查是否已经尽一切可能降低了内存占用，并且是否尽可能介绍了需要写入的数据量。</p><ul><li>尽可能减少程序需要读取的数据量</li><li>将无关的功能迁移至其他服务器</li><li>在对Redis进行写入之前，尝试在本地内存中对将要写入的数据进行聚合运算</li><li>使用锁去替换可能会给速度带来限制的<code>WATCH/MULTI/EXEC</code>事务</li><li>降低命令长度</li></ul><p>如果以上的操作都基本已经做到极限了，就代表达到了单台服务器的性能瓶颈。这时就可以将数据分片到多台机器上了。</p><blockquote><p>[!tip]+ 预先分片</p></blockquote><p>在为了应对未来可能出现的流量增长而对系统进行预先分片的时候，我们可能会陷入这样一种处境：目前拥有的数据实在太少，按照预先分片方法计算出的机器数量去存储这些数据只会得不偿失。为了能够如常地对数据进行分割，我们可以在单台机器上面运行多个Redis服务器，并将每个服务器用作一个分片；或者使用单个Redis服务器上的多个Redis数据库。然后以此为起点，复制和配置管理方法，将数据迁移到多台机器上面。</p><h4 id="分片配置信息处理"><a href="#分片配置信息处理" class="headerlink" title="分片配置信息处理"></a>分片配置信息处理</h4><p>由于各个分片分布在不同的机器上，因此需要一个函数来根据分片动态获取对应的Redis连接。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_redis_connection</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> wait<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> <span class="token string">'config:redis:'</span> <span class="token operator">+</span> component    <span class="token comment"># 获取旧配置</span>    old_config <span class="token operator">=</span> CONFIGS<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token builtin">object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 获取新配置</span>    config <span class="token operator">=</span> get_config<span class="token punctuation">(</span>        config_connection<span class="token punctuation">,</span> <span class="token string">'redis'</span><span class="token punctuation">,</span> component<span class="token punctuation">,</span> wait<span class="token punctuation">)</span>    <span class="token comment"># 如果新旧配置不同，就创建一个新的连接</span>    <span class="token keyword">if</span> config <span class="token operator">!=</span> old_config<span class="token punctuation">:</span>        REDIS_CONNECTIONS<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span><span class="token operator">**</span>config<span class="token punctuation">)</span>    <span class="token keyword">return</span> REDIS_CONNECTIONS<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_sharded_connection</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> key<span class="token punctuation">,</span> shard_count<span class="token punctuation">,</span> wait<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    shard <span class="token operator">=</span> shard_key<span class="token punctuation">(</span>component<span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> shard_count<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> get_redis_connection<span class="token punctuation">(</span>shard<span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建分片服务器连接装饰器"><a href="#创建分片服务器连接装饰器" class="headerlink" title="创建分片服务器连接装饰器"></a>创建分片服务器连接装饰器</h4><p>接下来我们就需要使用<code>get_sharded_connection</code>写出一个能够自动创建分片连接，并将分片连接传递给底层函数的装饰器。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sharded_connection</span><span class="token punctuation">(</span>component<span class="token punctuation">,</span> shard_count<span class="token punctuation">,</span> wait<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token decorator annotation punctuation">@functools<span class="token punctuation">.</span>wraps</span><span class="token punctuation">(</span>function<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>            conn <span class="token operator">=</span> get_sharded_connection<span class="token punctuation">(</span>                component<span class="token punctuation">,</span> key<span class="token punctuation">,</span> shard_count<span class="token punctuation">,</span> wait            <span class="token punctuation">)</span>            <span class="token keyword">return</span> function<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> call    <span class="token keyword">return</span> wrapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个包装器可以实现在不修改<code>count_visit()</code>的情况下直接对它进行封装。但要注意的是，由于count_visit需要维持聚合计数信息，而获取这些信息需要通过get_expected，这个函数没有必要分片并且会在不同的时期被不同的用户使用，所以需要对它进行非分片连接。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@sharded_connection</span><span class="token punctuation">(</span><span class="token string">'unique'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">count_visit</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> session_id<span class="token punctuation">)</span><span class="token punctuation">:</span>    today <span class="token operator">=</span> date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span>    key <span class="token operator">=</span> <span class="token string">'unique:%s'</span><span class="token operator">%</span>today<span class="token punctuation">.</span>isoformat<span class="token punctuation">(</span><span class="token punctuation">)</span>    conn2<span class="token punctuation">,</span> expected <span class="token operator">=</span> get_expected<span class="token punctuation">(</span>key<span class="token punctuation">,</span> today<span class="token punctuation">)</span>    <span class="token builtin">id</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>session_id<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> shard<span class="token punctuation">.</span>shard_sadd<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">,</span> expected<span class="token punctuation">,</span> shard<span class="token punctuation">.</span>SHARD_SIZE<span class="token punctuation">)</span><span class="token punctuation">:</span>        conn2<span class="token punctuation">.</span>incr<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment"># 获取非分片连接</span><span class="token decorator annotation punctuation">@redis_connection</span><span class="token punctuation">(</span><span class="token string">'unique'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_expected</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">,</span> today<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> key <span class="token keyword">in</span> DAILY_EXPECTED<span class="token punctuation">:</span>        <span class="token keyword">return</span> EXPECTED<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    exkey <span class="token operator">=</span> key <span class="token operator">+</span> <span class="token string">':expected'</span>    expected <span class="token operator">=</span> conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span>exkey<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> expected<span class="token punctuation">:</span>        yesterday <span class="token operator">=</span> <span class="token punctuation">(</span>today <span class="token operator">-</span> timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isoformat<span class="token punctuation">(</span><span class="token punctuation">)</span>        expected <span class="token operator">=</span> conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'unique:%s'</span><span class="token operator">%</span>yesterday<span class="token punctuation">)</span>        expected <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>expected <span class="token keyword">or</span> DAILY_EXPECTED<span class="token punctuation">)</span>        expected <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">**</span><span class="token builtin">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>math<span class="token punctuation">.</span>log<span class="token punctuation">(</span>expected<span class="token operator">*</span><span class="token number">1.5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> conn<span class="token punctuation">.</span>setnx<span class="token punctuation">(</span>exkey<span class="token punctuation">,</span> expected<span class="token punctuation">)</span><span class="token punctuation">:</span>            expected <span class="token operator">=</span> conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span>exkey<span class="token punctuation">)</span>    EXPECTED<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>expected<span class="token punctuation">)</span>    <span class="token comment"># 返回非分片连接，使得count_visit()在有需要时可以对唯一计数器操作</span>    <span class="token keyword">return</span> conn<span class="token punctuation">,</span> EXPECTED<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Redis的Lua脚本编程"><a href="#Redis的Lua脚本编程" class="headerlink" title="Redis的Lua脚本编程"></a>Redis的Lua脚本编程</h2><h3 id="将Lua脚本载入Redis"><a href="#将Lua脚本载入Redis" class="headerlink" title="将Lua脚本载入Redis"></a>将Lua脚本载入Redis</h3><p>SCRIPT LOAD: 载入Lua脚本，返回一个SHA1校验和<br>EVALSHA: 调用SHA校验和对应的脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">script_load</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">:</span>    sha <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">call</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> keys<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> force_eval<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> force_eval<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> sha<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                sha<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> conn<span class="token punctuation">.</span>execute_command<span class="token punctuation">(</span>                    <span class="token string">"SCRIPT"</span><span class="token punctuation">,</span> <span class="token string">"LOAD"</span><span class="token punctuation">,</span> script<span class="token punctuation">,</span> parse<span class="token operator">=</span><span class="token string">"LOAD"</span>                <span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> conn<span class="token punctuation">.</span>execute_command<span class="token punctuation">(</span>                <span class="token string">"EVALSHA"</span><span class="token punctuation">,</span> sha<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>keys<span class="token operator">+</span>args<span class="token punctuation">)</span>            <span class="token punctuation">)</span>        <span class="token keyword">except</span> redis<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ResponseError <span class="token keyword">as</span> msg<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> msg<span class="token punctuation">.</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>starswith<span class="token punctuation">(</span><span class="token string">"NOSCRIPT"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">raise</span>        <span class="token keyword">return</span> conn<span class="token punctuation">.</span>execute_command<span class="token punctuation">(</span>            <span class="token string">"EVAL"</span><span class="token punctuation">,</span> script<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">(</span>keys<span class="token operator">+</span>args<span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">return</span> call<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面是一个加载Lua脚本的函数，这个脚本允许我们使用任何指定的连接而无需显示创建新的脚本对象。在调用该函数第一次执行命令时，会调用<code>SCRIPT LOAD</code>，之后会调用<code>EVALSHA</code>。<br>由于脚本在返回各种不同类型的数据时可能会产生含糊不清的结果，所以应该尽量显示的返回字符串，然后手动进行分析操作。</p><h3 id="创建新的状态信息"><a href="#创建新的状态信息" class="headerlink" title="创建新的状态信息"></a>创建新的状态信息</h3><p><strong>Lua脚本跟单个Redis命令一样，都是单个原子操作</strong>。因为Redis一次只会执行一个命令，所以EVAL，EVALSHA这两个命令也会被当作单个命令来处理。<br>这有效的帮助我们消除了竞态条件，不过这就导致<em>已经对结构进行了修改的Lua脚本无法被中断</em>。<br>对于不执行写命令的脚本来说，在脚本允许事件超过lua-time-limit指定的时间之后，就可以执行SCRIPT KILL命令杀死正在运行的脚本。<br>但如果脚本已经对存储的数据进行了写入，杀死脚本就会带来数据不一致的问题，这时就只能直接用SHUTDOWN NOSAVE杀死服务器。</p><p>Lua脚本一个最显著的优势就是它减少了与服务器的通讯次数，这不仅减少了多次通信的时间开销，还避免了 WATCH/MULTI/EXEC 事务冲突。</p><p>在开始Lua脚本演示之前，先介绍一下Redis使用Lua脚本的基本格式<br><code>EVAL script numkeys key [key ...] arg [arg ...]</code><br>在宿主语言的Lua脚本代码中key和arg分别用KEYS和ARGV表示，需要注意的是，Lua中数组的下标从1开始。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">create_status</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> uid<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token operator">**</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    args <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">'message'</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span>        <span class="token string">'posted'</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">'uid'</span><span class="token punctuation">,</span> uid<span class="token punctuation">,</span>    <span class="token punctuation">]</span>    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> data<span class="token punctuation">.</span>iteritems<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        args<span class="token punctuation">.</span>append<span class="token punctuation">(</span>key<span class="token punctuation">)</span>        args<span class="token punctuation">.</span>append<span class="token punctuation">(</span>value<span class="token punctuation">)</span>    <span class="token keyword">return</span> create_status_lua<span class="token punctuation">(</span>        conn<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'user:%s'</span><span class="token operator">%</span>uid<span class="token punctuation">,</span> <span class="token string">'status:id:'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> args    <span class="token punctuation">)</span>create_status_lua <span class="token operator">=</span> script_load<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''local login = redis.call('hget', KEYS[1], 'login')if not login then    return falseendlocal id = redis.call('incr', KEYS[2])local key = string.format('status:%s', id)redis.call('hmset', key,    'login', login,    'id', id,    unpack(ARGV))redis.call('hincrby', KEYS[1], 'posts', 1)return id)'''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上就是用Lua脚本执行创建状态信息命令的表示，我们主要将它拆分成两部分，第一部分负责组装Lua脚本需要的参数，第二部分是Lua脚本本身。</p><h3 id="重写锁实现"><a href="#重写锁实现" class="headerlink" title="重写锁实现"></a>重写锁实现</h3><h4 id="Lua实现脚本的原因"><a href="#Lua实现脚本的原因" class="headerlink" title="Lua实现脚本的原因"></a>Lua实现脚本的原因</h4><ol><li>在EVAL命令或EVALSHA命令执行Lua脚本时，跟在脚本或SHA1校验和之后的第一组参数就是Lua脚本需要读取或者写入的键。这样做的主要目的是让集群可以拒绝那些尝试在指定分片上，对不可用的键进行读取或写入的脚本。如果事先不知道哪些键会被读取和写入，就应该使用WATCH/MULTI/EXEC</li><li>在处理Redis存储的数据时，程序可能会需要一些数据，而这些数据无法在最开始的调用中获取。如果在在读取时不进行一定的限制，可能会导致服务器对数据库进行许多多余的访问，造成性能下降，甚至新数据被旧数据覆盖。</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">acquire_lock_with_timeout</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> lockname<span class="token punctuation">,</span> acquire_timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> lock_timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    identifier <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    lockname <span class="token operator">=</span> <span class="token string">'lock:'</span> <span class="token operator">+</span> lockname    lock_timeout <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>lock_timeout<span class="token punctuation">)</span><span class="token punctuation">)</span>    acquired <span class="token operator">=</span> <span class="token boolean">False</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> acquire_timeout    <span class="token keyword">while</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> end <span class="token keyword">and</span> <span class="token keyword">not</span> acquired<span class="token punctuation">:</span>        <span class="token comment"># 执行实际的锁获取操作，确保Lua调用已经执行成功</span>        acquired <span class="token operator">=</span> acquire_lock_with_timeout_lua<span class="token punctuation">(</span>            conn<span class="token punctuation">,</span> <span class="token punctuation">[</span>lockname<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>lock_timeout<span class="token punctuation">,</span> identifier<span class="token punctuation">]</span>        <span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'OK'</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">.001</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">not</span> acquired<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> acquired <span class="token keyword">and</span> identifier<span class="token comment"># 检测锁是否存在，然后用给定的ttl和标识符设置键</span>acquire_lock_with_timeout_lua <span class="token operator">=</span> script_load<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''    if redis.call('exists', KEYS[1] == 0) then        return redis.call('setex', KEYS[1], unpack(ARGV))    end'''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Lua实现计数信号量"><a href="#Lua实现计数信号量" class="headerlink" title="Lua实现计数信号量"></a>Lua实现计数信号量</h3><p>由于Lua版本的信号量获取操作都是在Redis内部完成，也就是说消除了系统时间不同的不公平，因为请求到来的时间统一按照Redis的内部时间计算，因此不再需要计数器以及信号量拥有者的集合。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">acquire_semaphore</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> semname<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    now <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> acquire_semaphore_lua<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token punctuation">[</span>semname<span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>now <span class="token operator">-</span> timeout<span class="token punctuation">,</span> limit<span class="token punctuation">,</span> now<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>acquire_semaphore_lua <span class="token operator">=</span> script_load<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''    redis.call('zremrangebyscore', KEYS[1], '-inf', ARGV[1])    if redis.call('zcard', KEYS[1]) &lt; tonumber(ARGV[2]) then        redis.call('zadd', KEYS[1], ARGV[3], ARGV[4])        return ARGV[4]    end'''</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">refresh_semaphore</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> semname<span class="token punctuation">,</span> identifier<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> refresh_semaphore_lua<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> <span class="token punctuation">[</span>semname<span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>identifier<span class="token punctuation">,</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token boolean">None</span>refresh_semaphore_lua <span class="token operator">=</span> script_load<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''    if redis.call('zscore', KEYS[1], ARGV[1]) then        return redis.call('zadd', KEYS[1], ARGV[2], ARGV[1]) or true    end'''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="移除WATCH-x2F-MULTI-x2F-EXEC"><a href="#移除WATCH-x2F-MULTI-x2F-EXEC" class="headerlink" title="移除WATCH/MULTI/EXEC"></a>移除WATCH/MULTI/EXEC</h3><p>由于WATCH等命令使用的是乐观锁机制，因此在并发量很高的情况下，会导致错误出现的次数越来越频繁，产生大量重试。并且对这些异常的处理也会导致代码变得非常臃肿，下面将使用Lua脚本优化掉这些命令。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">autocomplete_on_prefix</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> guild<span class="token punctuation">,</span> prefix<span class="token punctuation">)</span><span class="token punctuation">:</span>    start<span class="token punctuation">,</span> end <span class="token operator">=</span> auto_complete<span class="token punctuation">.</span>find_prefix_range<span class="token punctuation">(</span>prefix<span class="token punctuation">)</span>    identifier <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    items <span class="token operator">=</span> autocomplete_on_prefix_lua<span class="token punctuation">(</span>conn<span class="token punctuation">,</span>         <span class="token punctuation">[</span><span class="token string">'members:'</span> <span class="token operator">+</span> guild<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>start<span class="token operator">+</span>identifier<span class="token punctuation">,</span> end<span class="token operator">+</span>identifier<span class="token punctuation">]</span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>item <span class="token keyword">for</span> item <span class="token keyword">in</span> items <span class="token keyword">if</span> <span class="token string">'{'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> item<span class="token punctuation">]</span>autocomplete_on_prefix_lua <span class="token operator">=</span> script_load<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''redis.call('zadd', KEYS[1], 0, ARGV[1], 0, ARGV[2])local sindex = redis.call('zrank', KEYS[1], ARGV[1])local eindex = redis.call('zrank', KEYS[1], ARGV[2])eindex = math.min(sindex + 9, eindex - 2)redis.call('zrem', KEYS[1], unpack(ARGV))return redis.call('zrange', KEYS[1], sindex, eindex)'''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用Lua脚本的程序减少了通信往返带来的额外开销，并且消除了事务竞争带来的WATCH错误。</p><h3 id="使用Lua对列表进行分片"><a href="#使用Lua对列表进行分片" class="headerlink" title="使用Lua对列表进行分片"></a>使用Lua对列表进行分片</h3><p>本节将创建一种分片列表表示，并使用它去降低长度较大的列表的内存占用。这个分片列表支持对列表两端进行推入操作，以及阻塞和非阻塞的弹出操作。<br>为了能够对分片列表的两端执行推入和弹出操作，程序在构建分片列表时除了需要存储组成列表的各个分片之外，还需要记录列表第一个分片的ID以及最后一个分片的ID。这里按照<code>&lt;listname&gt;:first</code>和<code>&lt;listname&gt;:last</code>的格式将内容存储到Redis字符串里。<br>除此之外，组成分片的每一个分片都会被命名为<code>&lt;listname&gt;:&lt;shardid&gt;</code>并按顺序进行分配。</p><h4 id="将元素推入分片列表"><a href="#将元素推入分片列表" class="headerlink" title="将元素推入分片列表"></a>将元素推入分片列表</h4><p>在将元素推入分片列表之前，程序需要将数据拆分成块以便进行发送。因为在程序向分片列表发送数据的时候，虽然可以直到列表的总容量，但并不清楚是否有客户端正在对列表进行阻塞弹出操作，因此用户在推入大量元素的时候，程序可能需要进行多次数据发送操作。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">shard_push_helper</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token operator">*</span>items<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    items <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span>    total <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> items<span class="token punctuation">:</span>        pushed <span class="token operator">=</span> sharded_push_lua<span class="token punctuation">(</span>conn<span class="token punctuation">,</span>            <span class="token punctuation">[</span>key <span class="token operator">+</span> <span class="token string">':'</span><span class="token punctuation">,</span> key <span class="token operator">+</span> <span class="token string">':first'</span><span class="token punctuation">,</span> key <span class="token operator">+</span> <span class="token string">':last'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span>kwargs<span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> items<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        total <span class="token operator">+=</span> pushed        <span class="token keyword">del</span> items<span class="token punctuation">[</span><span class="token punctuation">:</span>pushed<span class="token punctuation">]</span>    <span class="token keyword">return</span> total<span class="token keyword">def</span> <span class="token function">sharded_lpush</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token operator">*</span>items<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> shard_push_helper<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token operator">*</span>items<span class="token punctuation">,</span> cmd<span class="token operator">=</span><span class="token string">'lpush'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sharded_rpush</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token operator">*</span>items<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> shard_push_helper<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token operator">*</span>items<span class="token punctuation">,</span> cmd<span class="token operator">=</span><span class="token string">'rpush'</span><span class="token punctuation">)</span>sharded_push_lua <span class="token operator">=</span> script_load<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''local max = tonumber(redis.call('config', 'get', 'list-max-ziplist-entries')[2])if #ARGV &lt; 2 or max &lt; 2 then return 0 endlocal skey = ARGV[1] == 'lpush' and KEYS[2] or KEYS[3]local shard = redis.call('get', skey) or '0'while 1 do    local current = tonumber(redis.call('llen', KEYS[1]..shard))    local topush = math.min(#ARGV - 1, max - current - 1)    if topush &gt; 0 then        redis.call(ARGV[1], KEYS[1]..shard, unpack(ARGV, 2, topush - 1))        return topush    end    shard = redis.call(ARGV[1] == 'lpush' and 'decr' or 'incr', skey)end'''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上就是将元素推入列表的实现，下面简单讲解一下Lua脚本所做的操作：</p><ol><li>首先检查每个列表分片的最大长度，如果没有元素需要推入，或压缩列表的最大长度太小，拒绝推入。</li><li>接下来根据要执行的命令获取分片列表的一端</li><li>在循环中先获取当前分片剩余的大小，在允许的情况下尽可能多的推入元素。此外在列表里保留一个节点的空间用来应对可能的阻塞弹出操作。</li><li>如果分片已经装满，修改该分片的首个/末尾分片的编号，将数据推入新的分片中。</li></ol><p>限制：由于这个分片列表的实现无法预知元素会被推入哪一个分片里，因此无法被应用到多台服务器。</p><h4 id="从分片中弹出元素"><a href="#从分片中弹出元素" class="headerlink" title="从分片中弹出元素"></a>从分片中弹出元素</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sharded_lpop</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> sharded_list_pop_lua<span class="token punctuation">(</span>        conn<span class="token punctuation">,</span> <span class="token punctuation">[</span>key<span class="token operator">+</span><span class="token string">':'</span><span class="token punctuation">,</span> key<span class="token operator">+</span><span class="token string">':first'</span><span class="token punctuation">,</span> key<span class="token operator">+</span><span class="token string">':last'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'lpop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sharded_rpop</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> sharded_list_pop_lua<span class="token punctuation">(</span>        conn<span class="token punctuation">,</span> <span class="token punctuation">[</span>key<span class="token operator">+</span><span class="token string">':'</span><span class="token punctuation">,</span> key<span class="token operator">+</span><span class="token string">':first'</span><span class="token punctuation">,</span> key<span class="token operator">+</span><span class="token string">':last'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'rpop'</span><span class="token punctuation">]</span>    <span class="token punctuation">)</span>sharded_list_pop_lua <span class="token operator">=</span> script_load<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''local skey = ARGV[1] == 'lpop' and KEYS[2] or KEYS[3]local okey = ARGV[1] ~= 'lpop' and KEYS[2] or KEYS[3]local shard = redis.call('get', skey) or '0'local ret = redis.call(ARGV[1], KEYS[1]..shard)if not ret or redis.call('llen', KEYS[1]..shard) == '0' then    local oshard = redis.call('get', okey) or '0'    if shard == oshard then        return ret    end    local cmd = ARGV[1] == 'lpop' and 'incr' or 'decr'    shard = redis.call(cmd, skey)    if not ret then        ret = redis.call(ARGV[1], KEYS[1]..shard)    endendreturn ret'''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从分片中弹出元素的操作非常简单。程序需要找到位于列表一端的分片，然后在分片非空的情况下，从分片中弹出一个元素。如果列表在执行弹出操作之后不再包含任何元素，就对记录这列表端分片信息的字符串键进行修改。完成修改之后，如果当前列表中还有元素，就尝试从新的分片中弹出元素。</p><h4 id="对分片列表执行阻塞弹出操作"><a href="#对分片列表执行阻塞弹出操作" class="headerlink" title="对分片列表执行阻塞弹出操作"></a>对分片列表执行阻塞弹出操作</h4><p>因为Lua脚本和<code>WATCH/MULTI/EXEC</code>事务目前提供的语义和命令在某些情况下还是可能会产生不正确的数据，所以在不需要实际地阻塞客户端并且等待请求的情况下，程序应该尽可能地使用分片列表的非阻塞操作。<br>要想实现阻塞弹出需要使用到一些特殊操作。首先，程序会在一个给定的时限里面，尝试通过执行非阻塞弹出操作来获得元素。如果没有成功获得，那将在循环中执行几个指定的步骤直到获取到元素或超时。<br>在这一系列操作中，首先要执行的就是非阻塞弹出命令。如果未能弹出元素，就会获取第一个和最后一个分片ID，然后对指定端点尝试弹出。<br>由于通信往返的延迟，在程序获取分片列表端点之后，直到开始尝试弹出这段时间里，列表的端点可能已经发生了变化。为了解决这个问题，程序在执行阻塞弹出操作之前，会先发送一个被流水线包裹的<em>EVAL</em>脚本调用。这个脚本会检查程序是否在尝试从正确的列表里弹出元素，如果是的话不做任何操作，之后的阻塞弹出也会正常进行。但如果弹出操作针对的是错误的列表，就需要向那个列表推入一个额外的伪元素，这个元素会在之后被弹出操作弹出，告诉客户端分片端点发生变化。<br>尽管如此，仍存在一个潜在的竞态条件：如果一个客户端在Lua脚本执行之后，弹出操作之前向服务器执行了推入或弹出操作，就会导致程序得到不正确的数据。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">DUMMY <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sharded_bpop_helper</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> pop<span class="token punctuation">,</span> bpop<span class="token punctuation">,</span> endp<span class="token punctuation">,</span> push<span class="token punctuation">)</span><span class="token punctuation">:</span>    pipe <span class="token operator">=</span> conn<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span>    timeout <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">64</span>    end <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> timeout    <span class="token keyword">while</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> end<span class="token punctuation">:</span>        result <span class="token operator">=</span> pop<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">)</span>        <span class="token keyword">if</span> result <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> DUMMY<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> result        shard <span class="token operator">=</span> conn<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key <span class="token operator">+</span> endp<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token string">'0'</span>        sharded_bpop_helper_lua<span class="token punctuation">(</span>pipe<span class="token punctuation">,</span> <span class="token punctuation">[</span>key <span class="token operator">+</span> <span class="token string">':'</span><span class="token punctuation">,</span> key <span class="token operator">+</span> endp<span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span>shard<span class="token punctuation">,</span> push<span class="token punctuation">,</span> DUMMY<span class="token punctuation">]</span><span class="token punctuation">,</span> force_eval<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token builtin">getattr</span><span class="token punctuation">(</span>pipe<span class="token punctuation">,</span> bpop<span class="token punctuation">)</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> shard<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token punctuation">(</span>pipe<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">or</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> result <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> DUMMY<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> result<span class="token keyword">def</span> <span class="token function">sharded_blpop</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> sharded_bpop_helper<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> sharded_lpop<span class="token punctuation">,</span> <span class="token string">'blpop'</span><span class="token punctuation">,</span> <span class="token string">':first'</span><span class="token punctuation">,</span> <span class="token string">'lpush'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sharded_brpop</span><span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> sharded_bpop_helper<span class="token punctuation">(</span>conn<span class="token punctuation">,</span> key<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> sharded_rpop<span class="token punctuation">,</span> <span class="token string">'brpop'</span><span class="token punctuation">,</span> <span class="token string">':last'</span><span class="token punctuation">,</span> <span class="token string">'rpush'</span><span class="token punctuation">)</span>sharded_bpop_helper_lua <span class="token operator">=</span> script_load<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''local shard = redis.call('get', KEYS[2]) or '0'if shard ~= ARGV[1] then    redis.call(ARGV[2], KEYS[1]..ARGV[1], ARGV[3])end'''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>缓存雪崩是指，大量的key过期或Redis宕机导致大量请求到达数据库，使得数据库压力骤增。严重时可能会造成数据库宕机，甚至引发一系列连锁反应。</p><p><strong>解决措施</strong></p><ol><li><p>大量key过期</p><ul><li>均匀设置过期时间</li><li>互斥锁<br>业务线程处理用户请求时，如果发现数据不在缓存中，就加一个互斥锁，保证同一时间只有一个请求在构建缓存。当查询完毕时，将查询结果插入到Redis，其他请求就可以继续从缓存中获取数据。<ul><li>双key策略<br>互斥锁策略的缺点在于，如果构建缓存的线程长时间不释放锁，就会导致其余线程都被阻塞住。而双key策略则很好的解决了这个问题，对缓存数据可以使用两个key，一个主key设置过期时间，一个从key不设置过期时间。当线程发现主key过期了，就去从key获取数据。<br>这样的好处在于，即使缓存过期，服务端也可以做出快速响应。当主key过期时通知后台进程进行更新，不会阻塞其他请求。</li><li>后台更新缓存<br>缓存不再设置过期时间，由后台线程定时更新缓存。不过这么做的缺陷在于，Redis可能会因为系统资源紧张而淘汰一些key，此时对于客户端来说这些数据就好像消失了一样。<br>这种问题的解决方案是，当业务线程发现缓存失效后，就发送通知给后台进程，让他更新对应的key的缓存。</li></ul></li></ul></li><li><p>Redis宕机</p><ol><li>构建高可用Redis集群</li><li>服务熔断或请求限流</li></ol></li></ol><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>缓存击穿指的是<strong>热点数据</strong>的缓存过期，导致大量请求到达数据库。</p><p>处理方案和缓存雪崩类似，可以使用互斥锁策略或后台更新缓存策略</p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>缓存穿透指的是，某个请求的目标既不存在于缓存中也不存在于数据库中，这就导致无法构建缓存。当有大量这种请求到来时，就会给数据库造成巨大压力。</p><p><strong>解决方案</strong></p><ol><li><p>非法请求的限制<br>入参校验，若判断出是恶意请求直接返回错误</p></li><li><p>缓存空值或默认值</p></li><li><p>使用布隆过滤器<br>在写入数据库时，使用布隆过滤器进行标记，当请求到来时通过布隆过滤器判断数据是否存在于数据库中，避免恶意请求到达数据库。</p></li></ol><blockquote><p>布隆过滤器<br>布隆过滤器包含两个部分：初始值都为0的位图数组，N个哈希函数。当要进行存储操作时，通过N个哈希函数计算出N个哈希值，并将这N个哈希值于位图数组长度取模，将位图对应位置置为1。<br>当查询数据时，计算N个哈希值，查看对应位是否都为1，成立则代表存在。<br>不过由于可能的哈希冲突，过滤器判断存在不代表一定存在，但判断不存在就代表一定不存在。</p></blockquote><h3 id="数据库和缓存一致性"><a href="#数据库和缓存一致性" class="headerlink" title="数据库和缓存一致性"></a>数据库和缓存一致性</h3><p>要保证数据库和缓存的一致性，最容易想到的方式就是更新数据库的同时更新缓存。但这种方式会有很严重的并发问题，如果线程A先更新了数据库，然后线程B更新了数据库与缓存，最后线程A更新了缓存。这就会导致数据库与缓存不一致。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/20230126115012.png" alt="先更新数据库，再更新缓存"></p><p>先更新缓存再更新数据库也会有一样的问题</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/20230126115051.png" alt="先更新缓存，再更新数据库"></p><p>为了解决同时更新带来的并发问题，我们需要采取Cache-Aside策略</p><p>也就是当数据库更新时，将缓存删除，读取时再重新构建缓存。</p><p>不过这种策略也同样有点问题，如果先删除缓存再更新数据库，仍可能出现不一致。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/20230126115612.png" alt="先删除缓存，再更新数据库"></p><p>先更新数据库再删除缓存也有可能出现不一致，不过这种情况出现的概率非常低。因为缓存的操作远比数据库快，后来的请求不太可能在先到的更新请求的数据库更新与缓存清除操作间完成所有任务。</p><p>综上所述，最好的方式是先更新数据库再删除缓存。而为了万无一失，最好还是给缓存key设置一个过期时间。</p><p>不过即使采用了上述所有策略，仍有可能会出现bug，一旦缓存删除失败就会导致旧数据暴露给用户。</p><p>究其原因是我们保证两个操作的原子性。这有以下两种解决方案：</p><ol><li><p>重试机制<br> 将缓存删除操作存储到消息队列中，由消费者读取数据并重试删除操作</p></li><li><p>订阅MySQL binlog<br>通过类似Canal的中间件订阅MySQL的binlog，获取具体需要的操作，然后再执行缓存删除</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/20230126120926.png" alt="Canal工作流程"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> python </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2022/10/09/network/"/>
      <url>/2022/10/09/network/</url>
      
        <content type="html"><![CDATA[<p>计算机网络的基础知识，以及一部分开发必备网络知识</p><span id="more"></span><h1 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h1><h2 id="前置基础"><a href="#前置基础" class="headerlink" title="前置基础"></a>前置基础</h2><h3 id="数据包交换原则"><a href="#数据包交换原则" class="headerlink" title="数据包交换原则"></a>数据包交换原则</h3><p>数据包：<strong>独立的</strong>，包含将数据送到目的地必要信息的数据集合<br>数据包交换：独立的处理任何一个到来的数据包，在对应链路空闲时将该数据包发送出去。<br>流：一系列属于相同起点与终点的数据<br>数据包交换不需要流的状态，如果流是有状态的，那会给交换机带来巨大的管理压力，大量需要管理的状态也会拖慢网络的速度。同时，如果某一端出现了问题，也不会导致无限重连，给网络带来巨大的压力，因为流不需要记录数据包是否抵达，也就不需要为数据丢失负责。</p><h3 id="分层原则"><a href="#分层原则" class="headerlink" title="分层原则"></a>分层原则</h3><p>在计算机网络中，按照TCP/IP分层方式，将其分为了五层。这种分层原则在很多地方都有应用，在正式开始介绍网络之前，先了解一下分层原则的含义。<br>层(layer)代表的是功能组件，每一层都借助下层提供的服务以及自身带有的处理，为上层提供定义良好的服务。层与层之间的交互也是沿着层级划分顺序的传递。<br>分层的价值：</p><ol><li>模块化：他将系统分解为更小更易管理的模块</li><li>定义良好的服务：每一层都为上层提供定义良好的服务</li><li>重用：上层可以借助下层提供的服务进一步实现功能</li><li>关注点分离：每一层都可以专注于自身工作，可以独立发展</li><li>持续优化：由于每一层之间的交互都只涉及简单的数据传输，因此可以很轻易的做出变动或更改。</li></ol><h3 id="封装原则"><a href="#封装原则" class="headerlink" title="封装原则"></a>封装原则</h3><p>互联网中各层级的协议多种多样，为了继续遵循关注点分离以及方便数据包的解析，将数据包按照层级进行一层一层的封装，在原有的载荷上添加本层需要传递的数据包的头和尾。<br>封装的体现就在每一层拿到传来的数据之后都把它当作有效载荷 (一坨要传递的数据)而不需要去管数据使用的协议，传递的信息等等，只需要在此基础上添加自己要传递的信息即可。思想上类似Composite模式，用递归的方式去处理层级关系。</p><h2 id="输入URL到网页显示期间的操作"><a href="#输入URL到网页显示期间的操作" class="headerlink" title="输入URL到网页显示期间的操作"></a>输入URL到网页显示期间的操作</h2><ol><li><p>HTTP</p><p>浏览器首先要做的是将输入的域名解析为IP地址，这里使用到了DNS域名解析服务。</p><p>它的大致流程为，浏览器向DNS域名服务器发送一个请求，查询指定域名对应的IP地址，DNS Server使用循环或递归查询方式获取到对应的IP并返回给浏览器。浏览器获取到地址后，会将这个地址缓存起来，这样之后请求就不用再请求DNS Server了。</p><p>浏览器获取到IP地址后就可以开始打包数据了，浏览器借助URL确定服务器地址以及目标文件名，这些信息会被用来生成HTTP请求信息。</p></li><li><p>协议栈</p><p>接下来数据包就会被交给OS中的协议栈</p><p>协议栈的内部分为几个部分，分别承担不同的工作。上下关系是有一定的规则的，上面的部分会向下面的部分委托工作，下面的部分收到委托的工作并执行。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/notes/20230303200247.png"></p></li><li><p>TCP</p><p>通过协议栈，可以确定接下来由TCP处理这个数据包</p><p>TCP的详细解释看下面的内容</p><p>如果TCP发现报文的数据长度过长（也就是HTTP打包完交给它的数据，不包括TCP头部），超过了MSS，就会进行分片处理，每个分片都会打上TCP头信息。</p></li><li><p>IP</p><p>传输层更多的作用是确定数据如何被发送以及如何被接收，真正的传输工作交给网络层来实现。网络层的主要协议就是IP协议。</p><p>IP协议里会指定源IP与目的IP，同时指明协议号，表示这个数据是要按照哪个传输层协议进行传输。</p><p>IP协议最重要的一个功能就是<strong>路由</strong>，每个主机中都会存储一个路由表，其中记录了各个目的地址的转发规则。路由表是通过主机自主学习生成的，主机每收到一个数据包，都会看一眼它从哪里来的，这样就可以知道之后收到相同网段的数据要往哪里发送了。如果主机发现路由表中没有存储对应网段应该转发到哪个路由，就会发到一个默认路由去。</p></li><li><p>MAC</p><p>MAC协议是以太网内的协议，这里的以太网也可以理解为局域网，它负责某个网段内部的数据传输。MAC协议需要知道发送方MAC地址与接收方MAC地址。</p><p>当某个机器不知道接收方的MAC时，就轮到ARP协议出场了。它会在当前网段广播询问指定IP的MAC地址，接收方在收到这条广播之后就会将自己的MAC地址发送给发送方。发送方在收到之后，将它存储到ARP缓存里，然后将数据发送过去。</p></li><li><p>网卡</p><p>网络包只是存储在内存中的一组数据，要想发送给其他主机，需要利用网卡，将数字信号转换为电信号，然后才能在网线上传输</p></li><li><p>交换机</p><p>交换机是用于将网络包完好无损的发送到目的地，它工作在链路层，是一个二层网络设备。</p><p>交换机在发现电信号到达网络接口后，会将电信号转换为数字信号，然后通过末尾的FCS校验错误，如果没有问题就放到缓冲区去。</p><p>交换机内部也有一个MAC地址和端口的映射表，它会根据数据包的MAC地址来判断接下来要往哪个端口转发。如果目标MAC从来没有被记录，那么交换机会将这个数据包发送到自己的所有端口上去。</p></li><li><p>路由器</p><p>路由器在收到数据包之后，会检查MAC地址，看这是不是发送给自己的数据包，如果不是，就直接丢弃，否则放入缓冲区。在完成包接收操作之后，路由器会去掉包开头的MAC头部，因为MAC只用于单个网段，在完成一跳之后，它的使命就完成了。接下来路由器会根据自己的路由表决定要把数据发送到哪里去。</p><p>首先根据路由表的网关列判断对方的地址：</p><ol><li>如果网关是个IP，代表这个数据包要到另一个网段去，需要路由器继续转发。</li><li>如果网关为空，代表已经找到了目标地址</li></ol><p>在知道目标IP之后，就可以使用ARP协议获得对方的MAC地址，然后将数据发送出去，数据会到达另一个交换机，并在中转之后到达下一个路由器。接下来路由器会再做一遍相同的操作，直到找到目标。</p></li></ol><h2 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h2><p>运输层的主要职责是在应用程序与应用程序之间传输数据。</p><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>当两个应用程序通过TCP进行交互时，他会在二者之间建立一条双向连接。在连接的两端，TCP会维护各维护一个状态机来跟踪当前连接的状态。</p><h4 id="TCP连接的建立与拆除"><a href="#TCP连接的建立与拆除" class="headerlink" title="TCP连接的建立与拆除"></a>TCP连接的建立与拆除</h4><p>TCP建立连接的步骤</p><ol><li>A向B发送一条数据，其中包含SYN字段，表示A希望与B进行连接</li><li>B接收到数据，向A返回确认，并表示B希望与A进行连接</li><li>A接收到连接请求，返回确认，连接建立。</li></ol><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/network/20220909154857.png"></p><p>TCP拆除连接的步骤</p><ol><li>A向B发送FIN信号，表示要断开与B的连接</li><li>B接收到信号后不再从连接中获取新数据，返回一个ACK</li><li>A接收到确认后关闭<strong>A到B的连接</strong>，但B可能还有数据要传输，因此B到A的连接还没有被关闭。</li><li>B完成数据传输后，向A发送FIN信号，关闭B到A的连接</li><li>A收到信号，返回确认，连接正式关闭。<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/network/20220909155324.png"></li></ol><h4 id="TCP服务模型"><a href="#TCP服务模型" class="headerlink" title="TCP服务模型"></a>TCP服务模型</h4><table><thead><tr><th>属性</th><th>表现</th></tr></thead><tbody><tr><td>字节流</td><td>可靠的字节流传输服务</td></tr><tr><td>可靠传输</td><td>1. 发送确认来确保<br> 2. 使用检验和发现传输错误的数据<br> 3. 使用序列号可以发现没有<br> 4. 流量控制，避免淹没目的主机，同时也能有效利用带宽</td></tr><tr><td>顺序</td><td>数据都是按序传输到应用程序</td></tr><tr><td>拥塞控制</td><td>√</td></tr></tbody></table><h4 id="TCP报文结构"><a href="#TCP报文结构" class="headerlink" title="TCP报文结构"></a>TCP报文结构</h4><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/network/20220909160541.png"></p><p>Source/Destination port:源端口，目的端口，用于标注报文来自/去往主机的哪一个应用程序<br>Sequence:当前报文携带的数据的首个字节，在整个数据中的位置<br>Acknowledgment Sequence:已经确定收到了#字节前的部分，期待从#开始之后的数据内容<br>HLEN:报文头部大小<br>Checksum:检验和，检验报文是否在传输过程中损坏<br>PSH:告诉连接的另一端，立即发送数据而不要等待接收到指定数量的数据一起发送。</p><h4 id="TCP三次握手的原因"><a href="#TCP三次握手的原因" class="headerlink" title="TCP三次握手的原因"></a>TCP三次握手的原因</h4><ul><li><p>阻止重复历史连接的初始化<br>三次握手的首要原因是为了防止旧的重复连接初始化造成混乱。现在假设客户端向服务器发起连接，附带的序列号为seq1，但是在服务器接收到请求之前，客户端宕机了，恢复之后，客户端重新发起了一次建立连接请求。服务端首先接收到的大概率是seq1的连接请求，之后服务端响应客户端，此时服务端根据响应回来的ack判断该连接是否是一个历史连接，如果是就向服务器发送RST中止连接。<br>现在考虑一下如果只有两次握手会导致什么，服务端在接收到请求之后直接响应客户端并建立连接，发送数据，但对客户端来说，这是一个历史连接，并不生效。这就导致网络资源被白白浪费。而三次握手给了发起方一个判断请求是否有效的机会，可以有效防止资源的浪费。</p></li><li><p>同步双方初始序列号<br>序列号是可靠传输的一个关键因素：<br>(1) 接收方可以去除掉重复数据<br>(2) 接收方可以根据数据包的序列号按序接收<br>(3) 可以标识发送出去的数据包中，哪些是对方成功接收到的<br>第二三次握手的作用就是确保双方已经知道对方的序列号，自己接下来发送的数据要按照什么序列号来传输。</p></li><li><p>避免资源浪费<br>第三次握手还有一个作用就是让服务器知道客户端已经收到了自己发出去的数据，完成了连接的建立。如果只有两次握手，那么服务端就不清楚客户端究竟有没有收到自己的数据，因此对于每一个SYN都只能主动建立一个连接。如果客户端发送的SYN被阻塞，重复多次发送SYN，就会导致服务端建立多个连接，浪费资源。</p></li></ul><h4 id="TCP每次建立连接的初始化序列号不同的原因"><a href="#TCP每次建立连接的初始化序列号不同的原因" class="headerlink" title="TCP每次建立连接的初始化序列号不同的原因"></a>TCP每次建立连接的初始化序列号不同的原因</h4><blockquote><p>title: 主要原因</p><ol><li>防止历史报文被下一个相同四元组的连接接收</li><li>防止黑客伪造的相同序列号的TCP报文被对方接收</li></ol></blockquote><p>具体场景：<br>客户端和服务端建立一个TCP连接，客户端向服务端发送了一个数据包。如果客户端与服务端中有一方宕机，在重启后重新建立TCP连接。现在假设每次初始序列号不变，若在上一次连接期间发送的数据包此刻姗姗来迟，可能会由于它恰好在接收窗口内而被接收方接收过去引发混乱。<br>这也同样是TCP断开连接时在最后等待一段时间的原因：让本次连接的所有数据包都消失在网络当中。</p><h4 id="TCP分片的意义"><a href="#TCP分片的意义" class="headerlink" title="TCP分片的意义"></a>TCP分片的意义</h4><blockquote><p>title: 基本术语<br>MTU：一个网络包的最大长度，一般为1500字节。包含IP头部，TCP头部以及数据<br>MSS：除去IP和TCP头部之后，一个网络包容纳的TCP数据的最大长度</p></blockquote><p>IP分片操作：当IP层发现有一个大小超过MTU的数据要发送，他就会将数据进行分片发送。目标主机的IP层接收之后重新组装再交付给上层。<br>这样做看似非常完美，但IP协议是个尽力而为协议，他不会进行超时重传。也就是如果有一个IP分片丢失，对于上层的TCP来说就是有一个TCP报文段没有收到，它会重传整个TCP报文段，这显然是非常低效的。<br>因此如果我们将分片的任务交给TCP，它确保每一个报文段中搭载的数据不会超过MSS(这相当于保证了IP层不会分片)。那么即使发生丢包，也是以MSS为单位重传。</p><h3 id="TCP断开连接"><a href="#TCP断开连接" class="headerlink" title="TCP断开连接"></a>TCP断开连接</h3><ol><li>客户端准备关闭链接，发送一个首部<code>FIN</code>标志位为1的报文，之后进入<code>FIN_WAIT_1</code>状态 (表明客户端已经没有数据要发送了)</li><li>服务端收到报文后，向客户端发送ACK应答，进入<code>CLOSE_WAIT</code>状态</li><li>客户端收到ACK响应后进入<code>FIN_WAIT_2</code>状态 (服务端表示已经接受到请求，但可能还有数据要处理和发送)</li><li>服务端处理完数据之后，向客户端发送<code>FIN</code>报文，之后服务端进入<code>LAST_ACK</code>状态 (服务端处理完毕，向客户端表示自己这边可以关闭连接了)</li><li>客户端收到服务器的FIN之后，回应一个ACK，进入<code>TIME_WAIT</code>状态</li><li>服务端接受到ACK之后，进入CLOSE状态，至此服务端已经完成连接的关闭</li><li>客户端经过<strong>2MSL</strong>时间之后，自动进入CLOSE状态</li></ol><p>MSL：报文最大生存时间<br>TIME_WAIT等待2倍MSL的原因是：网络中可能存在来自发送方的数据包，当这些发送方的数据包被接收方处理后优惠向对方发送响应。一来一回需要等待2倍时间。</p><p>PS：客户端在接收到重复FIN之后会重置2MSL</p><h3 id="TIME-WAIT存在的原因"><a href="#TIME-WAIT存在的原因" class="headerlink" title="TIME_WAIT存在的原因"></a>TIME_WAIT存在的原因</h3><p>只有主动发起关闭的一方才会有TIME_WAIT状态 他主要有两个目的：</p><ol><li><p>防止历史连接的数据被之后相同四元组的连接接受 </p></li><li><p>保证被动关闭连接的一方能被正确关闭 TIME_WAIT可以保证最后的ACK能被接收方接收到并帮助它正确关闭。如果发送方不进行等待，直接关闭连接，一旦ACK丢失，被动关闭方就会尝试重传FIN，由于发送方连接已关闭，它会返回一个RST给被动关闭方，而在被动关闭的一方眼里，这显然是一个错误信息。这种关闭方式并不应该出现在一个可靠的协议中。 客户端接收到重复FIN会重置TIME_WAIT也是为了保证服务端正确接收到了ACK。</p></li></ol><h3 id="TCP重传"><a href="#TCP重传" class="headerlink" title="TCP重传"></a>TCP重传</h3><p>TCP目前具有的重传机制： - 超时重传 - 快速重传 - SACK - D-SACK</p><h3 id="快速重传"><a href="#快速重传" class="headerlink" title="快速重传"></a>快速重传</h3><p>快速重传不像超时重传那样以时间为驱动，而是以数据为驱动。当接收方接收到发送方发来的数据之后，会将自己期待的下一个数据的起始序列号返回给发送方。如果发送方收到了三个同样的ACK，就可以判断数据包在网络中丢失了，需要重传。 快速重传虽然解决了超时的问题，但是他依旧无法解决重传多少数据包的问题，因为发送方只能判断出从某个序号开始有数据丢失，不知道丢失了多少。 为了解决这个问题，又引入了SACK的概念</p><h3 id="SACK"><a href="#SACK" class="headerlink" title="SACK"></a>SACK</h3><p>SACK，选择性确认。这种方式需要在TCP头部的选项字段里加一个SACK的字段，它会将接收端</p><p><strong>已接受到</strong></p><p>的数据的信息发送给发送方，发送方根据这个判断出哪些数据接收到了，哪些数据没收到。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/network/20221011222824.png" alt="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/network/20221011222824.png"></p><h3 id="D-SACK"><a href="#D-SACK" class="headerlink" title="D-SACK"></a>D-SACK</h3><p>主要使用了SACK来告诉发送方有哪些数据被<strong>重复接收</strong> 如果ACK丢失了，发送方在超时之后会重传第一个数据包。接收方收到后会发现数据是重复收到的，于是返回SACK = 重复数据序号范围。如果ACK的值大于SACK，就代表这个SACK是D-SACK。这样发送方就知道了数据没有丢，是ACK丢失了。 如果由于网络延时导致触发了数据重传，冗余数据到达服务端后，它也会将重复数据的范围返回过去。由于客户端在之前已经接收到了那部分冗余数据的ACK，因此他可以判断出数据包是网络延迟了。 D-SACK好处： - 发送方可以了解到发出去的包是丢失了，还是接收方的ACK包丢了 - 可以了解到是否发送方的数据包被网络延迟了 - 可以了解到网络中是否把发送方的数据包复制了</p><h3 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><p>TCP中每发送一个数据都要进行一次ACK。只有当上一个数据包确认收到了才发送下一个。这样做的缺点是效率比较低，如果RTT很长，通信的效率就会非常低。 因此TCP引入了滑动窗口这个概念，即使在往返时间较长的情况下，他也不会降低网络通信的效率。 窗口的本质其实就是一个缓冲区，发送方主机在等到ACK之前，必须在缓冲区中保留已发送的数据，如果收到ACK，数据就可以从缓冲区清除。而即使中途有ACK丢失了，也可以通过之后接收到的ACK确认数据是否收到。</p><aside>🏓 title: 窗口大小的选择TCP头部有一个字段Window，表示窗口的大小。这个字段是接收端告诉发送端自己还有多少缓冲区可用，帮助发送端进行流量控制。发送方可以根据Window的大小判断自己应该发送多大的数据。</aside><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/network/20221012094640.png" alt="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/network/20221012094640.png"></p><p>发送方滑动窗口</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/network/20221012094743.png" alt="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/network/20221012094743.png"></p><p>接收方滑动窗口</p><aside>🏓 title: 流量控制的特殊情况当服务端资源非常紧张时，OS可能会直接减少接收缓冲区大小。如果OS先减少了缓存，然后再收缩窗口就会出现错误。假设服务端在收到客户端数据之后减少窗口大小，同时又因系统资源紧张进一步缩小了缓冲区。此时服务端接收缓冲区的大小就会远小于接收端的预期。如果发送端在收到Window大小之前就发送了一个数据，该数据一旦超出接收端窗口大小就会被丢弃。而发送端在收到Window大小之后又发现自己的窗口无法压缩到目标值，此时就会陷入非常尴尬的状态。上面的问题究其原因是服务端先减少了缓冲区大小再收缩窗口(先斩后奏)，因此TCP强制要求先收缩窗口，过一段时间再减少缓存。</aside><h3 id="窗口关闭"><a href="#窗口关闭" class="headerlink" title="窗口关闭"></a>窗口关闭</h3><p>定义：窗口大小为0时，就会阻止发送方给接收方传递数据，直到窗口变为非0为止。</p><blockquote><p>窗口关闭的潜在风险</p></blockquote><p>接收方的窗口大小信息会跟着ACK报文发送给发送方。如果发生了窗口关闭，在接收端完成数据处理之后，向发送端发送一个ACK，表示自己可以继续接收数据。假如这个ACK丢失了，就会导致发送端一直在等待接收端处理完数据，而接收端一直在等待发送端传输数据。</p><p>为了解决这个问题，TCP为每一个连接设有一个持续定时器，只要TCP连接一方收到零窗口通知，就会启动持续计时器。如果持续计时器超时，就会发送窗口探测报文，对方在确认这个探测报文时，给出自己的接收窗口大小。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/network/20221012102231.png" alt="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/network/20221012102231.png"></p><h3 id="糊涂窗口综合症"><a href="#糊涂窗口综合症" class="headerlink" title="糊涂窗口综合症"></a>糊涂窗口综合症</h3><p>如果发送方的发送速度比接收方处理数据的速度快，就会导致发送方窗口越来越小。最后如果每当接收方稍微腾出一点空间，发送方就急着继续发送，就会导致网络资源利用率非常低，也就是糊涂窗口综合症。 它的解决思路也非常简单： - 接收方不通告小窗口给发送方 当窗口大小小于MSS和缓存空间一半的最小值时，就会通告发送方窗口为0，阻止发送方继续发数据。 - 发送方避免发送小数据 使用<code>Nagle</code>算法，该算法的思路是延时处理，只有满足以下两个条件中的任意一个条件，才可以发送数据： - 等待窗口大小&gt;=MSS，数据大小&gt;=MSS - 收到之前发送的数据的ACK PS：只有上述两个方案同时满足，才能避免糊涂窗口综合症。假如接收方仍旧会通告小窗口给发送方，那么Negla算法的第二个条件仍然会被满足，也依旧会发送小数据。</p><aside>🏓 title: TCP延迟确认当发送没有携带数据的ACK时，效率是非常低的，因为每个数据包都要加上40字节的IP头和TCP头。因此为了解决ACK传输效率低的问题，就引入了TCP延迟确认。策略：当有响应数据要发送时，ACK会随着响应数据一起发送给对方如果没有响应数据要发送，ACK会延迟一段时间，等待是否有响应数据可以一起发送。如果在延迟等待期间，对方的第二个数据包到达了，就会立刻发送ACK<p>但延迟确认和Nagle算法不宜同时使用，因为延迟确认会延后ACK的发送，而Nagle算法需要上一个数据的ACK才会继续发送，这样就会导致服务端一直等到延迟上限才发送数据</p></aside><h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><p>拥塞控制存在的目的是，当网络负载较大时，避免发送方持续高速输出导致网络负载进一步加重。 因此为了调节发送方要发送的数据量，引入了拥塞窗口这个概念，从此，发送窗口的大小就是拥塞窗口与接收窗口的最小值。</p><blockquote><p>慢启动</p></blockquote><p>规则：发送方每收到一个ACK，拥塞窗口大小就会+1。当拥塞窗口大小达到慢启动门限(ssthresh)之后，就会停止慢启动算法。</p><blockquote><p>拥塞避免算法</p></blockquote><p>规则：每当收到一个ACK，cwnd就增加1/cwnd 拥塞避免算法将原本慢启动的指数级增长变成了线性增长。</p><blockquote><p>拥塞发生</p></blockquote><p>一旦发生了超时重传，就会启动拥塞发生算法，此时会将ssthresh设置为cwnd/2 同时将cwnd重置为1。 接下来就重新开始慢启动，不过这种方式较为激进，会造成网络卡顿。</p><p>而当发生了快速重传，则是选用另一套逻辑。因为既然ACK还能顺利抵达那就代表网络中的阻塞情况并不是特别严重，此时将cwnd设为cwnd/2，ssthresh=cwnd，并进入快速恢复算法。</p><blockquote><p>快速恢复</p></blockquote><ol><li>首先将cwnd设为ssthresh+3(接收到了3个ACK)</li><li>然后重传丢失的数据包</li><li>如果收到重复的ACK，将cwnd增加1</li><li>如果收到新数据的ACK，将cwnd设置为第一步中的ssthresh值。这说明D-SACK的数据全部都已经收到，恢复过程已结束，可以再次进入拥塞避免状态。</li></ol><aside>🏓 title: 收到重复ACK扩大拥塞窗口的原因收到重复ACK就代表目前还处于重传丢失的数据包阶段，快速恢复的首要目的是尽快将丢失的数据包发送给目标，因此需要扩大拥塞窗口</aside><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/network/20221012105756.png" alt="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/network/20221012105756.png"></p><p>快速恢复图解</p><h3 id="TCP快速建立连接"><a href="#TCP快速建立连接" class="headerlink" title="TCP快速建立连接"></a>TCP快速建立连接</h3><p>在Linux3.7版本中，提供了TCP Fast Open功能，该功能可以减少TCP连接的时延。 具体流程： 1. 在第一次建立连接时，服务器将一个加密过的Cookie跟着SYN+ACK传给客户端。其他流程和常规握手相同，因此最少仍需要2RTT 2. 在之后的请求中，客户端在发起SYN的同时携带上Cookie，服务端根据Cookie中的内容解析出TCP相关的信息，这样就可以直接跳过握手过程</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/netty/45.jpg" alt="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/netty/45.jpg"></p><p>快速连接建立过程</p><h3 id="TCP是面向字节流的协议"><a href="#TCP是面向字节流的协议" class="headerlink" title="TCP是面向字节流的协议"></a>TCP是面向字节流的协议</h3><p>我们通常说TCP是面向字节流的协议，UDP是面向报文的协议，这是因为OS对二者的发送方的机制不同。 首先来说说UDP为什么是面向报文的协议。当用户通过UDP传输消息时，OS<strong>不会对消息进行拆分</strong>，因此发出去的报文中的数据部分就是完整的用户信息，也就是说每个UDP报文就是一个<strong>用户消息的边界</strong>。通俗来说就是，报文是UDP发送数据的最基本的单位，接收方以报文为单位接受数据。 接下来讲讲TCP为什么是面向字节流的协议。和UDP不同，TCP有分片机制，也就是说<strong>消息可能会被拆分成多条TCP报文</strong>，对接收方来说就无法了解到接收到的报文是之前报文的延续还是一个新的报文。因此，用户消息和TCP报文之间并非一一对应的关系，所以说TCP是面向字节流的协议。</p><blockquote><p>解决粘包</p></blockquote><p>面向字节流也就带来了粘包这个问题，这个问题要交给上层的应用层来解决。</p><ol><li>固定长度的消息 这种解决方法非常好理解，发送和接收都设置一个固定长度，这样应用程序就可以成功解析出传递的数据。</li><li>特殊字符作为边界 面向字节流的一大问题就是无法明确表示用户消息的边界，因此我们可以自定义一个用户消息的边界，一旦读取到特殊字符，就认为读完一个完整消息。典型示例就是HTTP</li><li>自定义消息结构 最后一种方式，也就是TCP使用的，自定一个消息结构，由包头和数据组成，包头大小固定(让接收方能明确接收到包头中的提示信息)。同时包头中的信息可以指明后续数据的大小。</li></ol><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>UDP只会获取需要传输的数据，然后交给网络层<br>UDP不像TCP那样保证可靠传输，一般由不需要可靠传输，或是拥有私有传输机制的应用使用。</p><h4 id="UDP报文结构"><a href="#UDP报文结构" class="headerlink" title="UDP报文结构"></a>UDP报文结构</h4><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/network/20220909162916.png"></p><p>Length:UDP数据报中数据的长度<br>Checksum:UDP中的检验和会用到IP层的一部分信息，虽然这会破坏分层原则，但也可以帮助UDP发现数据报是否传输到错误的目的地。</p><h4 id="UDP服务模型"><a href="#UDP服务模型" class="headerlink" title="UDP服务模型"></a>UDP服务模型</h4><table><thead><tr><th>属性</th><th>表现</th></tr></thead><tbody><tr><td>无连接服务</td><td>UDP不会建立连接，数据包也会以任意的顺序出现，因此如果应用程序在意数据的顺序就需要进行重排序</td></tr><tr><td>不可靠传输</td><td>1. 没有传输确认<br> 2. 没有手段发现传输信息的错误或丢失<br> 3. 没有流量控制</td></tr></tbody></table><h1 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h1><h2 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h2><p>DHCP是接入网络的主机动态获取自己的IP地址的协议，它的流程如下：</p><ol><li><p>客户端首先发送DHCP发现报文，因为它并不清楚DHCP服务端在哪里，因此它会使用UDP广播通信，它使用的目标地址是255.255.255.255:67，源IP地址是0.0.0.0:68。DHCP客户端将这个IP数据报传输给链路层，然后链路层将它广播到网络中的所有设备。</p></li><li><p>DHCP服务器收到发现报文后，使用DHCP提供报文做出响应。这里面提供可租约的 IP 地址、子网掩码、默认网关、DNS 服务器以及&nbsp;<strong>IP 地址租用期</strong>。仍然是将这个报文发送到广播地址</p></li><li><p>DHCP客户端收到多个DHCP提供报文后，从里面选择一个服务器，发送DHCP请求报文进行响应，回显配置参数，表示自己就要这个门牌号了。</p></li><li><p>最后服务器用DHCP ACK报文进行响应，客户端收到之后就可以在租用期内使用这个IP了</p></li></ol><h2 id="NAT"><a href="#NAT" class="headerlink" title="NAT"></a>NAT</h2><p>由于IPv4的地址数量有限，因此诞生了像是NAT一类用于缓解地址消耗的协议。NAT的基本思想就是将内网机器的IP+端口映射到公网IP的不同端口上。下面用一张图来表示：</p><p><img src="https://cdn.xiaolincoding.com/gh/xiaolincoder/ImageHost/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/IP/39.jpg" alt="NAPT"></p><p>图中有两个客户端 192.168.1.10 和 192.168.1.11 同时与服务器 183.232.231.172 进行通信，并且这两个客户端的本地端口都是 1025。</p><p>此时，<strong>两个私有 IP 地址都转换 IP 地址为公有地址 120.229.175.121，但是以不同的端口号作为区分。</strong></p><p>因此，只要生成这样一张转换表，就可以让内网主机全都使用一个IP与外部通信。这张表中的记录会在首次建立TCP连接时建立，又会在连接结束后删除</p><p>不过NAT也有一定的缺陷：</p><ol><li><p>外部无法与内网机器进行主动交互，因为它根本不知道内网机器的IP映射</p></li><li><p>地址转换会带来一定的性能开销</p></li><li><p>一旦NAT路由器重启，所有TCP连接都要重置。</p></li></ol><h1 id="开发相关网络知识"><a href="#开发相关网络知识" class="headerlink" title="开发相关网络知识"></a>开发相关网络知识</h1><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>HTTP(超文本传输协议)：一个专门在<em>两点</em>之间<em>传输</em>文字、图片、音频、视频等<em>超文本</em>数据的<em>约定和规范</em></p><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><table><thead><tr><th>状态码</th><th>含义</th></tr></thead><tbody><tr><td>1xx</td><td>提示信息，表示目前是协议处理的中间状态</td></tr><tr><td>2xx</td><td>成功，报文已被收到并被正确处理</td></tr><tr><td>3xx</td><td>重定向，资源位置发生变动，需要客户端重新发送请求</td></tr><tr><td>4xx</td><td>客户端错误，请求报文有误，服务器无法处理</td></tr><tr><td>5xx</td><td>服务器错误，服务器在处理请求时内部发生错误</td></tr></tbody></table><ul><li><p>「<strong>200 OK</strong>」是最常见的成功状态码，表示一切正常。如果是非&nbsp;<code>HEAD</code>&nbsp;请求，服务器返回的响应头都会有 body 数据。</p></li><li><p>「<strong>204 No Content</strong>」也是常见的成功状态码，与 200 OK 基本相同，但响应头没有 body 数据。</p></li><li><p>「<strong>206 Partial Content</strong>」是应用于 HTTP 分块下载或断点续传，表示响应返回的 body 数据并不是资源的全部，而是其中的一部分，也是服务器处理成功的状态。</p></li><li><p>「<strong>301 Moved Permanently</strong>」表示永久重定向，说明请求的资源已经不存在了，需改用新的 URL 再次访问。</p></li><li><p>「<strong>302 Found</strong>」表示临时重定向，说明请求的资源还在，但暂时需要用另一个 URL 来访问。</p></li></ul><p>301 和 302 都会在响应头里使用字段&nbsp;<code>Location</code>，指明后续要跳转的 URL，浏览器会自动重定向新的 URL。</p><ul><li><p>「<strong>304 Not Modified</strong>」不具有跳转的含义，表示资源未修改，重定向已存在的缓冲文件，也称缓存重定向，也就是告诉客户端可以继续使用缓存资源，用于缓存控制。</p></li><li><p>「<strong>400 Bad Request</strong>」表示客户端请求的报文有错误，但只是个笼统的错误。</p></li><li><p>「<strong>403 Forbidden</strong>」表示服务器禁止访问资源，并不是客户端的请求出错。</p></li><li><p>「<strong>404 Not Found</strong>」表示请求的资源在服务器上不存在或未找到，所以无法提供给客户端。</p></li><li><p>「<strong>500 Internal Server Error</strong>」与 400 类型，是个笼统通用的错误码，服务器发生了什么错误，我们并不知道。</p></li><li><p>「<strong>501 Not Implemented</strong>」表示客户端请求的功能还不支持，类似“即将开业，敬请期待”的意思。</p></li><li><p>「<strong>502 Bad Gateway</strong>」通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误。</p></li><li><p>「<strong>503 Service Unavailable</strong>」表示服务器当前很忙，暂时无法响应客户端，类似“网络服务正忙，请稍后重试”的意思。</p></li></ul><h3 id="GET和POST"><a href="#GET和POST" class="headerlink" title="GET和POST"></a>GET和POST</h3><p>GET的语义：从服务器获取指定的资源，GET 请求的参数位置一般是写在 URL 中，URL 规定只能支持 ASCII，所以 GET 请求的参数只允许 ASCII 字符<br>POST的语义：根据请求负荷对指定的资源做出处理</p><h4 id="安全与幂等"><a href="#安全与幂等" class="headerlink" title="安全与幂等"></a>安全与幂等</h4><p>安全：请求方法不会破坏服务器上的资源<br>幂等：多次执行相同的操作，结果都是相同的</p><p>由于GET方法是只读操作，因此它是安全且幂等的，无论发起多少次请求，服务器上的资源都不会受到影响。所以GET请求的数据可以被缓存<br>POST则是新增或提交数据的操作，会修改服务器上的资源，因此它是不安全的。同时多次请求也会创建多个资源，因此它也不是幂等的。基于此，POST请求一般是不会被缓存的。<br>不过以上都是基于语义得出的结论，在实际操作中仍旧要看对应方法请求的目的。</p><h3 id="HTTP缓存"><a href="#HTTP缓存" class="headerlink" title="HTTP缓存"></a>HTTP缓存</h3><p>^3b171b</p><h4 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h4><p>只要浏览器判断缓存没有过期，就直接使用本地缓存，决定权在浏览器这边。<br>强制缓存利用如下两个响应头来实现</p><ul><li>Cache-Control：一个相对时间，表示资源有效期 <strong>优先级高</strong></li><li>Expires：一个绝对时间，表示资源的过期时间</li></ul><p>强制缓存的实现流程如下：</p><ol><li>当浏览器首次请求服务器资源时，服务器会在返回该资源的同时，在Response头上添加Cache-Control，其中设置了过期时间大小。</li><li>浏览器在此请求访问服务器中相同的资源时，会先比较当前时间与设定的缓存过期时间，如果没有过期就使用缓存。</li><li>服务器再次收到请求，代表本地缓存已经过期，会更新响应头的Cache-Control</li></ol><h4 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h4><p>在上面的HTTP状态码介绍中，有一个状态码为304，这代表服务器告诉浏览器，这个资源没有更新，可以直接使用本地缓存。这种通过服务端告知客户端是否可以使用缓存的方式就是协商缓存。<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/network/20221004225302.png" alt="协商缓存过程"></p><p>协商缓存的实现方式</p><ol><li>请求头中携带<code>If-Modified-Since</code>字段，内容一般是本地缓存中对应资源的获取时间，服务器接收到请求后发现请求带有该字段，就会将本地缓存的更新时间与服务器端对应资源的最后一次更新时间进行比较，如果服务器端的资源在本地缓存获取时间之后有进行更新，就会返回最新资源；否则返回响应304告诉浏览器使用缓存</li><li>请求头中携带<code>If-None-Match</code>字段，内容是本地缓存中对应资源的Etag(唯一标识响应资源)。服务端接收到请求后会去比对指定资源目前的Etag，如果不一致就代表资源被更新了，返回最新资源，否则304。<br>如果服务器同时响应了Etag和Last-Modified两个字段，此时使用Etag的优先级更高。<br>reason：</li><li>即使没有修改文件内容，文件的最后修改时间也可能发生改变，这时如果使用Last-Modified会导致客户端认为文件已经发生修改，从而重新请求。</li><li>可能有些文件是在秒级以内修改的，<code>If-Modified-Since</code>&nbsp;能检查到的粒度是秒级的，使用 Etag就能够保证这种需求下客户端在 1 秒内能刷新多次</li><li>部分服务器无法精确获取文件最后修改时间</li></ol><p>ps：协商缓存的两个字段都要配合强制缓存的Cache-control字段使用，<strong>只有在强制缓存没有命中的时候才会发起带有协商缓存的请求</strong></p><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><ol><li>HTTP的信息是明文传输的，HTTPS在TCP和HTTP网络层之间加入了SSL/TLS安全协议，使得报文能够加密传输</li><li>HTTP在三次握手之后就可以进行报文传输，HTTPS还需要进行SSL/TLS的握手过程，才会开始加密报文传输</li><li>HTTPS需要向CA(证书权威机构)申请数字证书来保证服务器的身份可信</li></ol><p>SSL/TLS很好的解决了HTTP的安全风险：</p><ol><li>信息加密：交互信息无法被窃取 借助混合加密实现</li><li>校验机制：无法篡改通信内容，篡改了就不能正常显式 利用摘要算法为数据生成独一无二的指纹，用于校验数据完整性，解决篡改风险</li><li>身份证书：证明访问的网站货真价实</li></ol><h4 id="混合加密"><a href="#混合加密" class="headerlink" title="混合加密"></a>混合加密</h4><p>非对称加密：使用公钥来加密明文，然后使用对应的私钥来解密密文<br>HTTPS采用对称加密和非对称机密结合的混合加密方式：</p><ul><li>在通信建立前采用<em>非对称加密</em>(公钥和私钥组成，公钥任意分发而私钥保密，解决密钥交换问题，但速度较慢)的方式交换会话密钥</li><li>通信过程中全部使用<em>对称加密</em>(运算速度快，密钥必须保密，无法做到安全的密钥交换)</li></ul><h4 id="摘要算法-数字签名"><a href="#摘要算法-数字签名" class="headerlink" title="摘要算法+数字签名"></a>摘要算法+数字签名</h4><p>为了保证数据不会在传输过程中被修改，我们需要对内容计算出一个<em>指纹</em>，然后同内容一起传输给接收方。接收方收到之后，根据获取到的数据再计算一次指纹，如果和传过来的指纹相同，代表数据没有被篡改。<br>一般来说，会使用摘要算法(哈希函数)计算出内容的哈希值，这个值是唯一的且无法根据哈希值推导出内容。<br>不过要注意的是，哈希算法可以保证内容不被篡改，但不能保证内容和哈希值都没有被人替换过，究其原因是客户端无法判断接收到的消息是否来自服务端。<br>要想解决这个问题就又要提到非对称加密了，非对称加密一般有两种用法：</p><ul><li><strong>公钥加密，私钥解密</strong>。目的是为了<strong>保证内容传输的安全</strong>，因为被公钥加密的信息，只有使用私钥才能解读出实际的内容。</li><li><strong>私钥加密，公钥解密</strong>。目的是为了<strong>保证消息不会被冒充</strong>，只有收取到被私钥加密的信息，公钥才能正确解密。而私钥又被服务端持有，因此相当于是表明这条信息来自服务端。<br>这里我们使用私钥加密，公钥解密的方式来确保哈希值不会被中间人替换，保证消息来自服务端且没有被篡改。</li></ul><h4 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h4><p>到目前为止，我们利用混合算法保证内容传输过程的安全性，用摘要算法和数字签名保证了消息传输的完整性以及消息来源的正确性。但还缺少身份验证环节，数字签名保证了消息来自服务端，但没有保证这个消息一定来自我们期望的那个服务端。<br>也就是说，如果我们伪造一个公钥给客户端，然后用自己的私钥加密信息发送给客户端，由于客户端手中的公钥和我们的私钥匹配，他就能因此解析出信息。从而让客户端误认为我们是货真价实的服务端。<br>在HTTPS中，每个网站都会把他们的公钥注册到CA，CA会用私钥给这些公钥做一个数字签名，然后将网站的信息，公钥和数字签名打包成一个数字证书发送给网站。这样，每当客户端要发起请求时，都会先拿着这个数字证书到CA去验证证书是否合法，如果CA能用自己的公钥解析成功，就代表这个证书确实是被注册过的，然后将这个网站的公钥交给客户端，客户端就可以利用这个公钥解析出信息的内容</p><h4 id="HTTPS建立连接的流程"><a href="#HTTPS建立连接的流程" class="headerlink" title="HTTPS建立连接的流程"></a>HTTPS建立连接的流程</h4><p>SSL/TLS协议基本流程：</p><ol><li>客户端向服务器索要并验证服务器的公钥</li><li>双方协商生成会话密钥</li><li>双方采用会话密钥进行加密通信</li></ol><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/network/20221006110019.png" alt="基于RSA的四次握手"></p><p>详细流程：</p><ol><li><p>ClientHello<br>客户端向服务器发送加密通信请求<br>在这一步，客户端主要发送以下信息：<br>(1) 客户端支持的SSL/TLS协议版本<br>(2) 客户端生成的随机数，后续会用于生成会话密钥<br>(3) 客户端支持的密码套件列表</p></li><li><p>ServerHello<br>服务端收到请求后做出响应，响应包括如下信息：<br>(1) 确认SSL/TLS协议版本，如果浏览器不支持，就关闭加密通信<br>(2) 服务器生成的随机数，用于后续生成会话密钥<br>(3) 确认密码套件列表<br>(4) 服务器的数字证书</p></li><li><p>客户端回应<br>客户端收到回应之后，先通过浏览器或OS中的CA公钥，校验服务器的数字证书的真实性。如果证书没有问题，客户端就会取出证书中的服务器公钥，用它来加密报文信息。报文中包含：<br>(1) 一个随机数(pre-master key)<br>(2) 加密通信算法改变通知，告诉服务器后续的报文信息都会用会话密钥加密<br>(3) 客户端握手结束通知，表示客户端的握手阶段已经结束。同时把之前发送的所有内容做一个摘要用来供服务端校验。</p></li></ol><p><strong>到此为止，客户端和服务端都有了三个随机数，接着就用双方协商的加密算法，计算出本次通信的会话密钥</strong></p><ol start="4"><li>服务端回应<br>服务端收到三个随机数之后，通过协商的加密算法计算出会话密钥。然后向客户端发送信息：<br>(1) 加密通信算法改变通知，表示随后的信息都会使用会话密钥加密通信<br>(2) 服务端握手结束通知，同时把之前发送的内容做一个摘要交给客户端进行校验。</li></ol><blockquote><p>客户端校验数字证书的流程</p></blockquote><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/network/20221006110407.png" alt="数字证书签发和验证流程"></p><p>签发证书：</p><ol><li>CA将持有者的公钥，用途，颁发者，有效时间等信息打包，然后进行哈希计算得到一个Hash值。</li><li>接着将Hash值用CA私钥加密，生成证书签名</li><li>最后将签名添加在证书上生成数字证书</li></ol><p>校验证书：</p><ol><li>用相同的哈希算法计算数字证书内容的哈希值</li><li>用CA公钥解密数字签名，获取到哈希值。</li><li>比较两个哈希值是否相同，如果相同，代表数字证书有效</li></ol><h4 id="保证应用数据完整性"><a href="#保证应用数据完整性" class="headerlink" title="保证应用数据完整性"></a>保证应用数据完整性</h4><p>TLS在实现上分为<em>握手协议</em>和<em>记录协议</em>：</p><ul><li>TLS握手协议负责协商加密算法和生成对称密钥来保护应用程序数据</li><li>TLS记录协议负责保护应用数据并验证其完整性和来源，因此对HTTP数据加密是使用的记录协议。</li></ul><p>具体过程：</p><ol><li>将消息分割成多个较短的片段，然后分别对每个片段进行压缩</li><li>然后压缩的片段会被加上MAC值，这个MAC值用来识别数据的完整性，同时防止篡改。此外为了防止重放攻击，还加上了片段的编码。</li><li>接下来，压缩的片段和MAC值会一起通过对称加密进行加密</li><li>最后加上由数据类型，版本，长度组成的报文头部<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/network/20221006111656.png"></li></ol><h3 id="HTTP-x2F-1-1-HTTP-x2F-2-HTTP-x2F-3"><a href="#HTTP-x2F-1-1-HTTP-x2F-2-HTTP-x2F-3" class="headerlink" title="HTTP/1.1 HTTP/2 HTTP/3"></a>HTTP/1.1 HTTP/2 HTTP/3</h3><h4 id="HTTP-x2F-1-1"><a href="#HTTP-x2F-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h4><p>HTTP/1.1相比HTTP/1.0的改进：</p><ul><li>使用长连接的方式改善了频繁建立连接的开销</li><li>支持管道传输，发起请求之后不必等待响应，可以直接发送下一个请求，减少整体响应时间</li></ul><p>HTTP/1.1的性能瓶颈</p><ul><li>请求/响应头未经压缩就发送，首部信息越多延迟越大。只能压缩body部分</li><li>首部冗长导致每次互相发送相同的首部造成巨大的浪费</li><li>服务器按顺序处理请求（客户端只有在收到上一个请求的响应之后才会发送下一个请求），如果先到达的请求处理很慢，会导致客户剩余的请求无法处理（队头阻塞）。</li><li>没有请求优先级控制</li><li>请求只能从客户端开始，服务端只能被动响应</li></ul><h4 id="HTTP-x2F-2"><a href="#HTTP-x2F-2" class="headerlink" title="HTTP/2"></a>HTTP/2</h4><p>HTTP/2协议基于HTTPS，因此它的安全性是可以保证的<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/network/20221007110905.png"></p><p>相比于HTTP/1.1，HTTP/2在以下方面做出了改进：</p><ol><li><p>头部压缩<br>如果同时发送多个请求，且这些请求的头部基本相同，HTTP2就会压缩头，消除掉重复的部分。<br>它的具体实现就是<code>HPACK</code>算法：客户端和服务端同时维护一张头部表，所有字段都会存入该表，下次要发送同样的字段时就可以直接发送索引号。</p></li><li><p>二进制格式<br>HTTP/2全面采用二进制格式传输数据，头信息和数据体都是二进制并且统称为帧。虽然这大幅降低了报文的可读性，但却加快了计算机的处理速度，计算机可以直接解析二进制报文。</p></li><li><p>并发传输<br>由于HTTP/1.1的实现是基于请求-响应模型的。在同一个连接中，HTTP完成一个事务才能开始处理下一个事务，这就有可能导致队头阻塞。<br>而在HTTP2中引入了Stream的概念，多个Stream可以复用一条TCP连接。1个TCP连接可以包含多个Stream，Stream里可以包含一个或多个Message(Message对应请求/响应报文)。而在一个Message中，又有多个帧(存放报文各部分的信息)。<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/network/20221007112708.png"><br>针对不同的HTTP请求用独一无二的StreamID来区分，接收端可以通过StreamID来组装HTTP消息。这就使得Stream的帧可以乱序发送，也就代表HTTP2可以并行的发送请求/接收响应。</p></li><li><p>服务器推送<br>HTTP/2还在一定程度上改善了传统的<em>请求-应答</em>模式。服务器可以主动地向客户端发送消息。<br>客户端的服务器双方都可以建立Stream，规定客户端建立的StreamID必须是奇数，服务端建立的StreamID必须是偶数。<br>乍一听可能感觉这个功能没有什么价值，但现在想象一下，如果我们希望请求一个页面，在HTTP/1.1中我们首先要请求html文件，但只请求一个html文件显然是不够的，再加上css和js文件才能构成我们平日使用的网页。这就需要客户端发送多个请求，消息往返次数很多。但在HTTP2中，服务端发现客户端请求了一个网页，在返回html文件的同时，主动将对应的css和js文件返回过去，这就大大提高了通信效率。</p></li></ol><h4 id="HTTP-x2F-3"><a href="#HTTP-x2F-3" class="headerlink" title="HTTP/3"></a>HTTP/3</h4><p>HTTP/2看上去已经非常完美了，但实际上，他仍然存在队头阻塞的问题，只不过问题的根源在于TCP层。HTTP/2用流的方式让服务端不至于因为处理某个特定请求速度过慢而导致无法接收到其他请求。但如果某个请求在传输过程中发生了丢包，就会导致TCP触发超时重传，此时丢失的包之后发送的所有数据包都会被存储在TCP的缓冲区，应用层无法接收到数据。也就是说，如果发生了丢包，那么之后传输的数据，哪怕不属于同一个流也会被TCP关在缓冲区里。<br>HTTP/3为了解决这个问题，直接将运输层的协议改成了基于UDP的QUIC协议。由于UDP的发送是无序且不可靠的，因此不会因为丢包而发生阻塞。而基于UDP的QUIC协议又实现了类似TCP的可靠传输功能。<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/network/20221007114451.png"><br>QUIC具备如下特点：</p><ol><li><p>无队头阻塞<br>QUIC也有类似HTTP/2多路复用的概念，同时QUIC也有自己的一套机制来保证传输的可靠性。<strong>当某个流发生丢包时，只会阻塞这个流，其他流不会收到影响</strong>。因此QUIC连接上的流是相互独立的，即使发生丢包也不会影响其他流。</p></li><li><p>更快的连接建立<br>对于HTTP/1 和 HTTP/2，TCP和TLS是分层的，他们分别属于内核实现的传输层、openssl库实现的表示层。所以他们非常难以合并在一起。<br>HTTP/3在传输数据前虽然需要QUIC协议握手，但这个握手过程只需要1RTT，目的是为了确认双方的连接ID。同时QUIC内部包含了TLS，因此他会在自己的帧里携带TLS记录。因此只要1个RTT就可以建立连接同时完成密钥协商。</p></li><li><p>连接迁移<br>由于基于TCP的HTTP协议是通过(源地址，源端口，目的地址，目的端口)这个四元组确定一条TCP连接的，当网络发生变化时，就必须断开连接然后重新建立连接。期间发生的TCP三次握手，SSL四次握手的时延以及TCP慢启动的减速都会降低用户体验。<br>但对于QUIC来说，由于他确定连接的方式是通过连接ID，所以即使网络环境发生变化，只要连接上下文(连接ID，TLS密钥等)不变，就可以快速复用原连接，消除重连的成本。</p></li></ol><h3 id="HTTP-x2F-1-1优化"><a href="#HTTP-x2F-1-1优化" class="headerlink" title="HTTP/1.1优化"></a>HTTP/1.1优化</h3><p>优化思路：</p><ol><li>尽量避免发送HTTP请求</li><li>在需要发送HTTP请求时，尽量减少请求次数</li><li>减少HTTP响应的数据大小</li></ol><p>第一种思路可以通过缓存实现，具体的介绍在HTTP缓存一节[[#^3b171b]]</p><h4 id="减少HTTP请求次数"><a href="#减少HTTP请求次数" class="headerlink" title="减少HTTP请求次数"></a>减少HTTP请求次数</h4><p>切入点：</p><ul><li>减少重定向请求次数<br>由于服务器上的资源可能由于迁移或维护等等原因，将资源转移到另一个URL后，客户端不知情，仍旧请求原先的URL。这时服务端就需要通过302状态码和Location头部告诉客户端资源已经迁移，客户端转而向新的URL发起请求。<br>因此，如果重定向请求过多，就会导致客户端为请求一个资源发起多次请求，大大拉低网络性能。此外，客户端的请求一般需要先经过代理服务器然后到达源服务器，这就导致重定向请求在网络中的传递次数翻了一倍。<br>为了减少重定向的请求次数，我们可以让代理服务器帮助客户端去请求重定向之后的URL，而不是将302的响应交给客户端让它重发一次响应。并且，在代理服务器知晓了重定向规则之后，就可以将客户端给的旧URL地址映射到新的URL地址上，这样就可以直接略过重定向这一步骤。<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/network/20221008162150.png" alt="代理服务器发送重定向请求"></li></ul><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/network/20221008162221.png" alt="代理服务器了解重定向规则后"></p><ul><li><p>合并请求<br>由于HTTP/1.1是请求响应模型，如果一个请求未收到响应就会导致阻塞。因此为了防止单个请求的阻塞，浏览器一般会<em>同时发起多个请求，每个请求都是不同的TCP连接</em>。因此如果我们能够合并请求，就可以减少TCP连接的数量，省去TCP握手和慢启动过程的耗时。<br>具体的做法包括：<br>(1) 部分网页会包含大量的小图片，图标。对于这种资源，单开一个TCP连接显然是非常浪费的。对于这种情况，我们可以将这些小图片合成一张大图片，浏览器用一次请求获取这张大图然后根据CSS数据切割大图片<br>(2) 将js、css等资源打包成大文件<br>(3) 将图片的二进制数据使用base64编码后，以URL的形式直接嵌入HTML文件，跟随HTML一起发送。</p></li><li><p>延迟发送请求<br>请求网页的时候，没必要把全部资源都获取到，而是只获取当前用户所看到的页面资源，当用户向下滑动页面的时候，再向服务器获取接下来的资源，这样就达到了延迟发送请求的效果。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>On java</title>
      <link href="/2022/10/09/on%20java/"/>
      <url>/2022/10/09/on%20java/</url>
      
        <content type="html"><![CDATA[<p>菜狗与某次面试中被问到不少并发问题，结果一问三不知，恰好cs186也快看到并发控制，遂开坑《on java》学习一下java进阶知识。</p><span id="more"></span><h1 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h1><p>相比于其他语言在堆上分配对象需要支付非常高昂的代价，Java的GC明显地提高对象的创建速度。这意味着Java从堆空间分配的速度可以和其他语言在栈上分配空间的速度媲美。<br>Java的堆的工作机制非常类似于传送带，每分配一个对象就向前移动一格，也就是说Java的堆指针可以轻易的移动到尚未分配的区域，虽然在簿记工作方面还有少量开销，但这部分开销和查找可用空间的开销相比可以忽略不计。<br>不过Java中堆的工作机制又不完全类似与传送带，否则就会因为“传送带”过长而导致非常频繁的页面调度。这时就需要GC介入了，它工作时，一边回收内存一边使堆中的对象紧凑排列，确保“传送带”的长度适中。</p><h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><p>在理解Java的GC之前，需要先理解一下其他系统中的垃圾回收机制。<br>最简单的GC方式就是<strong>引用计数</strong>。每个对象中都会维护一个引用计数器，每当有引用指向该对象时，计数器+1。当引用离开作用域或被置为null时，计数器-1。因此管理引用计数器是一个负担不大但是频繁发生的负担。垃圾回收器必须遍历含有全部对象的列表，如果引用计数为0就释放空间。不过这个机制存在一个非常严重的缺点：如果对象之间存在循环引用，那么他们的引用计数永远不会为0。而对GC而言定位循环引用工作量非常大。</p><h2 id="更快的策略"><a href="#更快的策略" class="headerlink" title="更快的策略"></a>更快的策略</h2><p>根据引用计数的介绍，它显然不是个具备良好效率的GC策略。下面来介绍一种更快的策略。<br>在具体介绍之前，先讲一下这个策略的依据：对于任何一个活着的对象，必然能够追溯到其存活在栈或静态存储区中的引用。也就是说，如果一个对象还可以被判定为活着，就代表它存在于某个栈或静态存储区中对象的引用链上。在遍历完根源于栈和静态存储区的引用之后会形成一个网络，网络中的所有对象都可以被认为是活的对象。循环引用的对象如果不再被使用就不会被发现，因为他们属于网络之外的孤岛，会被正常回收掉。</p><h2 id="自适应策略GC"><a href="#自适应策略GC" class="headerlink" title="自适应策略GC"></a>自适应策略GC</h2><p>基于上述的引用查找技术，Java使用一种自适应的GC技术来处理查找到的引用对象。其中一种方法叫<strong>停止-复制</strong>。</p><h3 id="停止-复制"><a href="#停止-复制" class="headerlink" title="停止-复制"></a>停止-复制</h3><p>这需要程序先停止运行，然后将所有存活的对象从当前堆复制到另一个堆，没有复制的就代表他要被垃圾回收。同时，当对象被复制到新堆之后，他们是紧挨着排列的，这样就可以更加方便的分配空间了。<br>但当对象从一处复制到另一处，所有指向它的引用都必须修正。<br>这种复制回收器效率比较低下：</p><ol><li>需要有两个堆，然后在这两个分离的堆之间来回复制，这就导致需要维护比实际多一倍的空间。JVM的处理方式：按需从堆中分配几块较大的内存，复制动作发生在这些大块内存之间</li><li>程序进入稳定状态之后，垃圾产量就会变少。这时进行频繁的来回复制就显得非常浪费。</li></ol><p>为了避免程序在进入稳定状态之后还不断进行停止-复制，部分JVM会自动切换到另一种模式 标记-清扫模式。</p><h3 id="标记-清扫"><a href="#标记-清扫" class="headerlink" title="标记-清扫"></a>标记-清扫</h3><p>对一般用途而言，标记-清扫的效率非常感人，但如果程序只会产生少量垃圾，那么它的效率就会非常高了。<br>标记-清扫的思路仍然是从栈和静态存储区出发，遍历所有的引用，找出所有存活的对象。每找到一个存活对象就给对象设一个标记，在标记过程结束后清理所有没被标记的对象。期间不需要发生任何复制动作。标记-清扫后剩下的堆空间是不连续的，如果GC希望获得连续空间，就要重新整理剩下的对象。</p><h3 id="分代"><a href="#分代" class="headerlink" title="分代"></a>分代</h3><p>在JVM中，内存分配以较大的“块”为单位，如果对象较大，他就会占用单独的块。在GC时，就可以把对象复制到废弃的块。每个块都有年代数来记录自己是否存活，通常，如果块在某处被引用了，其年代数+1,因为被引用多的对象一般存活时间较长(对于某些GC来说,一个对象存活过的垃圾回收次数才是年代数,他们认为活的久的对象在未来也有很大可能活下去).</p><p>综合上面的介绍，我们就可以大致归纳出JVM垃圾回收的流程：大型对象不会被复制，而含有小型对象的那些块则被复制并整理。JVM还会监视，如果所有对象都很稳定，就会切换到“标记-清扫”模式。JVM还会跟踪“标记-清扫”的效果，如果堆空间出现很多碎片，就会切换回“停止-复制”</p><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><p>一个定义在另一个类中的类，叫做内部类。它可以把一些逻辑相关的类组织在一起，并控制位于内部的类的可见性。<br>比较典型的情况是，外部类有一个方法，这个方法返回一个指向内部类的引用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Parcel2</span> <span class="token punctuation">{</span>      <span class="token keyword">class</span> <span class="token class-name">Content</span> <span class="token punctuation">{</span>          <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> i<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token class-name">Content</span> <span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上的实例体现了出内部类具备名字隐藏以及组织代码的能力。<br>然而内部类最强大的一点在于，当生成一个内部类对象时，这个对象会捕获一个指向对应外部类的引用。内部类可以通过捕获到的外部类引用直接访问外部类的<em>所有成员</em>。<br>如果希望在内部类中访问外部类的引用，可以使用OuterclassName.this的方式获取引用。<br>同样的，如果要在外部让某个对象创立一个内部类，需要用OuterclassObject.new InnerclassName()的方式创建。</p><h2 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h2><p>当需要将内部类向上转型为基类，尤其是转型为接口时，就可以将内部类的代码隐藏能力体现的淋漓尽致。如果我们将内部类的访问限制为private或protected，那么在完成向上转型之后，外界将无从知晓内部类的具体实现，因为连实现它的内部类都无法访问到，这也就在一定程度上确保了程序的安全性。通过这种方式可以完全阻止任何依赖于类型的代码(解耦)，并且完全隐藏了实现。除此之外，由于不能访问任何原本不属于公共接口的方法，扩展接口就失去了价值，这就为Java编译器提供了生成高效代码的机会。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Contents</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">Parcel4</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">PContents</span> <span class="token keyword">implements</span> <span class="token class-name">Contents</span> <span class="token punctuation">{</span>          <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> i<span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token class-name">Contents</span> <span class="token function">contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PContents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestParcel</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">Parcel4</span> parcel4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parcel4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Contents</span> contents <span class="token operator">=</span> parcel4<span class="token punctuation">.</span><span class="token function">contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>contents<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="内部类方法和作用域"><a href="#内部类方法和作用域" class="headerlink" title="内部类方法和作用域"></a>内部类方法和作用域</h2><h3 id="普通内部类"><a href="#普通内部类" class="headerlink" title="普通内部类"></a>普通内部类</h3><p>使用内部类一般有如下两个理由：</p><ol><li><p>实现了某类型的接口，可以创建并返回其引用</p></li><li><p>要解决一个复杂的问题，想创建一个类来辅助解决方案，但又不希望这个类是公开的。<br>我们可以在方法中甚至作用域内定义内部类，这为解决问题提供了极大的灵活性。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Parcel5</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token class-name">Destination</span> <span class="token function">destination</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">PDestination</span> <span class="token keyword">implements</span> <span class="token class-name">Destination</span> <span class="token punctuation">{</span>         <span class="token keyword">private</span> <span class="token class-name">String</span> label<span class="token punctuation">;</span>         <span class="token keyword">private</span> <span class="token class-name">PDestination</span><span class="token punctuation">(</span><span class="token class-name">String</span> whereTo<span class="token punctuation">)</span> <span class="token punctuation">{</span>             label <span class="token operator">=</span> whereTo<span class="token punctuation">;</span>         <span class="token punctuation">}</span>         <span class="token annotation punctuation">@Override</span>         <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">readLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> label<span class="token punctuation">;</span><span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PDestination</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的实例中，将一个内部类定义在了方法内部，这个方法最终会返回一个内部类引用并将它向上转型。需要注意的是，定义在方法中的内部类不代表它出了这个方法就消失了，而是这个内部类对方法之外的区域不可见。</p></li></ol><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>匿名内部类的基本语法在此不多赘述。<br>匿名内部类的语法表示的大致意思就是：创建一个<em>继承</em>自XXX的匿名类的对象，同时通过new表达式将其引用自动向上转型为对XXX的引用。<br>在大多数情况下，我们创建匿名内部类使用的都是默认构造器，但有些时候我们也希望使用指定的构造器。这里就还需要回到它的创建语法来看，匿名内部类创建的是一个继承自基类的对象，也就是说，基类的构造器可以被继承过来供内部类使用。下面就展现一下它的用法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 基类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wrapping</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token class-name">Wrapping</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>          i <span class="token operator">=</span> x<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> i<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Parcel8</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token class-name">Wrapping</span> <span class="token function">wrapping</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Wrapping</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token annotation punctuation">@Override</span>              <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">47</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">Parcel8</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parcel8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">wrapping</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果我们希望匿名内部类具备一些构造器的行为，那么就需要用到实例初始化了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Parcel10</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token class-name">Contents</span> <span class="token function">contents</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> ct<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Contents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">private</span> <span class="token class-name">String</span> content<span class="token punctuation">;</span>              <span class="token comment">// 实例初始化</span>            <span class="token punctuation">{</span>                  content <span class="token operator">=</span> ct<span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token annotation punctuation">@Override</span>              <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">return</span> content<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于每一个生成的内部类，都会调用实例初始化的代码段。需要注意的是，对于所有传递给匿名内部类(不包括通过构造器传递给基类的)的变量，都必须是final修饰或者在赋值之后不会改变的。即所有被匿名内部类直接使用的变量都必须是不可变的。</p><h3 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h3><p>如果不需要内部类对象与其外部类对象之间有联系，就可以将内部类声明为static。<br>嵌套类具有的特征：</p><ol><li>创建嵌套类的对象时，不需要其外部类的对象</li><li>不能从嵌套类的对象中访问非静态的外部类对象</li><li>嵌套类可以有static数据和static字段，嵌套类也可以包含嵌套类，这都是普通内部类做不到的。</li></ol><h3 id="接口内部的类"><a href="#接口内部的类" class="headerlink" title="接口内部的类"></a>接口内部的类</h3><p>嵌套类可以作为接口的一部分，任何放到接口中的类都自动是public static的。如果我们希望创建一个公共方法，这个方法可以被接口的所有实现使用，那么使用嵌套类就会非常方便。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ClassInInterface</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">howdy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">implements</span> <span class="token class-name">ClassInInterface</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">howdy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Howdy!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">howdy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="为什么使用内部类"><a href="#为什么使用内部类" class="headerlink" title="为什么使用内部类"></a>为什么使用内部类</h2><p>内部类继承自某个类或实现某个接口，内部类的代码操作创建它的外部类对象。因此内部类可以说提供了某种进入其外部类的接口。<br>内部类最吸引人的原因在于：每个内部类都能独立的继承自一个实现，无论外部类是否已经继承了某个实现，对于内部类都没有影响。也就是说，内部类的存在让多重继承的存在成为可能，一个外部类可以借助内部类继承多个类的特征。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">E</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Z</span> <span class="token keyword">extends</span> <span class="token class-name">D</span> <span class="token punctuation">{</span>    <span class="token class-name">E</span> <span class="token function">makeE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">E</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiImplementation</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">takesD</span><span class="token punctuation">(</span><span class="token class-name">D</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">takesE</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Z</span> z <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Z</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">takesD</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">takesE</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span><span class="token function">makeE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的示例中，Z继承了D同时使用内部类继承了E，这使得Z同时具备了两种基类的特质，实现多重继承。<br>初次之外，内部类还有其他的特性：</p><ol><li>内部类可以有多个实例，每个实例都有自己的状态信息，并且与其外部类对象的信息相互独立。</li><li>在单个外部类中，可以让多个内部类以不同的方式实现同一个接口，或继承同一个类。</li><li>创建内部类对象的时刻并不依赖于外部类对象的创建</li><li>内部类并没有令人迷惑的”is-a”关系，它就是一个独立的实体。<br>对于那些有明显依赖关系的类来说，使用内部类显然比外部类要更为直观高效。</li></ol><h3 id="闭包与回调"><a href="#闭包与回调" class="headerlink" title="闭包与回调"></a>闭包与回调</h3><p>闭包是指一个可调用的对象，它记录的信息中包含创建它的作用域中的信息，但创建它的作用域却无法完全掌控它的信息。由这个定义可以看出，Java的内部类就是一个OOP的闭包，它可以访问并操作外部类对象。<br>除此之外，Java实现回调的方式也与一般语言不同。我们先简单介绍一下回调：程序向某个对象传递一些信息，希望它能够处理，不过程序并不会等待结果的返回，而是将执行任务的内容与需要的信息都交给相关的对象，在之后的某一个时间点，对象会执行这个任务，并在完成处理之后通知程序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">innerclass</span><span class="token punctuation">;</span>  <span class="token keyword">interface</span> <span class="token class-name">Incrementable</span> <span class="token punctuation">{</span>      <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">MyIncrement</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Other operation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token class-name">MyIncrement</span> mi<span class="token punctuation">)</span> <span class="token punctuation">{</span>          mi<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">Callee</span> <span class="token keyword">extends</span> <span class="token class-name">MyIncrement</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          i<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Closure</span> <span class="token keyword">implements</span> <span class="token class-name">Incrementable</span> <span class="token punctuation">{</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">Callee</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token class-name">Incrementable</span> <span class="token function">getCallbackRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Closure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">Caller</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token class-name">Incrementable</span> callbackRef<span class="token punctuation">;</span>      <span class="token class-name">Caller</span><span class="token punctuation">(</span><span class="token class-name">Incrementable</span> cbh<span class="token punctuation">)</span> <span class="token punctuation">{</span>          callbackRef <span class="token operator">=</span> cbh<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">void</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          callbackRef<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Callbacks</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">Callee</span> callee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Callee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">MyIncrement</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>callee<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Caller</span> caller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Caller</span><span class="token punctuation">(</span>callee<span class="token punctuation">.</span><span class="token function">getCallbackRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          caller<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          caller<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述示例中，Callee继承自MyIncrement，后者已经有了一个<code>increment()</code>方法，但这个方法的实现与Incrementable的期望完全不同。因此Callee一旦继承了MyIncrement，就不能为了Incrementable的用途重写increment。这时就需要内部类来完成剩下的工作，让内部类去继承Incrementable，并实现需要的方法。最终Callee给外部暴露一个返回Incrementable的接口，一个非常安全的钩子，这个引用只能调用Incrementable的方法，而不像指针那样可以允许其他有破坏性的操作。<br>Caller之后会获取到一个回调引用，在之后需要的时候，他就可以调用这个回调函数。</p><h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><p>通过合并现有代码来生成新功能而不是从头开始编写内容，我们就可以更快的获得更可靠的代码。OO的目的是抽象数据，而FP的目的是抽象行为。<br>纯粹的函数式语言，要求所有数据必须是不可变的：设置一次，永不改变。将值传递给函数，该函数然后生成新值但不修改自身外部的任何东西。这就是所谓的“不可变对象和无副作用”范式。它解决了并发编程中最棘手的问题之一 ———— 共享状态，因为函数永远不会去竞争修改内存中的值，只会生成新值。</p><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p>Lambda表达式使用<strong>最小可能</strong>语法编写的函数定义：</p><ol><li>Lambda表达式产生函数，而不是类。</li><li>语法尽可能少</li></ol><p>Lambda表达式的基本使用就不多介绍，这里简单讲讲用Lambda实现递归。<br>如果要使用Lambda表达式编写递归，首先要求递归方法必须是实例变量或静态变量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecursiveFactorial</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token class-name">IntCall</span> fact<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fact <span class="token operator">=</span> n <span class="token operator">-&gt;</span> n <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> n <span class="token operator">*</span> fact<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fact<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="流式编程"><a href="#流式编程" class="headerlink" title="流式编程"></a>流式编程</h1><p>流是与任何特定存储机制无关的元素序列 ———— 或者说，流是没有存储的<br>使用流可以从管道中提取元素并对其进行操作。这些管道通常被串联在一起形成一整套的管线来对流进行操作。<br>流契合声明式编程，即只需要声明要做什么，而不必指明每一步要怎么做。<br>显式编写迭代过程的方式称为外部迭代。而流式编程使用的都是内部迭代，迭代过程对用户透明。内部迭代产生的代码可读性更强，而且能更简单的使用多核处理器。<br>除此之外，流是<strong>懒加载</strong>的，只在绝对必要时才会进行计算，可以将流看作延迟列表，并且正因为这个特性，流可以表示非常大的序列而无需考虑内存问题。<br>流操作的类型分为三种：创建流，修改流元素，消费流元素</p><h2 id="创建流"><a href="#创建流" class="headerlink" title="创建流"></a>创建流</h2><h3 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h3><p>所有的集合都可以转变为流，也可以使用<code>Stream.of()</code>获得流。<br>不过这里主要介绍的是<code>Stream.generate(Supplier&lt;T&gt;)</code>。他接受一个Supplier函数接口，创建一个包含类型为T的流。使用他最简单的一种方式就是编写一个继承了对应函数接口的类。不过我们同样可以传递一个函数引用过去实现相同的效果。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bubble</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Bubble</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        i <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Bubble("</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Bubble</span> <span class="token function">bubbler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Bubble</span><span class="token punctuation">(</span>cnt<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">Bubble</span><span class="token operator">::</span><span class="token function">bubbler</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的示例算是一个创建单独工厂类的方式，在很多方面他显得更加整洁。</p><h3 id="iterate"><a href="#iterate" class="headerlink" title="iterate"></a>iterate</h3><p><code>Stream.iterate()</code>产生的流的第一个元素是种子，然后将种子传递给方法。方法的运行结果被添加到流并被存储起来作为下次调用iterate的第一次参数。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Fib</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">numbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>              <span class="token keyword">int</span> res <span class="token operator">=</span> x <span class="token operator">+</span> i<span class="token punctuation">;</span>              x <span class="token operator">=</span> i<span class="token punctuation">;</span>              <span class="token keyword">return</span> res<span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">new</span> <span class="token class-name">Fib</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">numbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h2><ol><li><p>peek(Consumer)<br>peek操作的目的是帮助调试，他接受一个Consumer函数接口，可以帮助查看流中的元素，或者修改元素内部的信息。</p></li><li><p>sorted()<br>sorted()可以将流中的元素排序，可以传入一个比较器实现自定义排序。</p></li><li><p>distinct()<br>消除流中的重复元素，相比创建一个Set来说，这种操作需要的工作量小很多。</p></li><li><p>filter(Predicate)<br>接收一个断言函数，保留流中所有满足断言函数的元素。</p></li><li><p>map(Function)<br>将函数操作应用在输入流的元素中，并将返回值传递到输出流中</p></li><li><p>flatMap()<br>将函数操作应用在输入流的元素中，并将返回值扁平化为一个元素。当我们对流中元素的操作会产生一个新的流时，使用map会导致我们最终获取到一个存储流的流，而使用flatMap则可以让我们将产生的流中的元素扁平化到原先的流中。</p></li></ol><h2 id="Optional类"><a href="#Optional类" class="headerlink" title="Optional类"></a>Optional类</h2><p>在学习终端操作之前，首先得要意识到一点：如果流中存在一个null，就会导致流中断。因此我们需要一种对象，可以在持有流元素的同时，即使查找的元素不存在也可以友好的进行提示。<br>Optional类提供了这样的功能</p><ul><li><code>ifPresent(Consumer)</code>：当值存在时调用&nbsp;<strong>Consumer</strong>，否则什么也不做。</li><li><code>orElse(otherObject)</code>：如果值存在则直接返回，否则生成&nbsp;<strong>otherObject</strong>。</li><li><code>orElseGet(Supplier)</code>：如果值存在则直接返回，否则使用&nbsp;<strong>Supplier</strong>&nbsp;函数生成一个可替代对象。</li><li><code>orElseThrow(Supplier)</code>：如果值存在直接返回，否则使用&nbsp;<strong>Supplier</strong>&nbsp;函数生成一个异常。</li></ul><p>当流中产生了Optional对象，下面的方法会对他们进行相对的处理：</p><ol><li>filter：对Optional中的内容应用Predicate并返回结果，如果条件不满足，将Optional转化为一个空Optional，而不是直接将元素删除</li><li>map：如果Optional不为空，就将函数应用于它存储的内容，并返回结果。否则直接返回Optional.empty</li><li>flatMap：效果同map，但不会主动将结果封装</li></ol><p>如果流的生成器有可能产生null，那应该自然而然的想到用它创建流时要使用Optional来进行包装。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Signal</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token class-name">Signal</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token string">"Signal{"</span> <span class="token operator">+</span>                  <span class="token string">"msg='"</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token char">'\''</span> <span class="token operator">+</span>                  <span class="token char">'}'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">static</span> <span class="token class-name">Random</span> rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Signal</span> <span class="token function">morse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">case</span> <span class="token number">1</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Signal</span><span class="token punctuation">(</span><span class="token string">"dot"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">case</span> <span class="token number">2</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Signal</span><span class="token punctuation">(</span><span class="token string">"dash"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token keyword">null</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Optional</span><span class="token punctuation">&lt;</span><span class="token class-name">Signal</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">Signal</span><span class="token operator">::</span><span class="token function">morse</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Optional</span><span class="token operator">::</span><span class="token function">ofNullable</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="终端操作"><a href="#终端操作" class="headerlink" title="终端操作"></a>终端操作</h2><p>终端操作内容繁多，这里只介绍一部分内容</p><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>reduce是流的一个聚合方法，它可以把流中的所有元素按照聚合函数聚合成一个结果。</p><ul><li><p><code>reduce(BinaryOperator)</code>：使用&nbsp;<strong>BinaryOperator</strong>&nbsp;来组合所有流中的元素。因为流可能为空，其返回值为&nbsp;<strong>Optional</strong>。</p></li><li><p><code>reduce(identity, BinaryOperator)</code>：功能同上，但是使用&nbsp;<strong>identity</strong>&nbsp;作为其组合的初始值。因此如果流为空，<strong>identity</strong>&nbsp;就是结果。<br>reduce接收到的两个参数，一个是reduce上次调用的结果，另一个是从流中传递过来的值。<br>下面的示例演示了，如何使用reduce将流中的元素聚合为一个map</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Aggregate</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> props <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"profile=native"</span><span class="token punctuation">,</span> <span class="token string">"debug=true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>kv <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> kv<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\="</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>m<span class="token punctuation">,</span> kv<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                    m<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>kv<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> m<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">"="</span> <span class="token operator">+</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h3><ul><li><code>allMatch(Predicate)</code>&nbsp;：如果流的每个元素提供给&nbsp;<strong>Predicate</strong>&nbsp;都返回 true ，结果返回为 true。在第一个 false 时，则停止执行计算。</li><li><code>anyMatch(Predicate)</code>：如果流的任意一个元素提供给&nbsp;<strong>Predicate</strong>&nbsp;返回 true ，结果返回为 true。在第一个 true 是停止执行计算。</li><li><code>noneMatch(Predicate)</code>：如果流的每个元素提供给&nbsp;<strong>Predicate</strong>&nbsp;都返回 false 时，结果返回为 true。在第一个 true 时停止执行计算。</li></ul><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ul><li><code>findFirst()</code>：返回第一个流元素的&nbsp;<strong>Optional</strong>，如果流为空返回&nbsp;<strong>Optional.empty</strong>。</li><li><code>findAny()</code>：返回含有任意流元素的&nbsp;<strong>Optional</strong>，如果流为空返回&nbsp;<strong>Optional.empty</strong>。但在默认情况下，它仍旧是返回第一个找到的流元素</li></ul><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="基本异常"><a href="#基本异常" class="headerlink" title="基本异常"></a>基本异常</h2><p>异常情形是指<strong>阻止当前方法或作用域继续执行的问题</strong>。他与普通问题有着非常明显的区别，所谓普通问题是指在当前环境下能得到足够的信息，总能处理这个错误。而对于异常情形就不能继续进行下去了，因为在当前环境下无法获得必要的信息来解决问题，只能从当前环境跳出并把问题交给上一级环境。<br>当抛出异常之后，Java会在堆上构建异常对象，然后当前的执行路径终止，并从当前环境弹出对异常对象的引用。异常处理机制接管程序，并开始寻找异常处理程序来帮助程序从错误状态中恢复。</p><h2 id="异常链"><a href="#异常链" class="headerlink" title="异常链"></a>异常链</h2><p>我们常常希望在捕获一个异常后抛出另一个异常，并且希望将原始异常的信息保存下来，这就称为异常链。在所有<code>Throwable</code>的子类构造器中都可以接收一个cause对象作为参数，它就是用来表示原始异常的。<br>不过对于除<code>Error</code>，<code>Exception</code>，<code>RuntimeException</code>以外的异常来说，想要添加异常链要调用他们的initCause()方法，而非构造器。</p><h2 id="异常丢失"><a href="#异常丢失" class="headerlink" title="异常丢失"></a>异常丢失</h2><p>我们通常使用finally来处理发生异常后的恢复工作。但假如恢复工作过程中抛出了异常，那就代表在原有异常还未处理的情况下抛出了新的异常，这会将原来的异常覆盖掉，外界的catch语句就只会捕获到finally中抛出的异常。</p><h2 id="将被检查的异常转换为不检查的异常"><a href="#将被检查的异常转换为不检查的异常" class="headerlink" title="将被检查的异常转换为不检查的异常"></a>将被检查的异常转换为不检查的异常</h2><p>在编写方法时，我们可能会发现，这个方法会产生一个异常，但我们目前不清楚应该如何处理它。这时，异常链就可以体现出它的价值了，可以通过将一个被检查的异常传递给RuntimeException的构造器，这样就可以避免异常被吞掉，同时也可以保证不会丢失任何异常信息。而在考虑好如何处理异常之后，就可以用catch去捕获对应的异常。</p><h2 id="异常指南"><a href="#异常指南" class="headerlink" title="异常指南"></a>异常指南</h2><ol><li>尽可能使用try-with-resource</li><li>在知道该如何处理的情况下才捕获异常</li><li>解决问题并且重新调用产生异常的方法</li><li>进行少许修补，然后绕过异常发生的地方继续执行</li><li>用其他数据进行计算，以代替方法预计会返回的值</li><li>将当前环境下能做的事尽量做完，剩下的抛给高层去做</li><li>终止程序</li><li>简化</li></ol><h1 id="类型信息"><a href="#类型信息" class="headerlink" title="类型信息"></a>类型信息</h1><p>RTTI：运行时类型信息</p><h2 id="类字面常量"><a href="#类字面常量" class="headerlink" title="类字面常量"></a>类字面常量</h2><p>除了Class.forName之外，Java还提供了另一种方法创建类对象的引用：类字面常量。其格式类似于<code>FancyToy.class</code>。这样生成的类对象引用会更加安全，因为他在编译期就会被检查。同时不必进行方法调用，效率更高。<br>不过需要注意的一点是，当使用类字面常量创建Class对象引用时不会自动初始化Class对象。Java在使用类之前做的准备工作实际包含三个步骤：</p><ol><li>加载：由类加载器执行，在classpath中根据类名查找字节码，并从这些字节码中创建一个Class对象。</li><li>链接：验证类中的字节码，为static字段分配存储空间，并且如果有需要的话，解析该类创建的对其他类的所有引用。</li><li>初始化：如果该类具有超类，则先初始化超类，执行static初始化器和static初始化块<br>除此之外，如果一个被static final修饰的值是编译期常量，那么这个值不需要对类进行初始化就能被读取。</li></ol><h2 id="注册工厂"><a href="#注册工厂" class="headerlink" title="注册工厂"></a>注册工厂</h2><p>从基类的层次结构生成对象的问题是，每当向层次结构中添加一种新类型，就必须将其硬编码到记录子类的条目当中，这相当于要求层次结构内部的对象要了解到整个层次结构。如果一个系统会定期添加类，这就很容易导致问题。<br>因此我们就需要将子类的生成与子类本身进行解耦(资源和操作资源的行为解耦)。这就需要工厂模式了，每当有子类添加进来，就将他注册到工厂当中。</p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>在不确定对象的类型时，如果处于编译期，RTTI可以告诉我们答案。但如果在运行时，RTTI便无能为力了。起初，这看起来并没有那么大的限制，但是假设你引用了一个不在程序空间中的对象。实际上，该对象的类在编译时甚至对程序都不可用。也许你从磁盘文件或网络连接中获得了大量的字节，并被告知这些字节代表一个类。<br>上面提到的问题可以使用反射来解决。但在使用反射前先要意识到反射并没有什么魔力，当我们使用反射与未知类型的对象进行交互时，JVM会查看该对象，并查找到它属于特定的类，在执行任何操作之前，仍旧需要加载Class对象。因此对应的.class文件必须在本地或网络上对JVM可用。</p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>一个对象封装真实对象，代替其提供其他或不同的操作—-这些操作通常涉及到与“真实”对象的通信，因此代理通常充当中间对象。<br>当我们希望将额外的操作与真实对象分离时，代理就能体现出它的价值。当我们想要衡量真实对象对此类调用的开销但又不想让这部分代码耦合到自己的程序中时，就可以使用代理来进行操作。<br>Java在此基础上还提供了动态代理的功能，不仅动态创建代理对象，而且动态处理对代理方法的调用。在动态代理上进行的所有调用都被重定向到单个调用处理程序，该代理程序发现调用的内容并决定如何处理。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Interface</span> <span class="token punctuation">{</span>      <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">void</span> <span class="token function">somethingElse</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">RealObject</span> <span class="token keyword">implements</span> <span class="token class-name">Interface</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"doSomething"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">somethingElse</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"somethingElse "</span> <span class="token operator">+</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">DynamicProxyHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token class-name">Object</span> proxied<span class="token punctuation">;</span>      <span class="token class-name">DynamicProxyHandler</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxied<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>proxied <span class="token operator">=</span> proxied<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"proxy: "</span> <span class="token operator">+</span> proxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", method: "</span> <span class="token operator">+</span> method <span class="token operator">+</span> <span class="token string">", args: "</span> <span class="token operator">+</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> arg <span class="token operator">:</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>proxied<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicProxyDemo</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token class-name">Interface</span> iface<span class="token punctuation">)</span> <span class="token punctuation">{</span>          iface<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          iface<span class="token punctuation">.</span><span class="token function">somethingElse</span><span class="token punctuation">(</span><span class="token string">"bonobo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">RealObject</span> real <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RealObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">consumer</span><span class="token punctuation">(</span>real<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Interface</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Interface</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>                  <span class="token class-name">Interface</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token class-name">Interface</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token keyword">new</span> <span class="token class-name">DynamicProxyHandler</span><span class="token punctuation">(</span>real<span class="token punctuation">)</span>          <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">consumer</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面是使用动态代理的一个简单示例，代理会打印调用方法的信息。Proxy.newInstance需要三个参数，第一个是一个类加载器，第二个是希望代理实现的接口列表，最后是调用处理器的一个实现。<br>在更复杂的场景中，比如RPC框架，动态代理在接收到本地的方法请求之后，会将需要调用的方法打包成一个请求，发送到服务端去执行。</p><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h3 id="文件和目录路径"><a href="#文件和目录路径" class="headerlink" title="文件和目录路径"></a>文件和目录路径</h3><p>一个Path对象表示一个文件或者目录的路径，<em>是一个跨操作系统和文件系统的抽象</em>。让程序员在构造路径时可以不关注底层操作系统。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PathInfo</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">String</span> id<span class="token punctuation">,</span> <span class="token class-name">Object</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Path</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"Exists"</span><span class="token punctuation">,</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"RegularFile"</span><span class="token punctuation">,</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">isRegularFile</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"Directory"</span><span class="token punctuation">,</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"Absolute"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"FileName"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"Parent"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"Root"</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"******************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"C:"</span><span class="token punctuation">,</span> <span class="token string">"path"</span><span class="token punctuation">,</span> <span class="token string">"to"</span><span class="token punctuation">,</span> <span class="token string">"nowhere"</span><span class="token punctuation">,</span> <span class="token string">"NoFile.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Path</span> p <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"PathInfo.java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">info</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Path</span> ap <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">toAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">info</span><span class="token punctuation">(</span>ap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">info</span><span class="token punctuation">(</span>ap<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">info</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">toRealPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">URI</span> u <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">toUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"URI: "</span> <span class="token operator">+</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Path</span> puri <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>puri<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> f <span class="token operator">=</span> ap<span class="token punctuation">.</span><span class="token function">toFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Path还可以非常简单的生成一个文件的某一部分，可以通过<code>getName()</code>索引Path的各个部分，直至达到上限。Path也实现了<code>Iterable</code>接口，因此可以用for-each遍历。<br>请注意，即使路径以&nbsp;<strong>.java</strong>&nbsp;结尾，使用&nbsp;<strong>endsWith()</strong>&nbsp;方法也会返回&nbsp;<strong>false</strong>。这是因为使用&nbsp;<strong>endsWith()</strong>&nbsp;比较的是整个路径部分，而不会包含文件路径的后缀。同时，遍历的部分也不包括根路径，只有在使用startswith检测时才会返回true</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PartsOfPaths</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Path</span> p <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"threadlearn"</span><span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"io"</span><span class="token punctuation">,</span> <span class="token string">"Redirecting.java"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> p<span class="token punctuation">.</span><span class="token function">getNameCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ends with .java: "</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Path</span> pp <span class="token operator">:</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>pp <span class="token operator">+</span> <span class="token string">": "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span>pp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Starts with "</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除此之外，我们还可以通过对Path对象增加或者删除一部分来构造一个新的Path对象。使用<code>relativize()</code>移除Path的根路径，使用<code>resolve()</code>添加Path的尾路径</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddAndSubtractPaths</span> <span class="token punctuation">{</span>      <span class="token keyword">static</span> <span class="token class-name">Path</span> base <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">,</span> <span class="token string">".."</span><span class="token punctuation">,</span> <span class="token string">".."</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token class-name">Path</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">")r "</span> <span class="token operator">+</span> base<span class="token punctuation">.</span><span class="token function">relativize</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">") "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"RealPath: "</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">toRealPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Path</span> p <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"threadlearn"</span><span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"io"</span> <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">show</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Path</span> convoluted <span class="token operator">=</span> p                  <span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"AddAndSubtractPaths.java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//                .resolve(p.getParent().getFileName());  </span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> convoluted<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">show</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> convoluted<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Java的<code>Files</code>工具类中没有包含删除目录树的相关方法，因此我们需要自行实现一个。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RmDir</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token class-name">Path</span> dir<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>          <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">walkFileTree</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SimpleFileVisitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token annotation punctuation">@Override</span>              <span class="token keyword">public</span> <span class="token class-name">FileVisitResult</span> <span class="token function">visitFile</span><span class="token punctuation">(</span><span class="token class-name">Path</span> file<span class="token punctuation">,</span> <span class="token class-name">BasicFileAttributes</span> attrs<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>                  <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> <span class="token class-name">FileVisitResult</span><span class="token punctuation">.</span>CONTINUE<span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token annotation punctuation">@Override</span>              <span class="token keyword">public</span> <span class="token class-name">FileVisitResult</span> <span class="token function">postVisitDirectory</span><span class="token punctuation">(</span><span class="token class-name">Path</span> dir<span class="token punctuation">,</span> <span class="token class-name">IOException</span> exc<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>                  <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> <span class="token class-name">FileVisitResult</span><span class="token punctuation">.</span>CONTINUE<span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个类的实现依赖于<code>Files.walkFileTree</code>方法。他会遍历每一个子目录和文件。这里的底层实现运用到了visitor设计模式([[design-mode#Visitor 模式]])。每一个文件都是一个资源，我们使用<code>FileVisitor</code>的实现类访问并操作文件资源。<br>FileVisitor有四个抽象方法：</p><ol><li>**preVisitDirectory()**：在访问目录中条目之前在目录上运行。</li><li>**visitFile()**：运行目录中的每一个文件。</li><li>**visitFileFailed()**：调用无法访问的文件。</li><li>**postVisitDirectory()**：在访问目录中条目之后在目录上运行，包括所有的子目录。</li></ol><p>下面是利用walk()方法遍历目录下的所有文件和子目录。注意<code>Files.newDirectoryStream</code>只能列出指定文件夹下的文件夹和文件，无法获取子目录下的文件信息。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Directories</span> <span class="token punctuation">{</span>      <span class="token keyword">static</span> <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">static</span> <span class="token class-name">String</span> sep <span class="token operator">=</span> <span class="token class-name">FileSystems</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSeparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> parts <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">,</span> <span class="token string">"bar"</span><span class="token punctuation">,</span> <span class="token string">"baz"</span><span class="token punctuation">,</span> <span class="token string">"bag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">static</span> <span class="token class-name">Path</span> <span class="token function">makeVariant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">rotate</span><span class="token punctuation">(</span>parts<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>sep<span class="token punctuation">,</span> parts<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">refreshTestDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">RmDir</span><span class="token punctuation">.</span><span class="token function">rmdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createDirectory</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">populateTestDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">Path</span> variant <span class="token operator">=</span> <span class="token function">makeVariant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span>variant<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createDirectories</span><span class="token punctuation">(</span>variant<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"threadlearn"</span><span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"dir"</span><span class="token punctuation">,</span> <span class="token string">"Directories.java"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> variant<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"File.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createTempFile</span><span class="token punctuation">(</span>variant<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>          <span class="token function">refreshTestDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"Hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Path</span> variant <span class="token operator">=</span> <span class="token function">makeVariant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">populateTestDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Path</span> tempdir <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createTempDirectory</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"DIR_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createTempFile</span><span class="token punctuation">(</span>tempdir<span class="token punctuation">,</span> <span class="token string">"pre"</span><span class="token punctuation">,</span> <span class="token string">".non"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">newDirectoryStream</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果希望获取文件系统的信息，可以使用<code>FileSystems.getDefault()</code>方法。或者在Path对象上调用getFileSystem()获取创建该对象的文件系统。</p><h3 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h3><p>nio为文件查找提供了一种更好的解决方案，通过在<code>FileSystem</code>上调用<code>getPathMatcher</code>获取一个路径匹配器，然后传入需要的模式(glob/regex)。既可以匹配到需要的文件。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Find</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>          <span class="token class-name">Path</span> test <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Directories</span><span class="token punctuation">.</span><span class="token function">refreshTestDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Directories</span><span class="token punctuation">.</span><span class="token function">populateTestDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">createDirectory</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"dir.tmp"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">PathMatcher</span> pathMatcher <span class="token operator">=</span> <span class="token class-name">FileSystems</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPathMatcher</span><span class="token punctuation">(</span><span class="token string">"glob:**/*.{tmp,txt}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">walk</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>pathMatcher<span class="token operator">::</span><span class="token function">matches</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><p>当一个文件的比较小时，使用<code>Files.readAllLines()</code>可以一次性读取整个文件，返回一个字符串列表。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListOfLines</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>          <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllLines</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"threadlearn"</span><span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token string">"dir"</span><span class="token punctuation">,</span> <span class="token string">"RmDir.java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>line <span class="token operator">-&gt;</span> <span class="token operator">!</span>line<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"//"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上是一个非常简单的用例。如果希望将读取的内容写入到文件中，可以使用<code>Files.write</code>方法，他接受字节数组或是任何可以迭代的对象。<br>在文件大小非常小时，上面的操作会有非常好的表现。但如果文件非常大，那么一次性读取会消耗大量的时间，同时也会占用大量内存。<br>要想解决这个问题，可以使用<code>Files.lines</code>方法，它可以方便的将文件转为行的流，这样就可以快捷的处理大型文件。</p><h2 id="标准I-x2F-O"><a href="#标准I-x2F-O" class="headerlink" title="标准I/O"></a>标准I/O</h2><p>标准IO指的是UNIX中程序所使用的单一信息流。程序的所有输入都可以来自标准输入，所有输出都可以发送到标准输出，所有错误都可以发送到标准错误。它的价值在于可以很容易地使多个程序串联起来，一个程序的标准输出可以称为另一个程序的标准输入。</p><h3 id="标准I-x2F-O重定向"><a href="#标准I-x2F-O重定向" class="headerlink" title="标准I/O重定向"></a>标准I/O重定向</h3><p><code>System</code>类可以通过静态方法重定向标准输入输出</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">setIn</span><span class="token punctuation">(</span><span class="token class-name">InputSrream</span><span class="token punctuation">)</span><span class="token function">setOut</span><span class="token punctuation">(</span><span class="token class-name">PrintStream</span><span class="token punctuation">)</span><span class="token function">setErr</span><span class="token punctuation">(</span><span class="token class-name">PrintStream</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果在屏幕上制造大量输出，并且滚动速度很快；或者需要用命令行程序反复测试特定的用户输入序列，就可以通过重定向输入做到。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Redirecting</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">PrintStream</span> console <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">(</span> <span class="token class-name">BufferedInputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"Redirecting.java"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">PrintStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"Redirecting.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>           <span class="token punctuation">{</span>              <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setIn</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setErr</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>              <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>console<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="新IO系统"><a href="#新IO系统" class="headerlink" title="新IO系统"></a>新IO系统</h2><p>在新I/O系统中，使用更接近操作系统的I/O实现方式提升速度：通道和缓冲区。发送方将数据打包到缓冲区中，然后将缓冲区中的数据推入通道当中，相比普通的I/O流，新I/O每次都会送入一整块数据，减少了交互次数，提升了效率。</p><h3 id="字节缓冲区ByteBuffer"><a href="#字节缓冲区ByteBuffer" class="headerlink" title="字节缓冲区ByteBuffer"></a>字节缓冲区ByteBuffer</h3><p>这是唯一直接和通道进行通信的类型，只需要告诉他分配多少内存，就可以创建出一块字节缓冲区。同时由于他是一种非常底层的处理方式，他可以做到在大多数OS中让内存映射更加高效。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetChannel</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"data.txt"</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> BSIZE <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileChannel</span> fc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              fc<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token string">"Some text"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileChannel</span> fc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              fc<span class="token punctuation">.</span><span class="token function">position</span><span class="token punctuation">(</span>fc<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              fc<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span><span class="token string">"Some more"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileChannel</span> fc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>BSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>              fc<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>              buffer<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">hasRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子展现了如何使用通道和缓冲区。对于例子中出现的流，我们都使用getChannel()方法获取了一个FileChannel通道。通道的运行逻辑在这里先简单讲一下：向他传入一个用于读写的ByteBuffer，然后锁住文件区域保证独占式访问。</p><p>文件的写入操作非常容易理解，这里主要讲解一下只读操作。当我们需要对文件进行只读访问时，就需要使用allocate方法显式分配一个ByteBuffer。由于nio的目的就是快速移动大量数据，因此缓冲区的大小非常讲究，如果使用allocateDirect方法可以生成和OS结合度更高的直接缓冲区，不过这种方式开销较大。想找出合适的缓冲区大小还是要多次实验。<br>而一旦调用了read方法将字节写入到缓冲区，就必须调用flip方法让缓冲区做好提取字节的准备。</p><p>此外，文件的读写还要考虑编码问题，写入的编码与读取的解码必须保持一致才能输出正确的结果。这里可以使用 Charset工具类提供的一系列方法来实现。</p><h3 id="缓冲区的细节"><a href="#缓冲区的细节" class="headerlink" title="缓冲区的细节"></a>缓冲区的细节</h3><p>Buffer由数据和4个用于高效访问和操作数据的索引组成：mark，position，limit，capacity</p><h3 id="内存映射文件"><a href="#内存映射文件" class="headerlink" title="内存映射文件"></a>内存映射文件</h3><p>内存映射文件可以协助我们创建和修改那些因为过大而无法加载到内存中的文件。通过它，我们可以假定整个文件都加载到内存中了，将他当作一个非常大的数组来访问。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LargeMappedFiles</span> <span class="token punctuation">{</span>      <span class="token keyword">static</span> <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0x8000000</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">RandomAccessFile</span> tdat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span><span class="token string">"test.dat"</span><span class="token punctuation">,</span> <span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">MappedByteBuffer</span> out <span class="token operator">=</span> tdat<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">FileChannel<span class="token punctuation">.</span>MapMode</span><span class="token punctuation">.</span>READ_WRITE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  out<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token char">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Finish writing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>out<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子先为文件生成管道，然后调用map()生成MappedByteBuffer(一种特殊类型的直接缓冲区)，我们可以指定文件的起始位置和映射区域的长度，这可以让我们选择只映射大文件中的一小块区域。</p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>所有的枚举类型都是由编译器通过继承Enum类来创建的。编译器会在生成枚举时，为它添加静态方法values()以及valueOf()。同时这个枚举会被限定为final类，因此枚举是无法继承的。由于生成的values()是对应枚举类的静态方法，因此它在向上转型之后就不可用了，不过我们可以通过Class中的<code>getEnumConstants()</code>方法获取枚举。</p><h3 id="枚举分组"><a href="#枚举分组" class="headerlink" title="枚举分组"></a>枚举分组</h3><p>虽然枚举无法继承，但他仍旧可以实现一个或多个接口。<br>接下来编写一个枚举工具类，让他可以随机选择某个枚举当中的值，<em>T extends Enum&lt;T&gt;</em> 表示传入的范型必然是个枚举类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Enums</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Enum</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">random</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> values<span class="token punctuation">[</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>values<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于枚举类型无法被继承，因此我们没办法通过常规的方式来扩充枚举中的元素，同时也不方便对枚举进行分组。<br>不过我们可以借助接口实现对元素的分组，然后基于该接口生成一个枚举。<br>在下面的实例中，每一个枚举元素都从属于Food这个接口，但同时他们又从属于不同的枚举</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Food</span> <span class="token punctuation">{</span>      <span class="token keyword">enum</span> <span class="token class-name">Appetizer</span> <span class="token keyword">implements</span> <span class="token class-name">Food</span> <span class="token punctuation">{</span>          SALAD<span class="token punctuation">,</span> SOUP<span class="token punctuation">,</span> SPRING_ROLLS<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">enum</span> <span class="token class-name">MainCourse</span> <span class="token keyword">implements</span> <span class="token class-name">Food</span> <span class="token punctuation">{</span>          LASAGNE<span class="token punctuation">,</span> BURRITO<span class="token punctuation">,</span> PAD_THAI<span class="token punctuation">,</span>          LENTILS<span class="token punctuation">,</span> HUMMUS<span class="token punctuation">,</span> VINDALOO<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">enum</span> <span class="token class-name">Dessert</span> <span class="token keyword">implements</span> <span class="token class-name">Food</span> <span class="token punctuation">{</span>          TIRAMISU<span class="token punctuation">,</span> GELATO<span class="token punctuation">,</span> BLACK_FOREST_CAKE<span class="token punctuation">,</span>          FRUIT<span class="token punctuation">,</span> CREME_CARAMEL<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">enum</span> <span class="token class-name">Coffee</span> <span class="token keyword">implements</span> <span class="token class-name">Food</span> <span class="token punctuation">{</span>          BLACK_COFFEE<span class="token punctuation">,</span> DECAF_COFFEE      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">Food</span> food <span class="token operator">=</span> <span class="token class-name">Appetizer</span><span class="token punctuation">.</span>SALAD<span class="token punctuation">;</span>          food <span class="token operator">=</span> <span class="token class-name">Dessert</span><span class="token punctuation">.</span>BLACK_FOREST_CAKE<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过当我们希望处理一整组数据时，接口的效果往往不如枚举有用，我们可以通过在枚举内嵌套枚举来实现这样的功能。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Meal</span> <span class="token punctuation">{</span>      <span class="token function">APPETIZER</span><span class="token punctuation">(</span><span class="token class-name">Food<span class="token punctuation">.</span>Appetizer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">MAINCOURSE</span><span class="token punctuation">(</span><span class="token class-name">Food<span class="token punctuation">.</span>MainCourse</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">DESSERT</span><span class="token punctuation">(</span><span class="token class-name">Food<span class="token punctuation">.</span>Dessert</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">COFFEE</span><span class="token punctuation">(</span><span class="token class-name">Food<span class="token punctuation">.</span>Coffee</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token class-name">Food</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token class-name">Meal</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Food</span><span class="token punctuation">&gt;</span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>          values <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Food</span> <span class="token punctuation">{</span>          <span class="token keyword">enum</span> <span class="token class-name">Appetizer</span> <span class="token keyword">implements</span> <span class="token class-name">Food</span> <span class="token punctuation">{</span>              SALAD<span class="token punctuation">,</span> SOUP<span class="token punctuation">,</span> SPRING_ROLLS<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">enum</span> <span class="token class-name">MainCourse</span> <span class="token keyword">implements</span> <span class="token class-name">Food</span> <span class="token punctuation">{</span>              LASAGNE<span class="token punctuation">,</span> BURRITO<span class="token punctuation">,</span> PAD_THAT          <span class="token punctuation">}</span>          <span class="token keyword">enum</span> <span class="token class-name">Dessert</span> <span class="token keyword">implements</span> <span class="token class-name">Food</span> <span class="token punctuation">{</span>              TIRAMISU<span class="token punctuation">,</span> GELATO          <span class="token punctuation">}</span>          <span class="token keyword">enum</span> <span class="token class-name">Coffee</span> <span class="token keyword">implements</span> <span class="token class-name">Food</span> <span class="token punctuation">{</span>              BLACK_COFFEE<span class="token punctuation">,</span> DECAF_COFFEE          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token class-name">Food</span> <span class="token function">randomSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token class-name">Enums</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上面的示例，可以大致总结一下给接口分组的方法：使用接口将多组接口归类，然后再将每一组枚举作为一个新的枚举存储进另一个总的枚举当中方便对枚举分组的操作。</p><h3 id="EnumSet"><a href="#EnumSet" class="headerlink" title="EnumSet"></a>EnumSet</h3><p>Set不允许有重复集合存在，enum要求每个内部成员都是唯一的，因此enum和Set之间有一定的共同点。但由于枚举无法添加或移除元素，它显得不如set那么好用。传统的枚举利用int来进行位标识，这种标识通常用于表示某种开关信息；但由于程序员操作的是与业务逻辑无关的对象，非常容易出错且不易读。<br>EnumSet的出现让我们不必再使用int来进行标识，他在内部使用一个long型变量当作位数组，因此他在效率上和位标识差距不大，但在代码上，他具备更好的表现能力，可以更好的与业务逻辑结合。<br>EnumSet内部使用long进行位标识，标志某一个枚举是否存在，如果枚举数量超过了64,他也会引入新的long型变量。</p><h3 id="EnumMap"><a href="#EnumMap" class="headerlink" title="EnumMap"></a>EnumMap</h3><p>EnumMap要求自身所有的键都来自于某一个枚举，由于枚举本身具有的约束性，EnumMap的内部可以直接使用一个数组来实现，因此他的性能丝毫不用担心。<br>相比与普通的Map，EnumMap要求调用put传入的键必须是一个枚举，除此之外和普通的Map没什么区别。<br>下面是使用EnumMap实现的一个简单的Command模式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>      <span class="token keyword">void</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumMaps</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">EnumMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AlarmPoints</span><span class="token punctuation">,</span> <span class="token class-name">Command</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">AlarmPoints</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">AlarmPoints</span><span class="token punctuation">.</span>LOBBY<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lobby"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">AlarmPoints</span><span class="token punctuation">.</span>STAIR1<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stair1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">AlarmPoints</span><span class="token punctuation">.</span>STAIR2<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stair2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AlarmPoints</span><span class="token punctuation">,</span> <span class="token class-name">Command</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果有部分枚举没有配置值，就需要在提取时做一定处理，因为EnumMap会在初始化时将所有枚举对应的值初始化为null。</p><h3 id="常量特定方法"><a href="#常量特定方法" class="headerlink" title="常量特定方法"></a>常量特定方法</h3><p>Java的枚举机制可以通过为每个枚举实例编写不同的方法，来赋予他们不同的行为。要想实现这一点，只需要在枚举类型中定义一个或多个抽象方法，然后为每个枚举定义不同的实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ConstantSpecificMethod</span> <span class="token punctuation">{</span>      DATE_TIME <span class="token punctuation">{</span>          <span class="token annotation punctuation">@Override</span>          <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token class-name">DateFormat</span><span class="token punctuation">.</span><span class="token function">getDateInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      CLASSPATH <span class="token punctuation">{</span>          <span class="token annotation punctuation">@Override</span>          <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"CLASSPATH"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ConstantSpecificMethod</span> csm <span class="token operator">:</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>csm<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样我们就实现了通过枚举实例来查找和调用方法，这通常叫<strong>表驱动模式</strong>。通过常量特定方法，枚举的各种实例可以拥有各自的行为。<br>不过编译器不会允许将枚举实例作为类类型来使用，因为在编译器完成编译后，每个枚举实例都是被static final修饰的。</p><h3 id="枚举实现状态机"><a href="#枚举实现状态机" class="headerlink" title="枚举实现状态机"></a>枚举实现状态机</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Category</span> <span class="token punctuation">{</span>      <span class="token function">MONEY</span><span class="token punctuation">(</span><span class="token class-name">Input</span><span class="token punctuation">.</span>NICKEL<span class="token punctuation">,</span> <span class="token class-name">Input</span><span class="token punctuation">.</span>DIME<span class="token punctuation">,</span> <span class="token class-name">Input</span><span class="token punctuation">.</span>QUARTER<span class="token punctuation">,</span> <span class="token class-name">Input</span><span class="token punctuation">.</span>DOLLAR<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">ITEM_SELECTION</span><span class="token punctuation">(</span><span class="token class-name">Input</span><span class="token punctuation">.</span>TOOTHPASTE<span class="token punctuation">,</span> <span class="token class-name">Input</span><span class="token punctuation">.</span>CHIPS<span class="token punctuation">,</span> <span class="token class-name">Input</span><span class="token punctuation">.</span>SODA<span class="token punctuation">,</span> <span class="token class-name">Input</span><span class="token punctuation">.</span>SOAP<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">QUIT_TRANSACTION</span><span class="token punctuation">(</span><span class="token class-name">Input</span><span class="token punctuation">.</span>ABORT_TRANSACTION<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">SHUT_DOWN</span><span class="token punctuation">(</span><span class="token class-name">Input</span><span class="token punctuation">.</span>STOP<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token class-name">Input</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">;</span>      <span class="token class-name">Category</span><span class="token punctuation">(</span><span class="token class-name">Input</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>values <span class="token operator">=</span> values<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">EnumMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span><span class="token punctuation">,</span> <span class="token class-name">Category</span><span class="token punctuation">&gt;</span></span> categories <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Input</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">static</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Category</span> constant <span class="token operator">:</span> <span class="token class-name">Category</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getEnumConstants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Input</span> value <span class="token operator">:</span> constant<span class="token punctuation">.</span>values<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  categories<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> constant<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Category</span> <span class="token function">categorize</span><span class="token punctuation">(</span><span class="token class-name">Input</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> categories<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VendingMachine</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">State</span> state <span class="token operator">=</span> <span class="token class-name">State</span><span class="token punctuation">.</span>RESTING<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> amount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Input</span> selection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">enum</span> <span class="token class-name">StateDuration</span> <span class="token punctuation">{</span>          TRANSIENT      <span class="token punctuation">}</span>      <span class="token keyword">enum</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>          RESTING <span class="token punctuation">{</span>              <span class="token annotation punctuation">@Override</span>              <span class="token keyword">void</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token class-name">Input</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token class-name">Category</span><span class="token punctuation">.</span><span class="token function">categorize</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token keyword">case</span> MONEY<span class="token operator">:</span>                          amount <span class="token operator">+=</span> input<span class="token punctuation">.</span><span class="token function">amount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          state <span class="token operator">=</span> ADDING_MONEY<span class="token punctuation">;</span>                          <span class="token keyword">break</span><span class="token punctuation">;</span>                      <span class="token keyword">case</span> SHUT_DOWN<span class="token operator">:</span>                          state <span class="token operator">=</span> TERMINAL<span class="token punctuation">;</span>                      <span class="token keyword">default</span><span class="token operator">:</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          ADDING_MONEY <span class="token punctuation">{</span>              <span class="token annotation punctuation">@Override</span>              <span class="token keyword">void</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token class-name">Input</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token class-name">Category</span><span class="token punctuation">.</span><span class="token function">categorize</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token keyword">case</span> MONEY<span class="token operator">:</span>                          amount <span class="token operator">+=</span> input<span class="token punctuation">.</span><span class="token function">amount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token keyword">break</span><span class="token punctuation">;</span>                      <span class="token keyword">case</span> ITEM_SELECTION<span class="token operator">:</span>                          selection <span class="token operator">=</span> input<span class="token punctuation">;</span>                          <span class="token keyword">if</span> <span class="token punctuation">(</span>amount <span class="token operator">&lt;</span> selection<span class="token punctuation">.</span><span class="token function">amount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Insufficient money for "</span> <span class="token operator">+</span> selection<span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                              state <span class="token operator">=</span> DISPENSING<span class="token punctuation">;</span>                          <span class="token punctuation">}</span>                          <span class="token keyword">break</span><span class="token punctuation">;</span>                      <span class="token keyword">case</span> QUIT_TRANSACTION<span class="token operator">:</span>                          state <span class="token operator">=</span> GIVING_CHANGE<span class="token punctuation">;</span>                      <span class="token keyword">default</span><span class="token operator">:</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token function">DISPENSING</span><span class="token punctuation">(</span><span class="token class-name">StateDuration</span><span class="token punctuation">.</span>TRANSIENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token annotation punctuation">@Override</span>              <span class="token keyword">void</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"here is your "</span> <span class="token operator">+</span> selection<span class="token punctuation">)</span><span class="token punctuation">;</span>                  amount <span class="token operator">-=</span> selection<span class="token punctuation">.</span><span class="token function">amount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  state <span class="token operator">=</span> GIVING_CHANGE<span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token function">GIVING_CHANGE</span><span class="token punctuation">(</span><span class="token class-name">StateDuration</span><span class="token punctuation">.</span>TRANSIENT<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token annotation punctuation">@Override</span>              <span class="token keyword">void</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>amount <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Your change: "</span> <span class="token operator">+</span> amount<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  state <span class="token operator">=</span> RESTING<span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          TERMINAL <span class="token punctuation">{</span>              <span class="token annotation punctuation">@Override</span>              <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Halted"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token keyword">private</span> <span class="token keyword">boolean</span> isTransient <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token class-name">State</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>          <span class="token class-name">State</span><span class="token punctuation">(</span><span class="token class-name">StateDuration</span> trans<span class="token punctuation">)</span> <span class="token punctuation">{</span>              isTransient <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">void</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token class-name">Input</span> input<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Only call next(Input) for non-transient states"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">void</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Only call next() for StateDuration.TRANSIENT states"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span><span class="token punctuation">&gt;</span></span> gen<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>state <span class="token operator">!=</span> <span class="token class-name">State</span><span class="token punctuation">.</span>TERMINAL<span class="token punctuation">)</span> <span class="token punctuation">{</span>              state<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>gen<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span>isTransient<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  state<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              state<span class="token punctuation">.</span><span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span><span class="token punctuation">&gt;</span></span> gen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomInputSupplier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">run</span><span class="token punctuation">(</span>gen<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">RandomInputSupplier</span> <span class="token keyword">implements</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Input</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">Input</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token class-name">Input</span><span class="token punctuation">.</span><span class="token function">randomSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的例子中，我们使用switch在枚举实例中进行选择操作。通常在组织多个枚举类型时，最常见的问题之一是“需要以什么粒度进行switch”。在例子中，我们根据输入的类型以及当前的状态进行选择操作。</p><h3 id="多路分发"><a href="#多路分发" class="headerlink" title="多路分发"></a>多路分发</h3><p>在讲解多路分发之前，先了解一下他的应用场景：假设我们现在要执行Number.plus(Number)这样一个方法，由于Number是数值家族的基类，当他被调用时，我们在不知道调用者和参数具体类型的情况下，如何保证他们的相互作用正确。<br>这种情景下很容易就会想到Java的动态绑定，但事实上Java只支持单路分发，也就是说只有调用者的具体类型会被动态绑定，参数的具体类型仍就是基类。因此如果我们想要实现多路分发就必须执行多次方法调用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// item.java</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>      <span class="token class-name">Outcome</span> <span class="token function">compete</span><span class="token punctuation">(</span><span class="token class-name">Item</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Outcome</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">Paper</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Outcome</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">Scissors</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Outcome</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">Rock</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment">// Rock.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rock</span> <span class="token keyword">implements</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">Outcome</span> <span class="token function">compete</span><span class="token punctuation">(</span><span class="token class-name">Item</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> item<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">Outcome</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">Paper</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token class-name">Outcome</span><span class="token punctuation">.</span>WIN<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">Outcome</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">Scissors</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token class-name">Outcome</span><span class="token punctuation">.</span>LOSE<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">Outcome</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">Rock</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token class-name">Outcome</span><span class="token punctuation">.</span>DRAW<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment">// Paper.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Paper</span> <span class="token keyword">implements</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">Outcome</span> <span class="token function">compete</span><span class="token punctuation">(</span><span class="token class-name">Item</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> item<span class="token punctuation">.</span><span class="token function">compete</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">Outcome</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">Paper</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token class-name">Outcome</span><span class="token punctuation">.</span>DRAW<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">Outcome</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">Scissors</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token class-name">Outcome</span><span class="token punctuation">.</span>WIN<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">Outcome</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">Rock</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token class-name">Outcome</span><span class="token punctuation">.</span>LOSE<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment">// Scissors.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Scissors</span> <span class="token keyword">implements</span> <span class="token class-name">Item</span><span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">Outcome</span> <span class="token function">compete</span><span class="token punctuation">(</span><span class="token class-name">Item</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> item<span class="token punctuation">.</span><span class="token function">compete</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">Outcome</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">Paper</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token class-name">Outcome</span><span class="token punctuation">.</span>LOSE<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">Outcome</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">Scissors</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token class-name">Outcome</span><span class="token punctuation">.</span>DRAW<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">Outcome</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token class-name">Rock</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token class-name">Outcome</span><span class="token punctuation">.</span>WIN<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的示例中，为每一个Item类定义了一个compete方法，当他被调用时可以获取到调用者的具体类型。然后将参数作为调用者继续调用，并将自身作为参数传入比较方法，这样就完成了双路分发。<br>上面的实现在本质上其实是一种表驱动模式，让每一个实体去实现自己与其他所有类型实体比较的方法。因此，我们也可以使用EnumMap来实现这个功能。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Competitor</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Competitor</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>      <span class="token class-name">Outcome</span> <span class="token function">compete</span><span class="token punctuation">(</span><span class="token class-name">T</span> competitor<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">RoShamBo</span> <span class="token keyword">implements</span> <span class="token class-name">Competitor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoShamBo</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>      PAPER<span class="token punctuation">,</span> SCISSORS<span class="token punctuation">,</span> ROCK<span class="token punctuation">;</span>      <span class="token keyword">static</span> <span class="token class-name">EnumMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoShamBo</span><span class="token punctuation">,</span> <span class="token class-name">EnumMap</span><span class="token punctuation">&lt;</span><span class="token class-name">RoShamBo</span><span class="token punctuation">,</span> <span class="token class-name">Outcome</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EnumMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">RoShamBo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">static</span> <span class="token punctuation">{</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">RoShamBo</span> it <span class="token operator">:</span> <span class="token class-name">RoShamBo</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">EnumMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">RoShamBo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token function">initRow</span><span class="token punctuation">(</span>PAPER<span class="token punctuation">,</span> <span class="token class-name">Outcome</span><span class="token punctuation">.</span>DRAW<span class="token punctuation">,</span> <span class="token class-name">Outcome</span><span class="token punctuation">.</span>LOSE<span class="token punctuation">,</span> <span class="token class-name">Outcome</span><span class="token punctuation">.</span>WIN<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">initRow</span><span class="token punctuation">(</span>SCISSORS<span class="token punctuation">,</span> <span class="token class-name">Outcome</span><span class="token punctuation">.</span>WIN<span class="token punctuation">,</span> <span class="token class-name">Outcome</span><span class="token punctuation">.</span>DRAW<span class="token punctuation">,</span> <span class="token class-name">Outcome</span><span class="token punctuation">.</span>LOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">initRow</span><span class="token punctuation">(</span>ROCK<span class="token punctuation">,</span> <span class="token class-name">Outcome</span><span class="token punctuation">.</span>LOSE<span class="token punctuation">,</span> <span class="token class-name">Outcome</span><span class="token punctuation">.</span>WIN<span class="token punctuation">,</span> <span class="token class-name">Outcome</span><span class="token punctuation">.</span>DRAW<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">initRow</span><span class="token punctuation">(</span><span class="token class-name">RoShamBo</span> it<span class="token punctuation">,</span> <span class="token class-name">Outcome</span> vPaper<span class="token punctuation">,</span> <span class="token class-name">Outcome</span> vScissors<span class="token punctuation">,</span> <span class="token class-name">Outcome</span> vRock<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">EnumMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoShamBo</span><span class="token punctuation">,</span> <span class="token class-name">Outcome</span><span class="token punctuation">&gt;</span></span> row <span class="token operator">=</span> <span class="token class-name">RoShamBo</span><span class="token punctuation">.</span>table<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>          row<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>PAPER<span class="token punctuation">,</span> vPaper<span class="token punctuation">)</span><span class="token punctuation">;</span>          row<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>SCISSORS<span class="token punctuation">,</span> vScissors<span class="token punctuation">)</span><span class="token punctuation">;</span>          row<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ROCK<span class="token punctuation">,</span> vRock<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">Outcome</span> <span class="token function">compete</span><span class="token punctuation">(</span><span class="token class-name">RoShamBo</span> competitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> table<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>competitor<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h1><p>并发:同时完成多个任务，无需等待当前任务完成就可以执行其他的任务。解决了程序因为外部控制导致的阻塞，例如IO。因此并发问题常见于IO密集型任务。</p><p>并行：同时完成在多个位置，完成多个任务。即让多个CPU同时执行程序的不同部分来提升效率。</p><p>并发通过对共享资源的有效控制，提升程序效率。而并行则是通过使用更多的资源，来提升效率。</p><p>trick：抽象泄露，抽象可以通过屏蔽对任务不重要的部分，让人更加容易地理解并设计程序。但抽象如果有所遗漏，即使这些细节被隐藏，也难以掩盖它带来的影响。而支持并发的语言和库似乎多少都有这个问题。</p><p>并发的使用条件</p><p>并发操作需要CPU切换上下文，这会消耗CPU一定的性能。因此，如果程序是CPU密集的，即CPU一般都处于忙碌状态，此时使用并发是没有意义的，应当确保程序开启的线程数和CPU的核心数相等。</p><p>但如果CPU会因某些原因陷入阻塞状态，那么此时使用并发绝对是值得的。</p><h2 id="并行流"><a href="#并行流" class="headerlink" title="并行流"></a>并行流</h2><p>在Java 8中，流可以通过使用分流器（流内部的一种特殊迭代器）来进行自动分割，从而更加轻松的实现并行化。在很多情况下，都可以通过将问题转换为流，然后插入<code>parallel()</code>来提升速度。</p><p>例如，寻找素数这一类相当耗时的操作，在使用并行流之后，可以大大提升效率</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Prime</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> COUNT <span class="token operator">=</span> <span class="token number">100_000</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isPrime</span><span class="token punctuation">(</span><span class="token keyword">long</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">LongStream</span><span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">noneMatch</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> primes <span class="token operator">=</span> <span class="token class-name">LongStream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> i <span class="token operator">-&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">Prime</span><span class="token operator">::</span><span class="token function">isPrime</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>COUNT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mapToObj</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token operator">::</span><span class="token function">toString</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最后结果为1101</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>流的并行运算初步总结：</p><ol><li>流的并行化可以将输入的数据拆分成多个片段，然后针对这些独立的片段运用相应的算法。</li><li>数组的切分非常轻量，均匀，并且可以完全掌握分片的大小。</li><li>对于链表的切分则十分鸡肋，只会拆分成第一个元素和剩下的元素。因链表在内存中并非连续分布，难以把握分割的大小。</li></ol><p>并行流的局限性：</p><ol><li>当内存受限时，并行化操作的效率会大幅降低，此时，并行线程能够使用的辅助空间减少，可以开启的线程也会收到限制。</li><li>如果数组中存储的是对象引用，其速度也会下降。虽然该数组会被保存在缓存中，但其指向的对象几乎永远会在缓存之外。若存储的是基本类型，则缓存命中率会大大提升，程序执行也会更加高效。</li><li>如果<code>parallel()</code>和<code>limit()</code>同时调用，会导致大量线程尽可能去获取输出，最后显示的结果可能是对应方法被大量调用，产生随机输出。</li></ol><h2 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h2><p><code>CompletableFuture</code>的类型为它包含的对象，并且任务的执行可以不依赖于<code>ExecutorService</code>，由它自己管理。同时，我们可以通过在<code>CompletableFuture</code>上增加操作，来控制其包含的对象。他们会自行对携带的对象进行拆包，包装操作。</p><p>除次之外，<code>CompletableFuture</code>可以促使编程人员使用自私儿童原则（不共享），<code>thenApply()</code>进行的操作不会产生任何通信，确保安全性。</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 一个用于测试的有限状态机 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Machine</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>        START<span class="token punctuation">,</span> ONE<span class="token punctuation">,</span> TWO<span class="token punctuation">,</span> THREE<span class="token punctuation">,</span> END<span class="token punctuation">;</span>        <span class="token class-name">State</span> <span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">equals</span><span class="token punctuation">(</span>END<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> END<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">State</span> state <span class="token operator">=</span> <span class="token class-name">State</span><span class="token punctuation">.</span>START<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Machine</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Machine</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token class-name">Machine</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">State</span><span class="token punctuation">.</span>END<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                m<span class="token punctuation">.</span>state <span class="token operator">=</span> m<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token function">step</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> m<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Machine: "</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> applyAsync <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建一个已完成的cf</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Machine</span><span class="token punctuation">&gt;</span></span> cf <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Machine</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment">// 对包装的对象调用指定的方法</span>                <span class="token punctuation">.</span><span class="token function">thenApplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Machine</span><span class="token operator">::</span><span class="token function">work</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">thenApplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Machine</span><span class="token operator">::</span><span class="token function">work</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">thenApplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Machine</span><span class="token operator">::</span><span class="token function">work</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">thenApplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Machine</span><span class="token operator">::</span><span class="token function">work</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 阻塞main线程，等待cf完成</span>        cf<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述实例中用异步调用<code>work</code>方法，让cf来替我们管理回调，cf库会将我们的请求操作链保存为一组回调，第一个后台操作完成后，第二个操作接受对应的Machine并开始工作。</p><p>其他的API</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 调用run方法，不会产生返回值</span><span class="token keyword">void</span> <span class="token function">thenRunAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 对象方法</span><span class="token keyword">static</span> <span class="token class-name">CompletableFuture</span> <span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token punctuation">)</span> <span class="token comment">// 传入一个supplier并异步执行，返回一个新的，执行了Supplier的cf</span><span class="token keyword">void</span> <span class="token function">thenAcceptAsync</span><span class="token punctuation">(</span><span class="token class-name">Consumer</span><span class="token punctuation">)</span> <span class="token comment">// 传入一个Consumer，执行指定的任务</span><span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">)</span> <span class="token comment">// 取消指定cf</span><span class="token keyword">void</span> <span class="token function">obtrudeValue</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token comment">// 将对应cf的结果修改为指定值</span><span class="token class-name">Integer</span> <span class="token function">getNumberOfDependents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 获取当前cf的依赖项数量 依赖项为正在等待该cf完成的cf的预估数量。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CompletableFuture 使用案例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Batter</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Egg</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Milk</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sugar</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Flour</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">prepare</span><span class="token punctuation">(</span><span class="token class-name">T</span> ingredient<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token comment">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ingredient<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">prep</span><span class="token punctuation">(</span><span class="token class-name">T</span> ingredient<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span>                <span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span>ingredient<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">thenApplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Batter</span><span class="token operator">::</span><span class="token function">prepare</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Batter</span><span class="token punctuation">&gt;</span></span> <span class="token function">mix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Egg</span><span class="token punctuation">&gt;</span></span> eggs <span class="token operator">=</span> <span class="token function">prep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Egg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Milk</span><span class="token punctuation">&gt;</span></span> milk <span class="token operator">=</span> <span class="token function">prep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Milk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Sugar</span><span class="token punctuation">&gt;</span></span> sugar <span class="token operator">=</span> <span class="token function">prep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Sugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Flour</span><span class="token punctuation">&gt;</span></span> flour <span class="token operator">=</span> <span class="token function">prep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Flour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 等待所有的材料都完成后再继续执行</span>        <span class="token class-name">CompletableFuture</span>                <span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span>eggs<span class="token punctuation">,</span> milk<span class="token punctuation">,</span> sugar<span class="token punctuation">,</span> flour<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Batter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Baked</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Pan</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token class-name">Pan</span> <span class="token function">pan</span><span class="token punctuation">(</span><span class="token class-name">Batter</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token class-name">Baked</span> <span class="token function">heat</span><span class="token punctuation">(</span><span class="token class-name">Pan</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Baked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Baked</span><span class="token punctuation">&gt;</span></span> <span class="token function">bake</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Batter</span><span class="token punctuation">&gt;</span></span> cfb<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cfb                <span class="token punctuation">.</span><span class="token function">thenApplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Baked</span><span class="token operator">::</span><span class="token function">pan</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">thenApplyAsync</span><span class="token punctuation">(</span><span class="token class-name">Baked</span><span class="token operator">::</span><span class="token function">heat</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">&lt;</span><span class="token class-name">Baked</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">batch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Batter</span><span class="token punctuation">&gt;</span></span> batter <span class="token operator">=</span> <span class="token class-name">Batter</span><span class="token punctuation">.</span><span class="token function">mix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token function">bake</span><span class="token punctuation">(</span>batter<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bake</span><span class="token punctuation">(</span>batter<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bake</span><span class="token punctuation">(</span>batter<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bake</span><span class="token punctuation">(</span>batter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Frosting</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Frosting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Frosting</span><span class="token punctuation">&gt;</span></span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Frosting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FrostedCake</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">FrostedCake</span><span class="token punctuation">(</span><span class="token class-name">Baked</span> baked<span class="token punctuation">,</span> <span class="token class-name">Frosting</span> frosting<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"FrostedCake"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// combineAsync() 当baked和frosting的cf完成后，再执行传入的函数</span>        <span class="token class-name">Baked</span><span class="token punctuation">.</span><span class="token function">batch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>baked <span class="token operator">-&gt;</span> baked                <span class="token punctuation">.</span><span class="token function">thenCombineAsync</span><span class="token punctuation">(</span><span class="token class-name">Frosting</span><span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token punctuation">(</span>cake<span class="token punctuation">,</span> frosting<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">FrostedCake</span><span class="token punctuation">(</span>cake<span class="token punctuation">,</span> frosting<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">thenAcceptAsync</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CompletableFuture大体的设计思想应该是将某一个对象按照流水线的方式进行一系列处理，并且程序在整个过程中异步执行。</p><h3 id="异常-1"><a href="#异常-1" class="headerlink" title="异常"></a>异常</h3><p><code>CompletableFuture</code>在执行过程中产生的异常并不会立即抛出，而是会暂时缓存起来，只有当调用<code>get()</code>获取结果时才会将异常抛出。也可以使用<code>isCompletedExceptionally()</code>来检查是否正常完成，但是对于在最后一次执行时抛出异常的任务，该方法也会算作完成，它只能检查任务是否被异常中断。<br>对异常的处理方法：</p><ol><li>使用<code>exceptionally()</code>，只有在出现异常时，该方法才会被调用，该方法的限制是，Function返回值的类型必须与传入类型相同。将一个正确的对象插回到流，可以使流恢复到正常状态。</li><li><code>handle()</code>和<code>whenComplete()</code>每次都会被调用，因此必须检查fail是否为true，来确定是否有异常发生。但<code>handle()</code>可以生成新的类型，允许程序员执行对应的处理(可以修改它接收到的结果对象)。而<code>whenComplete()</code>只能做一定的逻辑处理，无法修改结果对象。</li></ol><h3 id="构造器的线程安全"><a href="#构造器的线程安全" class="headerlink" title="构造器的线程安全"></a>构造器的线程安全</h3><p>对象的构造在绝大多数的情况下是不存在线程安全问题的，因为在对象构造出来之前，根本不可能被获取，也就不存在对它的竞争。因此，将构造器设为同步没有实际意义，反而会阻塞正在构造的对象，导致在对象的所有构造器完成之前，其他线程无法使用该对象。<br>但要强调的一点是，构造器能够避免的是线程对当前正在构造的对象的竞争。如果构造器本身要去竞争一个共享资源，便会导致线程安全问题。例如，构造器竞争一个生成id的对象，可能会导致有许多对象出现重复id。<br>由于在语言层面并不支持synchronized修饰构造器，但我们可以通过在构造器中添加<code>synchronized</code>修饰的同步代码块来实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// concurrent/SynchronizedConstructor.java</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SyncConstructor</span> <span class="token keyword">implements</span> <span class="token class-name">HasID</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> constructorLock <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">SyncConstructor</span><span class="token punctuation">(</span><span class="token class-name">SharedArg</span> sa<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>constructorLock<span class="token punctuation">)</span><span class="token punctuation">{</span>            id <span class="token operator">=</span> sa<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外，也可以将构造器设为私有，并实现一个静态工厂类来实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// concurrent/SynchronizedFactory.java</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">SyncFactory</span> <span class="token keyword">implements</span> <span class="token class-name">HasID</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">SyncFactory</span><span class="token punctuation">(</span><span class="token class-name">SharedArg</span> sa<span class="token punctuation">)</span><span class="token punctuation">{</span>        id <span class="token operator">=</span> sa<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">SyncFactory</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token class-name">SharedArg</span> sa<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SyncFactory</span><span class="token punctuation">(</span>sa<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Stream和CompletableFuture的比较</p></blockquote><p>并行流方案更适合解决可以无脑并行的问题（容易将数据拆分成无差别、易处理片段的问题）。它更多的面向数据的处理。而CompletableFuture则面向任务，某种程度上来说，是以高效的流水线模式去完成某一特定的任务。</p><h2 id="底层并发"><a href="#底层并发" class="headerlink" title="底层并发"></a>底层并发</h2><p>并发将程序分割成为多个独立运行的<strong>任务</strong>，每个任务都由执行线程所驱动，通常称为线程。<br>线程是操作系统进程内按单一顺序执行的控制流，由此一个进程可以包含多个并发执行的任务。</p><p><code>Thread</code>是一种将任务和处理器关联起来的软件结构，在创建Thread时，JVM会在一块专为Thread保留的内存区域中分配一大块空间，从而为任务的运行提供所需的一切。</p><ul><li>一个程序计数器，指示要执行的下一条JVM字节码指令</li><li>一个支持Java代码执行的栈，包含该线程到达当前执行节点前调用过的方法的相关信息。它同时还包含正在执行的方法的所有本地变量。在每个线程中，该栈的大小通常在64KB和1MB之间。</li><li>一个用于本地代码的栈</li><li>本地线程变量存储</li><li>控制线程的状态维护变量</li></ul><h3 id="最佳线程数"><a href="#最佳线程数" class="headerlink" title="最佳线程数"></a>最佳线程数</h3><p>线程<em>通常</em>的最佳数量就是可用处理器的数量。因为Java在进行上下文切换时有较大的开销<br>上下文切换涉及的操作：</p><ol><li>保存要挂起的线程的当前状态</li><li>读取要执行的线程在进入挂起状态时的实时状态</li></ol><h3 id="工作窃取线程池"><a href="#工作窃取线程池" class="headerlink" title="工作窃取线程池"></a>工作窃取线程池</h3><p><em>WorkStealingPool</em> 一种能基于所有可用处理器自动创建线程池的<code>ExecutorService</code><br>工作窃取：已完成自身输入队列中所有任务的线程可以窃取其他线程队列中的工作项。<br>该算法的目的是在执行计算密集型任务时能够跨处理器分发工作项，最大化所有可用处理器的利用率。</p><h3 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h3><p>在线程中抛出的异常用常规方法是无法捕获的，异常一旦逃逸出线程的run()方法，就会扩散到控制台，驱动线程的代码段中的try-catch不会起作用。正确的做法是为指定的线程设置对应的异常处理器。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ExceptionThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">MyUncaughtExceptionHandler</span> <span class="token keyword">implements</span> <span class="token class-name">Thread<span class="token punctuation">.</span>UncaughtExceptionHandler</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">uncaughtException</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> t<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"caught "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">HandlerThreadFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ThreadFactory</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">Thread</span> <span class="token function">newThread</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">" create a new thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>          t<span class="token punctuation">.</span><span class="token function">setUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> t<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CaptureExceptionInThread</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>          <span class="token class-name">ExecutorService</span> exec <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HandlerThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          exec<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExceptionThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           exec<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要在所有地方都应用同一套异常处理，最简单的方法就是设置线程的默认异常处理器<br><code>Thread.setDefaultUncaughtExceptionHandler(new MyUncaughtExceptionHandler())</code></p><h3 id="共享资源"><a href="#共享资源" class="headerlink" title="共享资源"></a>共享资源</h3><p>当要启动一项任务来执行某些操作时，操作的结果可以通过两种不同的方式捕获：副作用或是返回值。<br>tip：副作用的方式就是操作环境中的某个东西。<br>对于副作用这种方法来说，它存在的问题就是资源竞争，解决这种问题的最简单方式，就是使用能够处理资源竞争的对象来作为共享资源。</p><p>接下来的演示基于一个偶数检查器的实现，我们约定当检查器遇到了非偶数值时，就停止生成器的运作。<br>在多线程的环境下，有多个线程需要使用整数生成器，当检查器发现了非偶数值出现，但在做出修改之前，又恰好有一个线程启动了生成器。就会导致检查器在结束了生成器之后依旧会收到值。多个任务竞争的去响应生成器这个条件，就是所谓的竞态条件</p><p>竞态条件：两个以上的任务竞争响应某个条件，并因此发生冲突/产生不一致的结果。<br>因此，我们选择使用原子布尔型来表示生成器的状态，这样就不会竞争得去修改生成器的状态，同时所有的任务状态也不会依赖于其他的任务。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EvenChecker</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token class-name">IntGenerator</span> generator<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token class-name">EvenChecker</span><span class="token punctuation">(</span><span class="token class-name">IntGenerator</span> generator<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>generator <span class="token operator">=</span> generator<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>generator<span class="token punctuation">.</span><span class="token function">isCanceled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">int</span> val <span class="token operator">=</span> generator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>val <span class="token operator">+</span> <span class="token string">"not even!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  generator<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">IntGenerator</span> gp<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CompletableFuture</span><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> checkers <span class="token operator">=</span>                  <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>                          <span class="token punctuation">.</span><span class="token function">mapToObj</span><span class="token punctuation">(</span>i <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">EvenChecker</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>                          <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token operator">::</span><span class="token function">runAsync</span><span class="token punctuation">)</span>                          <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          checkers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">CompletableFuture</span><span class="token operator">::</span><span class="token function">join</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">IntGenerator</span> gp<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">new</span> <span class="token class-name">TimeAbort</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"No odd numbers discovered"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">test</span><span class="token punctuation">(</span>gp<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通常情况下，我们都会假定test()会失败，不过要确保自动化构建不会卡死，就需要手动编写一个负责超时处理的类，也就是接下来的<em>TimeAbort</em>。这里使用<code>runAsync</code>是因为它可以立即返回调用，因此不会阻塞任何其他的任务</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeAbort</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> restart <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token class-name">TimeAbort</span><span class="token punctuation">(</span><span class="token keyword">double</span> t<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  <span class="token keyword">while</span> <span class="token punctuation">(</span>restart<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      restart <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                      <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token class-name">TimeAbort</span><span class="token punctuation">(</span><span class="token keyword">double</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">"TimeAbort "</span> <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          restart <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来让我们看看<code>IntGenerator</code>的第一种实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EvenProducer</span> <span class="token keyword">extends</span> <span class="token class-name">IntGenerator</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">int</span> currentEvenValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token operator">++</span>currentEvenValue<span class="token punctuation">;</span>          <span class="token operator">++</span>currentEvenValue<span class="token punctuation">;</span>          <span class="token keyword">return</span> currentEvenValue<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">EvenChecker</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EvenProducer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它的共享变量currentEvenValue没有任何的保护，因此在多线程环境下，无法确保输出的值正确。</p><blockquote><p>[!tip]</p></blockquote><p>Java的自增操作并不是原子操作，某个任务也可能在自增操作中途被挂起。</p><p>上面的示例代码中有存在明显的线程冲突问题，而解决的方案之一就是将共享资源的访问操作序列化。Java实现了<code>synchronized</code>关键字这种形式上的内建支持，当一个任务想要执行一段由该关键字保护的代码段时，编译器会生成代码来确认锁是否可用。<br>共享资源一般只是以对象形式存在的一段内存，但他也可以是一个文件、IO端口等等。<em>要控制对贡献资源的访问，首先要将资源放入一个对象中</em></p><blockquote><p>[!note] Brian同步法则<br>如果你在对一个可能接下来会被另一个线程读取的变量进行写操作，或者读取一个可能刚被另一个线程完成写操作的变量，就必须使用同步，并且读操作和一个写操作都必须用同一个监视器同步</p></blockquote><h3 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h3><p>使用volatile的主要三个原因</p><h4 id="字分裂"><a href="#字分裂" class="headerlink" title="字分裂"></a>字分裂</h4><p>字分裂出现在数据类型足够大，对某个变量的写操作过程分为两个步骤的时候。*JVM允许将对64位数的读写操作分为两次对32位数的读写操作(但这不会在64位系统上发生)*。这就增加了在读写过程中发生上下文切换的可能性，其他任务可能会看到某数仅完成了部分变更时的值。<br>使用volatile可以避免字分裂的错误结果被读取到，但该功能同样可以被<code>synchronized</code>或对应的atomic类型实现。</p><h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p>Java并发定律第二条：“一切都不可信，一切都很重要”。必须假定每个任务都有自己的处理器，每个处理器都有自己的本地缓存。但在并发环境下，有时处理器的本地缓存会与主存中的数据不一致，也就是缓存一致性问题。<br>如果将一个变量定义为volatile，那么每次都会从内存中读取。如果对他进行写入操作，也会被立刻写入主存。<br>对于使用同步操作保护的变量则可以不用volatile修饰，因为同步会触发刷新到主存的操作。</p><h4 id="指令重排序和先行发生"><a href="#指令重排序和先行发生" class="headerlink" title="指令重排序和先行发生"></a>指令重排序和先行发生</h4><p>Java可能会通过对指令进行重排序来优化性能，只要结果不会造成程序行为上的改变。但是重排序可能会影响逻辑处理器缓存和主存的交互方式。现在的volatile关键字通过先行发生保证来避免错误的重排序。<br>先行发生：</p><ol><li>在对volatile变量的读写操作之前出现的指令，保证会在该读写操作之前执行，因此volatile操作通常又被称为内存栅栏，确保volatile变量的读写指令无法穿过内存栅栏被重排序。</li><li>先行发生的另一个特性就是，在线程对某一个volatile变量执行写操作时，所有在该写操作之前被线程修改的其他变量——包括非volatile变量也会被刷新到主存当中。</li></ol><h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>原子操作：不会被线程调度器中断的操作，一旦操作开始，直到完成之前，中途都不可能发生上下文切换。<br>我们常常会错误的认为原子操作不需要同步。然而在多核系统中，可见性是比原子性重要的多的问题，一个任务做出的修改，即使是原子操作，也可能对其他操作是不可见的(修改可能被临时保存在本地处理器缓存中)。</p><h3 id="Lock对象"><a href="#Lock对象" class="headerlink" title="Lock对象"></a>Lock对象</h3><p>Java的并发库提供了显式的互斥机制，Lock对象必须显式的创建、加锁以及解锁。在使用lock时，必须在调用lock()之后放置一个try-finally语句，并在finally语句中unlock()。同时return必须包含在try子句中，避免数据被过早暴露给下一个任务。<br>虽然Lock显式调用的特点比使用synchronized需要的代码多，但相对的，我们也获得了对异常处理的权限，可以有机会执行清理操作，让系统维持在正常的状态。<br>一般来说，如果我们希望获取锁后就立刻主动放弃或等待一段时间后放弃，就需要使用lock<br>使用实例</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AttemptLocking</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">untimed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">boolean</span> captured <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tryLock(): "</span> <span class="token operator">+</span> captured<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>captured<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">timed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">boolean</span> captured <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              captured <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"tryLock(2, TimeUnit.SECONDS): "</span> <span class="token operator">+</span> captured<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>captured<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>          <span class="token keyword">final</span> <span class="token class-name">AttemptLocking</span> al <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AttemptLocking</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          al<span class="token punctuation">.</span><span class="token function">untimed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          al<span class="token punctuation">.</span><span class="token function">timed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>              al<span class="token punctuation">.</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"acquired"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          al<span class="token punctuation">.</span><span class="token function">untimed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          al<span class="token punctuation">.</span><span class="token function">timed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h3><p>这是一种实现了Delayed接口的对象组成的无边界<code>BlockingQueue</code>。一个对象只有在延迟时间到期后才能从队列中取出。队列是有序的，所以头部的延迟时间最短，如果没有到达延迟时间，那么头部元素就相当于不存在。</p><p>下面是使用示例。在延迟队列中，所有的任务会按照延迟时间的大小进行排序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">DelayedTask</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">,</span> <span class="token class-name">Delayed</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> id <span class="token operator">=</span> counter<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> delta<span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> trigger<span class="token punctuation">;</span>      <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DelayedTask</span><span class="token punctuation">&gt;</span></span> sequence <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">DelayedTask</span><span class="token punctuation">(</span><span class="token keyword">int</span> deltaInMilliseconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>          delta <span class="token operator">=</span> deltaInMilliseconds<span class="token punctuation">;</span>          trigger <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>NANOSECONDS<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>delta<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>          sequence<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Delayed</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">DelayedTask</span> task <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DelayedTask</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>trigger<span class="token punctuation">,</span> task<span class="token punctuation">.</span>trigger<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"[%d] Task %d"</span><span class="token punctuation">,</span> delta<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getDelay</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> unit<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>trigger <span class="token operator">-</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>NANOSECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">summary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"(%d:%d)"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">EndTask</span> <span class="token keyword">extends</span> <span class="token class-name">DelayedTask</span> <span class="token punctuation">{</span>          <span class="token class-name">EndTask</span><span class="token punctuation">(</span><span class="token keyword">int</span> deltaInMilliseconds<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">super</span><span class="token punctuation">(</span>deltaInMilliseconds<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token annotation punctuation">@Override</span>          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              sequence<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>delayedTask <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>delayedTask<span class="token punctuation">.</span><span class="token function">summary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayQueueDemo</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>          <span class="token class-name">DelayQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DelayedTask</span><span class="token punctuation">&gt;</span></span> tasks <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>                  <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ints</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">)</span>                          <span class="token punctuation">.</span><span class="token function">mapToObj</span><span class="token punctuation">(</span><span class="token class-name">DelayedTask</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                  <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelayedTask<span class="token punctuation">.</span>EndTask</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toCollection</span><span class="token punctuation">(</span><span class="token class-name">DelayQueue</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>tasks<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              tasks<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="无锁集合"><a href="#无锁集合" class="headerlink" title="无锁集合"></a>无锁集合</h3><p>无锁集合具备一项特性：集合可以在读取的同时进行修改，只要读取方只能看见已完成的修改结果。接下来介绍几个相关的策略</p><h4 id="复制策略"><a href="#复制策略" class="headerlink" title="复制策略"></a>复制策略</h4><p>利用复制策略，修改是在部分数据结构的一个单独副本上进行的，该副本在修改过程中不可见，只有在完成修改后，修改后的结构才会安全的与主数据结构交换，然后读取方才能看到修改。<br>在<code>CopyOnWriteArrayList</code>中，写操作会复制整个底层数组。原始数组被留在原地，修改完成后，会通过原子操作将数组交换进去。</p><h4 id="CAS操作"><a href="#CAS操作" class="headerlink" title="CAS操作"></a>CAS操作</h4><p>比较交换(Compare-And-Swap)操作中，从内存中取出一个值之后，在计算新值的同时继续使用原始值(会保存取出的值)。然后通过CAS指令，将保存的原始值和内存中的值进行比较，如果两者相等，就将旧的值替换为新的计算结果。如果比较失败，就代表有其他的线程对内存中的值进行了修改，在这种情况下就必须进行重试。<br>从上面的描述上我们可以清晰地看出，CAS本质上是采用的乐观锁，因此他在内存竞争不激烈的情况下速度非常快，但在竞争激烈时，冲突次数就会急剧上升，效率大幅下降。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2022/08/16/design-mode/"/>
      <url>/2022/08/16/design-mode/</url>
      
        <content type="html"><![CDATA[<p>更加高效的搬砖方法</p><span id="more"></span><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="Adapter模式"><a href="#Adapter模式" class="headerlink" title="Adapter模式"></a>Adapter模式</h2><p>适配器：在实际情况和需求之间，填补两者之间的差异。因此适配器模式就是用于填补现有程序和需要程序之间的差异，提高代码的复用性。通俗来说，就是在不修改现有代码的情况下，在适配器里添加新的业务逻辑，使其满足现有的需求。</p><h3 id="类适配器模式"><a href="#类适配器模式" class="headerlink" title="类适配器模式"></a>类适配器模式</h3><p>在这种模式中，会让Adapter直接继承Adaptee，然后再根据Target需要的方法进行一定的适配。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/design_mode20220723102235.png" alt="类适配器模式的类图"></p><p>例如，假设我们现在已经有了<code>Banner</code>类，它可以输出由<code>()</code>或<code>*</code>包裹的指定字符串。而我们现在希望有的功能是，在输出字符串前后添加提示语句。这时候我们就可以用适配器，在不修改Banner的情况下完成业务条件。</p><p>担任Adaptee的<code>Banner</code>，代表了我们已有的代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Banner</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> str<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Banner</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>str <span class="token operator">=</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showWithParen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"("</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showWithStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*"</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>担任Target的<code>Print</code>接口，规定了我们希望实现的业务功能。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Print</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">printWeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">printStrong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>本场主角，担任<code>Adapter</code>的PrintBanner类，它继承了Banner，获取了已有的方法，并实现接口Print，完成现阶段的任务。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintBanner</span> <span class="token keyword">extends</span> <span class="token class-name">Banner</span> <span class="token keyword">implements</span> <span class="token class-name">Print</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">PrintBanner</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printWeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"invoke printWeak()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">showWithParen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printStrong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"invoke printStrong()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">showWithStar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对象适配器模式"><a href="#对象适配器模式" class="headerlink" title="对象适配器模式"></a>对象适配器模式</h3><p>对象适配器模式在思想上和类适配器模式没有区别，主要差异在于，类适配器模式通过继承的方式来获取原有代码的方法，而对象适配器模式则通过委托，即让适配器持有原有方法。此时适配器可以直接继承Target的抽象类。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/design_mode20220723102737.png" alt="对象适配器类图"></p><p>在本设计模式中，有如下登场角色：</p><ol><li>Target：该角色负责定义需要的方法，也就是要满足的新业务逻辑。</li><li>Client：使用Target提供的方法进行具体处理。</li><li>Adaptee：一个持有既定方法的角色，并且这些方法不能直接被应用于新的业务。</li><li>Adapter：利用Adaptee提供的方法来满足Target的需求。</li></ol><h2 id="Template-Method模式"><a href="#Template-Method模式" class="headerlink" title="Template Method模式"></a>Template Method模式</h2><p>这是一种带有模板功能的设计模式（废话），在父类中定义组成模板的方法，并将他们设为抽象方法，交给子类去实现。同时在父类中实现一个表达抽象方法执行流程的方法。通俗来说就是父类制定好某个程序的运行流程，但将内部的具体实现交给子类实现。(父类是提要求的甲方，子类是满足要求的苦逼乙方)</p><p>利用模板设计模式，我们就可以做到处理逻辑的通用化，在父类中定义了程序的运行逻辑，子类中实现运行细节。这样即使运行逻辑出现问题，也只需要修改父类中的方法，而不需要大规模的改动子类。不过要注意的是，虽然将部分方法的实现放在父类中可以让子类的实现更加轻松，但也降低了子类的灵活性；如果父类中的方法实现过少，子类又会变得臃肿。因此哪些处理交给父类，哪些交给子类，是在开发中要着重考虑的，避免造成设计模式的滥用。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/design_mode20220723105602.png" alt="template method类图"></p><p>在父类中定义模板方法，并实现程序运行模板。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractDisplay</span> <span class="token punctuation">{</span>    <span class="token comment">/** 将模板方法声明为final，防止子类修改 */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/** 将子类要实现的方法声明为protected，防止被无关的类调用 */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是两种子类的实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CharDisplay</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDisplay</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">char</span> ch<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">CharDisplay</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ch <span class="token operator">=</span> ch<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"&lt;&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"&gt;&gt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDisplay</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractDisplay</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> str<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">StringDisplay</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>str <span class="token operator">=</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=======start======="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========end======="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Factory-Method-模式"><a href="#Factory-Method-模式" class="headerlink" title="Factory Method 模式"></a>Factory Method 模式</h2><p>上一章提到，模板模式是在父类中规定处理的流程，在子类中实现具体的处理。如果把流程换成生成实例，就是本章要讲的工厂模式。在工厂模式中，父类决定实例的生成方式，子类生成具体的类。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/designMode20220727095818.png" alt="工厂模式类图"></p><p>在本设计模式中的登场角色：</p><ol><li>Product：一个抽象类，定义了Factory生成的实例应当持有的接口。</li><li>Creator：负责生成Product的抽象类。该工厂并不了解子类中生成实例的具体实现，但知道可以通过调用对应的生成方法获得需要的实例。同时，这里使用createProduct来生成实例，和new相比，耦合性更低。用new创建实例需要该类有具体的实现类，当业务发生变动时，new的对象就必须更改，同时导致依赖该方法的对象也要做出更改。而createProduct属于抽象方法，程序调用时只知道他会返回需要的对象，即使该方法的实现有变动，也不会影响其他代码的运行。 （解耦通俗来说就是让程序间的交互从具体到抽象，调用者只需知道方法会返回正确结果，而无需了解任何内部实现情况）</li></ol><p>框架包</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 工厂生成的产品 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token comment">/** 抽象工厂类 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>        <span class="token comment">/** 实例的生成流程 */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Product</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">String</span> owner<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Product</span> p <span class="token operator">=</span> <span class="token function">createProduct</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">regiserProduct</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">Product</span> <span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token class-name">String</span> owner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">regiserProduct</span><span class="token punctuation">(</span><span class="token class-name">Product</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IDCard</span> <span class="token keyword">extends</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> owner<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">IDCard</span><span class="token punctuation">(</span><span class="token class-name">String</span> owner<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>owner <span class="token operator">=</span> owner<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>owner <span class="token operator">+</span> <span class="token string">"使用id为："</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"的卡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> owner<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CardFactory</span> <span class="token keyword">extends</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> idOwners <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Product</span> <span class="token function">createProduct</span><span class="token punctuation">(</span><span class="token class-name">String</span> owner<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">IDCard</span><span class="token punctuation">(</span>owner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">regiserProduct</span><span class="token punctuation">(</span><span class="token class-name">Product</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">IDCard</span> card <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IDCard</span><span class="token punctuation">)</span> p<span class="token punctuation">;</span>        idOwners<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>card<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> card<span class="token punctuation">.</span><span class="token function">getOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Prototype-模式"><a href="#Prototype-模式" class="headerlink" title="Prototype 模式"></a>Prototype 模式</h2><p>不使用类名来生成实例，而是用现有的实例来生成实例。<br>主要应用场景：</p><ol><li>对象种类繁多，难以整合到一个类。此时用现有实例直接复制，可以避免编写大量的类。</li><li>难以根据类生成实例。例如，用户在画图中画了一个不规则图形，当用户画出后就先保存起来，再次需要一个一样的实例时，直接复制一份。</li><li>解耦框架与生成实例。</li></ol><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/designMode20220727105939.png" alt="Prototype模式类图"></p><p>在本设计模式中，要让Product实现<code>Cloneable</code>接口，这样才能调用clone方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Product.java</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 生成一个当前实例的拷贝</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Product</span> <span class="token function">createClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Manager使用单例模式来实现，并且记录已有的实例，为克隆做准备。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Manager.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span> showcase <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Manager</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Manager</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Product</span> product<span class="token punctuation">)</span> <span class="token punctuation">{</span>        showcase<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> product<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Product</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">String</span> prototypeName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> showcase<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>prototypeName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>驱动类，其中MessageBox和UnderlinePen均为Product实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Main.java</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Manager</span> manager <span class="token operator">=</span> <span class="token class-name">Manager</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UnderlinePen</span> uPen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnderlinePen</span><span class="token punctuation">(</span><span class="token char">'~'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MessageBox</span> wBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageBox</span><span class="token punctuation">(</span><span class="token char">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MessageBox</span> sBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageBox</span><span class="token punctuation">(</span><span class="token char">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        manager<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"strong"</span><span class="token punctuation">,</span> uPen<span class="token punctuation">)</span><span class="token punctuation">;</span>        manager<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"warning"</span><span class="token punctuation">,</span> wBox<span class="token punctuation">)</span><span class="token punctuation">;</span>        manager<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"slash"</span><span class="token punctuation">,</span> sBox<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Product</span> p1 <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"strong"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Product</span> p2 <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"warning"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Product</span> p3 <span class="token operator">=</span> manager<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"slash"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p3<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>借助以上实例，我们再来感受一下Prototype模式的应用场景。</p><ul><li>在上面的实例中，我们总共生成了3种样式，并且最后都通过副本来使用。如果我们希望固化某种样式便于之后直接使用，那势必需要为它新建一个类。当类似的样式越来越多时，类的数量就会越来越庞大，难以管理。但如果我们直接将对应的实例交给Manager，让他保存该实例，当下一次需要这个实例时，就可以直接复制，而不需要新建一个类。</li><li>解耦在此处也比较好理解，Manager一直调用的都是Product相关的方法，而没有直接使用子类的类名，这样可以让框架更好的从类名的束缚挣脱出来(当一个类知道了另一个类的类名，就代表这两者紧密联合了起来)<br>不过类名也不一定是束缚，如果编码的目的是制作高复用的组件，那类与类之间的耦合度必须很低，但当多个类必须紧密连接时，使用类名也没有问题。</li></ul><h2 id="Abstract-Factory-模式"><a href="#Abstract-Factory-模式" class="headerlink" title="Abstract Factory 模式"></a>Abstract Factory 模式</h2><p>工厂的作用是将零件组装成产品，而抽象工厂的作用便是将抽象零件组装成抽象产品。由于抽象零件中只包含该零件持有的接口，因此抽象工厂便是利用这些接口，将零件组装为产品。<br>使用场景：</p><ul><li>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节，这对于所有类型的工厂模式都是重要的。</li><li>系统中有多于一个的产品族，而每次只使用其中某一产品族。</li><li>属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来。</li><li>系统提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。<br>最典型的就是应用主题切换</li></ul><p>抽象工厂的优缺点：<br>优点：易于增加新的工厂，如果出现新的产品族，不需要修改抽象工厂和客户端代码，只需要再实现一个新的具体工厂即可。<br>缺点：难以增加新的零件，若要增加零件，则需要改动所有的具体工厂以及抽象工厂。因此，抽象工厂适用于有相同特质的产品族。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/designMode20220729124058.png" alt="抽象工厂类图"></p><p>example. 用列表的形式展示链接的HTML文档<br>以下是抽象工厂与抽象产品，Item用于统一管理Link与Tray。Tray中可以包含若干个Link与Tray。Page标识HTML文档</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Factory</span> <span class="token function">getFactory</span><span class="token punctuation">(</span><span class="token class-name">String</span> className<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Factory</span> factory <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            factory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Factory</span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"class not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"unknown error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Link</span> <span class="token function">createLink</span><span class="token punctuation">(</span><span class="token class-name">String</span> caption<span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Tray</span> <span class="token function">createTray</span><span class="token punctuation">(</span><span class="token class-name">String</span> caption<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">Page</span> <span class="token function">createPage</span><span class="token punctuation">(</span><span class="token class-name">String</span> caption<span class="token punctuation">,</span> <span class="token class-name">String</span> author<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> caption<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Item</span><span class="token punctuation">(</span><span class="token class-name">String</span> caption<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>caption <span class="token operator">=</span> caption<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">makeHTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Link</span> <span class="token keyword">extends</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Link</span><span class="token punctuation">(</span><span class="token class-name">String</span> caption<span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>caption<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Page</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">String</span> author<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Page</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">String</span> author<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>author <span class="token operator">=</span> author<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Item</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        content<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> filename <span class="token operator">=</span> title <span class="token operator">+</span> <span class="token string">".html"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Writer</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">makeHTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>filename <span class="token operator">+</span> <span class="token string">"完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">makeHTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Tray</span> <span class="token keyword">extends</span> <span class="token class-name">Item</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Item</span><span class="token punctuation">&gt;</span></span> tray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Tray</span><span class="token punctuation">(</span><span class="token class-name">String</span> caption<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>caption<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Item</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tray<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下是实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListFactory</span> <span class="token keyword">extends</span> <span class="token class-name">Factory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Link</span> <span class="token function">createLink</span><span class="token punctuation">(</span><span class="token class-name">String</span> caption<span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListLink</span><span class="token punctuation">(</span>caption<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Tray</span> <span class="token function">createTray</span><span class="token punctuation">(</span><span class="token class-name">String</span> caption<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListTray</span><span class="token punctuation">(</span>caption<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Page</span> <span class="token function">createPage</span><span class="token punctuation">(</span><span class="token class-name">String</span> caption<span class="token punctuation">,</span> <span class="token class-name">String</span> author<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ListPage</span><span class="token punctuation">(</span>caption<span class="token punctuation">,</span> author<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListLink</span> <span class="token keyword">extends</span> <span class="token class-name">Link</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListLink</span><span class="token punctuation">(</span><span class="token class-name">String</span> caption<span class="token punctuation">,</span> <span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>caption<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">makeHTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"&lt;li&gt;&lt;a href=\""</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">"\"&gt;"</span> <span class="token operator">+</span> caption <span class="token operator">+</span> <span class="token string">"&lt;/a&gt;&lt;/li&gt;\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListPage</span> <span class="token keyword">extends</span> <span class="token class-name">Page</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListPage</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">String</span> author<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> author<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">makeHTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuffer</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;html&gt;&lt;head&gt;&lt;title&gt;"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">"&lt;/title&gt;&lt;/head&gt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;body&gt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;h1&gt;"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">"&lt;/h1&gt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;ul&gt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Item</span> item <span class="token operator">:</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">makeHTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/ul&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;hr&gt;&lt;address&gt;"</span> <span class="token operator">+</span> author <span class="token operator">+</span> <span class="token string">"&lt;/address&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/body&gt;&lt;/html&gt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListTray</span> <span class="token keyword">extends</span> <span class="token class-name">Tray</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">ListTray</span><span class="token punctuation">(</span><span class="token class-name">String</span> caption<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>caption<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">makeHTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuffer</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;li&gt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>caption <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;ul&gt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Item</span> item <span class="token operator">:</span> tray<span class="token punctuation">)</span> <span class="token punctuation">{</span>            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">makeHTML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/ul&gt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;/li&gt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类的层次结构"><a href="#类的层次结构" class="headerlink" title="类的层次结构"></a>类的层次结构</h2><p>在继续学习Bridge模式之前，首先要了解一下类的层次结构。</p><h3 id="类的功能层次结构"><a href="#类的功能层次结构" class="headerlink" title="类的功能层次结构"></a>类的功能层次结构</h3><p>当我们希望为某一个类增添新的功能时，我们通常会选择写一个子类继承原先的类。这种添加功能的方式就形成了一个功能层次结构。父类具有基本功能，在子类中添加新的功能<br>Something<br>                  |_____  Something good<br>如果我们要进一步扩展 something good，就会再为他写一个子类，层次结构就又加深了，通常功能层次结构不宜过深。</p><h3 id="类的实现层次结构"><a href="#类的实现层次结构" class="headerlink" title="类的实现层次结构"></a>类的实现层次结构</h3><p>功能层次结构是为了标识类功能的扩展，那么实现层次结构表现的就是类的不同实现，也就是父类声明抽象方法来定义接口，子类实现这些接口。他的作用是帮助我们拆分接口定义与接口实现这两个部分。</p><p>通过上面两种结构，我们不难发现，子类存在的目的无外乎两种：对父类功能的扩展，对父类方法的实现。当类的层次结构只有一层时，两个层次结构都混杂在一起，很容易导致层次结构变复杂。因此我们需要将这两个层次结构分离开来，并使用Bridge模式连接二者。</p><h2 id="Bridge-模式"><a href="#Bridge-模式" class="headerlink" title="Bridge 模式"></a>Bridge 模式</h2><p>Bridge模式的作用是将类的功能层次结构与类的实现层次结构连接起来。通过将功能层次与实现层次分离，确保各层次的类能作为组件使用，Bridge模式则可以帮助拼接这些组件，提高灵活性。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/design_mode/20220802111138.png" alt="Bridge 模式类图"></p><p>example. 显示指定内容。<br><code>Display</code>是功能层次的最高层，它将任务委托给实现类似<code>DisplayImpl</code>来达成display的功能。<br>让<code>DisplayImpl</code>继承也可以实现这样的效果，但继承就意味着强联系，一旦出现更改，就会导致两个类都受到影响，但委托则可以让委托者不必关注实现类的具体操作，只负责进行调用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 功能层次的最高层</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Display</span> <span class="token punctuation">{</span>        <span class="token comment">// 将显示的任务委托给实现类</span>    <span class="token keyword">private</span> <span class="token class-name">DisplayImpl</span> impl<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Display</span><span class="token punctuation">(</span><span class="token class-name">DisplayImpl</span> impl<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>impl <span class="token operator">=</span> impl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        impl<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        impl<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        impl<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>CountDisplay</code>是对功能的扩展，增加<code>multiDisplay</code>功能。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 功能扩展类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDisplay</span> <span class="token keyword">extends</span> <span class="token class-name">Display</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">CountDisplay</span><span class="token punctuation">(</span><span class="token class-name">DisplayImpl</span> impl<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>impl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">multiDisplay</span><span class="token punctuation">(</span><span class="token keyword">int</span> times<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>DisplayImpl</code>定义了实现层次的接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DisplayImpl</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>StringDisplayImpl</code>是实现类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDisplayImpl</span> <span class="token keyword">implements</span> <span class="token class-name">DisplayImpl</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> str<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> width<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">StringDisplayImpl</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>str <span class="token operator">=</span> str<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"|"</span> <span class="token operator">+</span> str <span class="token operator">+</span> <span class="token string">"|"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">printLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> width<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过以上实例我们不难看出，显示这个任务被切分成了展示方式(功能)，展示内容(实现)两个部分，如果我们希望多次展示字符串内容，我们只需要将StringDisplayImpl委托给CountDisplay即可，而不需要再生成一个具体的类。让代码更加组件化，方便复用。即使实现或功能层次进行了修改也不会影响另一方的调用。</p><h2 id="Strategy-模式"><a href="#Strategy-模式" class="headerlink" title="Strategy 模式"></a>Strategy 模式</h2><p>该设计模式可以帮助我们整体的替换算法的实现部分。具体是将算法与其他部分分离开来，只定义与算法有关的接口，并在程序中使用委托的方式使用算法。一个很典型的应用场景就是在游戏中更该AI的难度。<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/design_mode/20220803091301.png" alt="Strategy 模式类图"></p><p>登场角色：</p><ol><li>Strategy：负责决定实现策略所必需的接口。</li><li>ConcreteStrategy：负责实现具体的策略。</li><li>Context：保存ConcreteStrategy角色实例，并使用它来实现需求。</li></ol><p>example. 排序算法</p><p>定义的策略接口，要实现的业务仅仅是排序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Sorter</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparable</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>两种策略的具体实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InsertionSort</span> <span class="token keyword">implements</span> <span class="token class-name">Sorter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparable</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Comparable</span> com <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>com<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> com<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelectionSort</span> <span class="token keyword">implements</span> <span class="token class-name">Sorter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparable</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> min <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    min <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token class-name">Comparable</span> o <span class="token operator">=</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>            data<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用于调用策略实现业务的上下文。将策略接口委托给该类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SortAndPrint</span> <span class="token punctuation">{</span>    <span class="token class-name">Comparable</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span>    <span class="token class-name">Sorter</span> sorter<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SortAndPrint</span><span class="token punctuation">(</span><span class="token class-name">Comparable</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token class-name">Sorter</span> sorter<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sorter <span class="token operator">=</span> sorter<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sorter<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"====================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>驱动</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token class-name">SortAndPrint</span> sortAndPrint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SortAndPrint</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InsertionSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SortAndPrint</span> sortAndPrint1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SortAndPrint</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SelectionSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sortAndPrint<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sortAndPrint1<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Composite-模式"><a href="#Composite-模式" class="headerlink" title="Composite 模式"></a>Composite 模式</h2><p>使容器内容具有一致性，创造出递归结构的模式；最典型的就是 Java gui。<br>递归的本质是将问题拆分成一个个小问题，并将小问题的解合并在一起获得最终答案。多个小问题拼凑起来的解，又能作为一个解参与大问题的解决。这种将多个对象合并在一起当作一个对象处理的情况，我们称为多个和单个的一致性，有这种特质的问题，就适合用Composite模式解决。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/design_mode/20220804181441.png" alt=" Composite 模式类图"></p><p>登场角色：<br>Leaf：表示内容的角色，该角色中不能再放入其他角色。<br>Composite：表示容器的角色，可以在其中放入Leaf和Composite。<br>Component：使上述两个角色具有一致性的角色。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 用于体现一致性的类 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Entry</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Entry</span> entry<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnsupportedOperationException</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"Entry cannot be added"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printList</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ("</span> <span class="token operator">+</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token keyword">extends</span> <span class="token class-name">Entry</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Directory</span> <span class="token keyword">extends</span> <span class="token class-name">Entry</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&gt;</span></span> children<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span> entry <span class="token operator">:</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>            size <span class="token operator">+=</span> entry<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">printList</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span> entry <span class="token operator">:</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>            entry<span class="token punctuation">.</span><span class="token function">printList</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Entry</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Entry</span> entry<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnsupportedOperationException</span> <span class="token punctuation">{</span>        children<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Decorator-模式"><a href="#Decorator-模式" class="headerlink" title="Decorator 模式"></a>Decorator 模式</h2><p>不断为对象添加装饰的设计模式。<br>首先要明确的是，如果一个对象想要被复数个装饰物装饰，那么被装饰物与装饰物必须具备一致性。举例来说，黄金在被制作成首饰后，它就失去了一般等价物的特质，这显然不是一种装饰，因为黄金与首饰不具备一致性。<br>接口的透明性：在编程语言中，要想体现两个类的一致性，最常用的方法就是继承。这样，即使被装饰物被包装起来了，它的API接口也不会被隐藏，这称为接口的透明性。<br>同时，我们使用委托的方式，让装饰物提出的要求转交给被装饰物去处理，这样方便我们在不修改被装饰物的前提下为它添加功能。并且当我们需要进行功能扩展时，也不会导致子类的爆炸式增长，导致类的功能层次过深。<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/design_mode/20220805104527.png" alt="Decorator 模式类图"></p><p>登场角色：<br>Component：增加功能的核心角色。<br>ConcreteComponent：Component实现类，尚未被装饰的对象。<br>Decorator：该角色与Component有接口一致性，并在内部保存被装饰的对象。<br>ConcreteDecorator：Decorator的实现类。</p><p>Component</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Display</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">getColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">getRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getRowText</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">getRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getRowText</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Decorate，字段和构造器全部声明为protected类型，避免子类之外的类调用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Border</span> <span class="token keyword">extends</span> <span class="token class-name">Display</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">Display</span> display<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token class-name">Border</span><span class="token punctuation">(</span><span class="token class-name">Display</span> display<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>display <span class="token operator">=</span> display<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDisplay</span> <span class="token keyword">extends</span> <span class="token class-name">Display</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> str<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">StringDisplay</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>str <span class="token operator">=</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getRowText</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> str<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SideBorder</span> <span class="token keyword">extends</span> <span class="token class-name">Border</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">char</span> borderChar<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SideBorder</span><span class="token punctuation">(</span><span class="token class-name">Display</span> display<span class="token punctuation">,</span> <span class="token keyword">char</span> borderChar<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>borderChar <span class="token operator">=</span> borderChar<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> display<span class="token punctuation">.</span><span class="token function">getColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> display<span class="token punctuation">.</span><span class="token function">getRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getRowText</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> borderChar <span class="token operator">+</span> display<span class="token punctuation">.</span><span class="token function">getRowText</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token operator">+</span> borderChar<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FullBorder</span> <span class="token keyword">extends</span> <span class="token class-name">Border</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">FullBorder</span><span class="token punctuation">(</span><span class="token class-name">Display</span> display<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>display<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> display<span class="token punctuation">.</span><span class="token function">getColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> display<span class="token punctuation">.</span><span class="token function">getRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getRowText</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"+"</span> <span class="token operator">+</span> <span class="token function">makeLine</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">,</span> display<span class="token punctuation">.</span><span class="token function">getColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"+"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">==</span> display<span class="token punctuation">.</span><span class="token function">getRows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"+"</span> <span class="token operator">+</span> <span class="token function">makeLine</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">,</span> display<span class="token punctuation">.</span><span class="token function">getColumns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"+"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"|"</span> <span class="token operator">+</span> display<span class="token punctuation">.</span><span class="token function">getRowText</span><span class="token punctuation">(</span>row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"|"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">makeLine</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">StringBuffer</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Visitor-模式"><a href="#Visitor-模式" class="headerlink" title="Visitor 模式"></a>Visitor 模式</h2><p>在程序中，我们将元素存放在数据结构中。通常我们也会把对应的处理也存放在里面，但如果处理有多种，每增加一种新的处理，就要修改数据结构的代码。<br>如果我们将数据结构和处理分离开来，编写一个访问者类来访问数据结构中的元素，并且进行处理，那每当要增加处理时，就只需要增添新的访问者。<br>图的处理就用到了这种思想，Graph类专门存储图的数据，GraphPath类执行图论算法。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/design_mode/20220806094656.png" alt="Visitor 模式类图"></p><p>登场角色：<br>Visitor：负责对数据结构中每一个具体的元素声明一个用于访问的方法。该方法中也包含着元素对应的处理。<br>ConcreteVIsitor：实现如何处理每一个ConcreteElement角色。<br>Element：表示Visitor的访问对象，声明了接受访问者的accept方法。<br>ConcreteElement：实现Element定义的接口。<br>ObjectStructure：负责处理Element角色的集合。</p><p>有了以上基础，不难看出，每当我们需要添加一种新的处理方法时，只需要添加一个访问者即可。但如果我们想修改数据结构中的元素，则必须连带着修改所有的访问者。同时，visitor可以处理元素的前提条件是该元素向他暴露了足够多的信息。而这又带来了新的问题，如果暴露了不该暴露的信息，后续的修改将十分艰难。</p><p>访问者接口，其中声明了所有元素的访问方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">Directory</span> directory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>元素接口，声明了接受访问者的方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Visitor</span> visitor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里使用了Composite模式，这是体现一致性的类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span> <span class="token keyword">implements</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Entry</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Entry</span> entry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"entry cannot be added"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"entry cannot be iterator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" ("</span> <span class="token operator">+</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于每一个元素的子类，其accept方法都是允许让visitor将自身作为参数调用访问方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token keyword">extends</span> <span class="token class-name">Entry</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Visitor</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Directory</span> <span class="token keyword">extends</span> <span class="token class-name">Entry</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&gt;</span></span> children<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Directory</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Entry</span> entry <span class="token operator">:</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>            size <span class="token operator">+=</span> entry<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> size<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Entry</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Entry</span> entry<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnsupportedOperationException</span> <span class="token punctuation">{</span>        children<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&gt;</span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> children<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span><span class="token class-name">Visitor</span> visitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        visitor<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是访问者的实现类，其中实现了每一种元素的访问方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListVisitor</span> <span class="token keyword">implements</span> <span class="token class-name">Visitor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> currentdir <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>currentdir <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">Directory</span> directory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>currentdir <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> directory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> savedir <span class="token operator">=</span> currentdir<span class="token punctuation">;</span>        currentdir <span class="token operator">=</span> currentdir <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> directory<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> directory<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Entry</span> entry <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            entry<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        currentdir <span class="token operator">=</span> savedir<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和一般的递归思路不同，visitor模式中用到了双重分发，visit和accept相互之间递归调用。类似于V向A申请续杯，A同意续杯，V喝完后继续申请续杯。这里递归的终止条件是访问者到达了原子类(不可再拆分的文件类)。</p><h2 id="Chain-of-repository-模式"><a href="#Chain-of-repository-模式" class="headerlink" title="Chain of repository 模式"></a>Chain of repository 模式</h2><p>当程序进行某个请求的处理，但又无法确定由哪个对象来进行处理时，就可以使用责任链模式。将请求在预定好的责任链中传播，链中的每一个对象接受到请求之后，如果无法处理，就传递给下一个对象，否则就地处理请求。<br>这种模式的一大特征就是弱化了请求者和处理者之间的关系。请求者只需将请求提交给首个处理者，该请求就会在职责链中传播，直至被处理或抛弃。整个过程中，请求者不需要了解职责链中对象的具体职责，提高了自身作为组件的独立性。（了解的越多，就会导致自身牵扯越多对象，无法独立出来）<br>除此之外，职责链也可以进行动态的调整，处理方式的灵活性提高。每一个处理者也只需要关注自己的工作。<br>不过比起有对象统一调度请求处理的情况，采用该设计模式会损失一定的效率。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/design_mode/20220807092629.png" alt="Chain of repository 模式类图"></p><p>登场角色：</p><ol><li>Handler：定义了处理请求的接口，并且知道下一个处理者是谁，如果自己无法处理请求，就交给下一个去做。</li><li>ConcreteHandler：处理请求的具体角色。</li></ol><p>处理器抽象类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Support</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Support</span> next<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Support</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 设置下一个处理者，并返回下一个处理者对象，方便链式调用</span>    <span class="token keyword">public</span> <span class="token class-name">Support</span> <span class="token function">setNext</span><span class="token punctuation">(</span><span class="token class-name">Support</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Support [name= "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 解决问题的步骤</span>    <span class="token comment">// 1. 先尝试自己解决</span>    <span class="token comment">// 2. 解决不了就交给下一个处理者</span>    <span class="token comment">// 3. 如果没有后继者了就放弃</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">support</span><span class="token punctuation">(</span><span class="token class-name">Trouble</span> problem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">resolve</span><span class="token punctuation">(</span>problem<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">done</span><span class="token punctuation">(</span>problem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            next<span class="token punctuation">.</span><span class="token function">support</span><span class="token punctuation">(</span>problem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">fail</span><span class="token punctuation">(</span>problem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 解决问题的方法，使用proetcted防止外部类调用</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">Trouble</span> problem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">done</span><span class="token punctuation">(</span><span class="token class-name">Trouble</span> problem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>problem <span class="token operator">+</span> <span class="token string">" is resolved by"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">fail</span><span class="token punctuation">(</span><span class="token class-name">Trouble</span> problem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>problem <span class="token operator">+</span> <span class="token string">" cannot resolved"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpecialSupport</span> <span class="token keyword">extends</span> <span class="token class-name">Support</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SpecialSupport</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">Trouble</span> problem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> problem<span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LimitSupport</span> <span class="token keyword">extends</span> <span class="token class-name">Support</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> limit<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LimitSupport</span><span class="token punctuation">(</span><span class="token keyword">int</span> limit<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> limit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token class-name">Trouble</span> problem<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> problem<span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> limit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Facade-模式"><a href="#Facade-模式" class="headerlink" title="Facade 模式"></a>Facade 模式</h2><p>随着时间的推移，程序必然会变得越来越复杂，类与类之间的关系也会变得极其复杂。这是我们就可以创建一个窗口来处理程序中类与类之间的调用，用户只需向窗口发出请求，窗口就会自行去处理类的调用。<br>从以上描述中不难看出，Facade模式的目的就是减少程序的接口，使得调用关系能够更加清晰，除此之外，API的减少也意味着程序与外部的关联度下降，能够更方便的作为组件使用。Facade模式同样可以递归地使用，一个窗口去调用其他的窗口，从而进一步减少API。<br>不过在设计类和包时，我们也要考虑类的可见性，如果公开的方法过多，就会导致后续的修改变得困难。<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/docker/20220808094221.png" alt="Facade 模式类图"></p><p>登场角色：<br>Facade：构成系统的许多其他角色的窗口，向系统外部提供高层接口。<br>构成系统的许多其他角色：这些角色各自完成自己的工作，并不知道Facade的存在。Facade通过调用其他角色来完成指定的任务。</p><p>作为系统内部的类，将公开度设置为默认，防止外部系统直接调用。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Database</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Properties</span> <span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"1@qq.com"</span><span class="token punctuation">,</span> <span class="token string">"cxc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> properties<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">HTMLWriter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Writer</span> writer<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">HTMLWriter</span><span class="token punctuation">(</span><span class="token class-name">Writer</span> writer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>writer <span class="token operator">=</span> writer<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">title</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;html&gt;&lt;head&gt;&lt;title&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>title <span class="token operator">+</span> <span class="token string">"&lt;/title&gt;&lt;/head&gt;&lt;body&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;h1&gt;"</span> <span class="token operator">+</span> title <span class="token operator">+</span> <span class="token string">"&lt;/h1&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paragraph</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;p&gt;"</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">"&lt;/p&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">link</span><span class="token punctuation">(</span><span class="token class-name">String</span> href<span class="token punctuation">,</span> <span class="token class-name">String</span> caption<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token function">paragraph</span><span class="token punctuation">(</span><span class="token string">"&lt;a href=\""</span> <span class="token operator">+</span> href <span class="token operator">+</span> <span class="token string">"\"&gt;"</span> <span class="token operator">+</span> caption <span class="token operator">+</span> <span class="token string">"&lt;/a&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">mailto</span><span class="token punctuation">(</span><span class="token class-name">String</span> mailaddr<span class="token punctuation">,</span> <span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token function">link</span><span class="token punctuation">(</span><span class="token string">"mailto:"</span> <span class="token operator">+</span> mailaddr<span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;/body&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;/html&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本例中的窗口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageMaker</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">PageMaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">makeWelcomePage</span><span class="token punctuation">(</span><span class="token class-name">String</span> mailaddr<span class="token punctuation">,</span> <span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token class-name">Database</span><span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> username <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>mailaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HTMLWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTMLWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"Welcome to "</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"'s page"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">paragraph</span><span class="token punctuation">(</span>username <span class="token operator">+</span> <span class="token string">"欢迎来到"</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"的主页"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">mailto</span><span class="token punctuation">(</span>mailaddr<span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>        writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Observer-模式"><a href="#Observer-模式" class="headerlink" title="Observer 模式"></a>Observer 模式</h2><p>当被观察者的状态发生改变时，将通知给观察者。被观察者维护一个存储观察者的列表，当有观察者加入该列表时，就表示这个观察者订阅了被观察者，此后被观察者的状态更新都会发送给它，因此该模式又称为发布订阅。在Subject角色中可以注册多个Observer角色，先注册的会被先调用，因此需要注意这些观察者的调用顺序。<br>在该设计模式中也同样出现了可替换性，无论是观察者还是被观察者都无需了解对方的具体实现，只需要清楚对方实现了指定的接口并且可以通过接口获得想要的数据。这就方便我们在之后的扩展中替换实现类。<br>传递更新的方式也有许多种：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Generator</span> gen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Generator</span> gen<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>只传递Subject角色，Observer从Subject中获取数据。</li><li>一并传送Observer需要的数据，这样虽能免去Observer提取数据的麻烦，但会导致Subject了解到Observer要处理的内容，这会导致Subject必须对Observer负责，降低程序灵活性。</li><li>只传递要处理的数据，但这样会写死数据类型，不方便观察多个Subject角色。</li></ol><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/design_mode/20220809092624.png" alt="Observer 模式类图"></p><p>登场角色：</p><ol><li>Subject：观察对象，定义了注册和删除观察者的方法。并且声明了获取当前状态的方法。</li><li>ConcreteSubject：具体的观察对象，当自身状态发生改变后会通知已经注册的Observer角色。</li><li>Observer：负责接收来自Subject角色的状态变化通知。</li><li>ConcreteObserver：具体的观察者，当他的update方法被调用后会去获取Subject的最新状态。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">NumberGenerator</span> generator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">NumberGenerator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">&gt;</span></span> observers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Observer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        observers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteObserver</span><span class="token punctuation">(</span><span class="token class-name">Observer</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        observers<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Observer</span> observer <span class="token operator">:</span> observers<span class="token punctuation">)</span> <span class="token punctuation">{</span>            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomNumberGenerator</span> <span class="token keyword">extends</span> <span class="token class-name">NumberGenerator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        num <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">notifyObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DigitObserver</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">NumberGenerator</span> generator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>generator<span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GraphObserver</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">NumberGenerator</span> generator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> generator<span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mediator-模式"><a href="#Mediator-模式" class="headerlink" title="Mediator 模式"></a>Mediator 模式</h2><p>当程序中交互的组件过多时，扁平化的管理结构就不用了，在同一级的成员显然不会认为其他成员有权利命令自己。这时候需要一个中立的仲裁者来统一调度程序的运行。组员向仲裁者报告，仲裁者向组员下达指令。<br>OOP思想可以帮助我们分散处理各个类的执行逻辑，但如果一段逻辑过于分散，无论是使用还是修改都会带来巨大的困难，这时候就需要Mediator模式来将他们集中起来。<br>除此之外，过多的类也会导致通信线路的增加，导致程序结构变得异常复杂。n个类之间相互通信产生的通信线路数量为$C_n^2$，这样的程序结构看上去就很难理清调用结构，复用性也很低。而使用Mediator模式，每个组件都只需要与Mediator通信，大大简化了程序结构。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/design_mode/20220811093943.png" alt="Mediator 模式类图"></p><p>登场角色：</p><ol><li>Mediator：负责定义与Colleague角色进行通信和做出决定的接口</li><li>ConcreteMediator：负责实现上述接口</li><li>Colleague：负责定义与Mediator角色进行通信的接口</li><li>ConcreteColleague：负责实现上述接口</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Colleague</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">setMediator</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setColleagueEnabled</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> enabled<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Mediator</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">createColleagues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">colleagueChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ColleagueButton</span> <span class="token keyword">extends</span> <span class="token class-name">Button</span> <span class="token keyword">implements</span> <span class="token class-name">Colleague</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Mediator</span> mediator<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ColleagueButton</span><span class="token punctuation">(</span><span class="token class-name">String</span> caption<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>caption<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMediator</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mediator <span class="token operator">=</span> mediator<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token comment">// Mediator 下达启用/禁用的指示</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColleagueEnabled</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> enabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setEnabled</span><span class="token punctuation">(</span>enabled<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ColleagueCheckbox</span> <span class="token keyword">extends</span> <span class="token class-name">Checkbox</span> <span class="token keyword">implements</span> <span class="token class-name">ItemListener</span><span class="token punctuation">,</span> <span class="token class-name">Colleague</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Mediator</span> mediator<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ColleagueCheckbox</span><span class="token punctuation">(</span><span class="token class-name">String</span> caption<span class="token punctuation">,</span> <span class="token class-name">CheckboxGroup</span> group<span class="token punctuation">,</span> <span class="token keyword">boolean</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>caption<span class="token punctuation">,</span> group<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMediator</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>mediator <span class="token operator">=</span> mediator<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColleagueEnabled</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> enabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setEnabled</span><span class="token punctuation">(</span>enabled<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">itemStateChanged</span><span class="token punctuation">(</span><span class="token class-name">ItemEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mediator<span class="token punctuation">.</span><span class="token function">colleagueChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ColleagueTextField</span> <span class="token keyword">extends</span> <span class="token class-name">TextField</span> <span class="token keyword">implements</span> <span class="token class-name">Colleague</span><span class="token punctuation">,</span> <span class="token class-name">TextListener</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Mediator</span> mediator<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ColleagueTextField</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> columns<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> columns<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMediator</span><span class="token punctuation">(</span><span class="token class-name">Mediator</span> mediator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mediator <span class="token operator">=</span> mediator<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColleagueEnabled</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> enabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setEnabled</span><span class="token punctuation">(</span>enabled<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBackground</span><span class="token punctuation">(</span>enabled <span class="token operator">?</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>white <span class="token operator">:</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>lightGray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 文字发生变化时通知仲裁者</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">textValueChanged</span><span class="token punctuation">(</span><span class="token class-name">TextEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mediator<span class="token punctuation">.</span><span class="token function">colleagueChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginFrame</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span><span class="token punctuation">,</span> <span class="token class-name">Mediator</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ColleagueCheckbox</span> checkGuest<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ColleagueCheckbox</span> checkLogin<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ColleagueTextField</span> textUser<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ColleagueTextField</span> textPassword<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ColleagueButton</span> buttonOK<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">ColleagueButton</span> buttonCancel<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LoginFrame</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>lightGray<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GridLayout</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>checkGuest<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>checkLogin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"Username: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>textUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Label</span><span class="token punctuation">(</span><span class="token string">"Password: "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>textPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>buttonOK<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">add</span><span class="token punctuation">(</span>buttonCancel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">colleagueChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 初始化组件</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createColleagues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">CheckboxGroup</span> g <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheckboxGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        checkGuest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColleagueCheckbox</span><span class="token punctuation">(</span><span class="token string">"Guest"</span><span class="token punctuation">,</span> g<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        checkLogin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColleagueCheckbox</span><span class="token punctuation">(</span><span class="token string">"Login"</span><span class="token punctuation">,</span> g<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        textUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColleagueTextField</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        textPassword <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColleagueTextField</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        textPassword<span class="token punctuation">.</span><span class="token function">setEchoChar</span><span class="token punctuation">(</span><span class="token char">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttonOK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColleagueButton</span><span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttonCancel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColleagueButton</span><span class="token punctuation">(</span><span class="token string">"Cancel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        checkGuest<span class="token punctuation">.</span><span class="token function">setMediator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        checkLogin<span class="token punctuation">.</span><span class="token function">setMediator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        textUser<span class="token punctuation">.</span><span class="token function">setMediator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        textPassword<span class="token punctuation">.</span><span class="token function">setMediator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttonOK<span class="token punctuation">.</span><span class="token function">setMediator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttonCancel<span class="token punctuation">.</span><span class="token function">setMediator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        checkGuest<span class="token punctuation">.</span><span class="token function">addItemListener</span><span class="token punctuation">(</span>checkGuest<span class="token punctuation">)</span><span class="token punctuation">;</span>        checkLogin<span class="token punctuation">.</span><span class="token function">addItemListener</span><span class="token punctuation">(</span>checkLogin<span class="token punctuation">)</span><span class="token punctuation">;</span>        textUser<span class="token punctuation">.</span><span class="token function">addTextListener</span><span class="token punctuation">(</span>textUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        textPassword<span class="token punctuation">.</span><span class="token function">addTextListener</span><span class="token punctuation">(</span>textPassword<span class="token punctuation">)</span><span class="token punctuation">;</span>        buttonOK<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttonCancel<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 接受到状态变化的通知后判断各组件的启用/禁用状态</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">colleagueChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>checkGuest<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            textUser<span class="token punctuation">.</span><span class="token function">setColleagueEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            textPassword<span class="token punctuation">.</span><span class="token function">setColleagueEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buttonOK<span class="token punctuation">.</span><span class="token function">setEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            textUser<span class="token punctuation">.</span><span class="token function">setColleagueEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">userpassChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">userpassChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>textUser<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            textPassword<span class="token punctuation">.</span><span class="token function">setColleagueEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>textPassword<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                buttonOK<span class="token punctuation">.</span><span class="token function">setColleagueEnabled</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                buttonOK<span class="token punctuation">.</span><span class="token function">setColleagueEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            textPassword<span class="token punctuation">.</span><span class="token function">setColleagueEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buttonOK<span class="token punctuation">.</span><span class="token function">setColleagueEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上述示例可以看出，所有的组件状态变化逻辑全部由仲裁者执行，也就是说，组件可以完全脱离出业务，可以被轻易的复用。但与之相对的，仲裁者的执行逻辑与业务紧密耦合，相应的代码无法被复用，针对不同的业务需要实现不同的仲裁者。</p><h2 id="Memento-模式"><a href="#Memento-模式" class="headerlink" title="Memento 模式"></a>Memento 模式</h2><p>试想我们希望程序具备以下功能：撤销，重做，历史记录，快照。这时，我们就需要一个类似存档点的类来储存某个阶段对象的信息。不过如果想要恢复实例，就需要可以自由访问实例内部结构的权限；如果有关的代码分散在程序的各个地方，就会导致程序变得难以维护。这时，就需要Memento模式来维护类的封装性。<br>我们可以借助游戏存档的过程来理解该设计模式。将玩家当作驱动类，存档当作程序中存储快照的类，游戏进程代表当前的程序。接下来思考这三个角色各自的职责，玩家可以游玩游戏，决定什么时候存档，什么时候恢复存档。游戏进程可以生成存档，让游戏状态恢复到存档记录的状态。里面比较重要的一点是，只有游戏进程能自由操作存档内部的所有信息，玩家只能根据存档透露的有限的状态来判断是否要存档或是选取哪一个存档。如果玩家能够随意修改存档信息，那就代表程序的封装性被破环了。<br>想要保证封装性不被破坏，最重要的一点就是，确保无法在game包外部改变存档内部的状态，但同时有需要透露给玩家足够的信息，方便判断存档的选择。从此引申出两个新的概念：</p><ol><li>宽接口：所有用于获取恢复对象状态信息的方法集合。由于他们会暴露Memento内部的所有信息，因此只有生成他们的角色可以使用。</li><li>窄接口：为用户提供一部分存档的信息，他们的可见性是public。<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/design_mode/20220812161219.png" alt="Memento 模式类图"></li></ol><p>登场角色：</p><ol><li>Originator：在保存自己的最新状态时生成Memento角色，将以前的Memento传给该角色时，会将自己恢复至生成该Memento的状态。</li><li>Memento：将Originator的内部信息保存在一起，并且不会向外界公开这些信息。</li><li>Caretaker：决定Originator的保存与恢复，会一直保存Memento实例，但只能通过窄接口访问有限的内部信息。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Memento</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> money<span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fruits<span class="token punctuation">;</span>    <span class="token comment">// 窄接口</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> money<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 可见性设为默认，不允许包外的类创建</span>    <span class="token class-name">Memento</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fruits <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 宽接口</span>    <span class="token keyword">void</span> <span class="token function">addFruits</span><span class="token punctuation">(</span><span class="token class-name">String</span> fruit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fruits<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getFruits</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>fruits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Gamer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> money<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fruits <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fruitname <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">"苹果"</span><span class="token punctuation">,</span> <span class="token string">"葡萄"</span><span class="token punctuation">,</span> <span class="token string">"香蕉"</span><span class="token punctuation">,</span> <span class="token string">"橘子"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Gamer</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> money<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> dice <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dice <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            money <span class="token operator">+=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"持有的金钱增加了 money="</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dice <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            money <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"持有的金钱减半了 money="</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dice <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> f <span class="token operator">=</span> <span class="token function">getFruit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获得了水果 "</span> <span class="token operator">+</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>            fruits<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无事发生"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Memento</span> <span class="token function">createMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Memento</span> memento <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Memento</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        fruits<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            memento<span class="token punctuation">.</span><span class="token function">addFruits</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> memento<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">restoreMemento</span><span class="token punctuation">(</span><span class="token class-name">Memento</span> memento<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> memento<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fruits <span class="token operator">=</span> memento<span class="token punctuation">.</span><span class="token function">getFruits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Gamer [fruits="</span> <span class="token operator">+</span> fruits <span class="token operator">+</span> <span class="token string">", money="</span> <span class="token operator">+</span> money <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getFruit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> prefix <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            prefix <span class="token operator">=</span> <span class="token string">"好吃的"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> prefix <span class="token operator">+</span> fruitname<span class="token punctuation">[</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>fruitname<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Gamer</span> gamer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Gamer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Memento</span> memento <span class="token operator">=</span> gamer<span class="token punctuation">.</span><span class="token function">createMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========="</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" ====="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前状态 "</span> <span class="token operator">+</span> gamer<span class="token punctuation">)</span><span class="token punctuation">;</span>            gamer<span class="token punctuation">.</span><span class="token function">bet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"持有金钱为 "</span> <span class="token operator">+</span> gamer<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>gamer<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> memento<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所持金钱增加，保存游戏状态"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                memento <span class="token operator">=</span> gamer<span class="token punctuation">.</span><span class="token function">createMemento</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>gamer<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> memento<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"所持金钱大幅减少，回档"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                gamer<span class="token punctuation">.</span><span class="token function">restoreMemento</span><span class="token punctuation">(</span>memento<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="State-模式"><a href="#State-模式" class="headerlink" title="State 模式"></a>State 模式</h2><p>该设计模式的核心思想是将状态当作类来处理，最明显的优势就是减少if语句的使用。在之前学习MIT的软件工程课程中就有尝试过用类表示某数据结构的组成部分以此来避免使用<code>instanceof</code>。<br>在程序中存在诸多状态的时候，要想判断此时执行哪个状态对应的方法，就需要使用大量的if来进行状态的判断。如果此时设置一个表示状态的接口，让每一个状态实现他们对应的处理，那么在程序使用的时候，就只需要在特定的情况完成状态迁移，其余时候都可以直接调用需要的处理方法而无需再去判断目前处于什么状态。这也算是一种分治思想，我们将复杂的状态判断分解成一个个类的实现，在程序调用时就可以通过对应的类型寻找到正确的处理。<br>同时，使用State模式后，我们也可以轻易的完成状态的扩充，但和之前学习的诸多具有类似优势的设计模式一样，在进行状态内部功能的扩充时会产生不小的麻烦。不过在有大量状态要判断的情况下，这个缺点带来的麻烦显然不如大量的if语句。<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/design_mode/20220813105229.png" alt="State 模式类图"></p><p>登场角色：</p><ol><li>State：负责表示状态，定义了所有依赖于状态的方法。</li><li>ConcreteState：负责表示各个具体的状态。</li><li>Context：持有表示当前具体状态的ConcreteState，并且提供了给外部调用者使用的State模式的接口。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">doClock</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token keyword">int</span> hour<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">doUse</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">doAlarm</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">doPhone</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">setClock</span><span class="token punctuation">(</span><span class="token keyword">int</span> hour<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">changeState</span><span class="token punctuation">(</span><span class="token class-name">State</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">callSecurityCenter</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">recordLog</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DayState</span> <span class="token keyword">implements</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">DayState</span> singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DayState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">DayState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">DayState</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doClock</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token keyword">int</span> hour<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hour <span class="token operator">&lt;</span> <span class="token number">9</span> <span class="token operator">||</span> hour <span class="token operator">&gt;=</span> <span class="token number">17</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            context<span class="token punctuation">.</span><span class="token function">changeState</span><span class="token punctuation">(</span><span class="token class-name">NightState</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doUse</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">recordLog</span><span class="token punctuation">(</span><span class="token string">"使用金库，白天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAlarm</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">callSecurityCenter</span><span class="token punctuation">(</span><span class="token string">"按下警铃 白天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPhone</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">callSecurityCenter</span><span class="token punctuation">(</span><span class="token string">"正常通话，白天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"白天"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NightState</span> <span class="token keyword">implements</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">NightState</span> singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NightState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">NightState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">NightState</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doClock</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token keyword">int</span> hour<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hour <span class="token operator">&gt;=</span> <span class="token number">9</span> <span class="token operator">||</span> hour <span class="token operator">&lt;</span> <span class="token number">17</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            context<span class="token punctuation">.</span><span class="token function">changeState</span><span class="token punctuation">(</span><span class="token class-name">DayState</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doUse</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">callSecurityCenter</span><span class="token punctuation">(</span><span class="token string">"紧急，晚上使用金库"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doAlarm</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">callSecurityCenter</span><span class="token punctuation">(</span><span class="token string">"按下警铃（晚上）"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPhone</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">recordLog</span><span class="token punctuation">(</span><span class="token string">"晚上通话录音"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"晚上"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SafeFrame</span> <span class="token keyword">extends</span> <span class="token class-name">Frame</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span><span class="token punctuation">,</span> <span class="token class-name">Context</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">TextField</span> textClock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">TextArea</span> textScreen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextArea</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Button</span> buttonUse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"使用金库"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Button</span> buttonAlarm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"按下警铃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Button</span> buttonPhone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"正常通话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Button</span> buttonExit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">State</span> state <span class="token operator">=</span> <span class="token class-name">DayState</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">SafeFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// ... 构造gui界面</span><span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setClock</span><span class="token punctuation">(</span><span class="token keyword">int</span> hour<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> clockstring <span class="token operator">=</span> <span class="token string">"现在时间是"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hour <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        clockstring <span class="token operator">+=</span> <span class="token string">"0"</span> <span class="token operator">+</span> hour <span class="token operator">+</span> <span class="token string">":00"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        clockstring <span class="token operator">+=</span> hour <span class="token operator">+</span> <span class="token string">":00"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clockstring<span class="token punctuation">)</span><span class="token punctuation">;</span>        textClock<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>clockstring<span class="token punctuation">)</span><span class="token punctuation">;</span>        state<span class="token punctuation">.</span><span class="token function">doClock</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> hour<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">changeState</span><span class="token punctuation">(</span><span class="token class-name">State</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"从"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">+</span> <span class="token string">"状态变为了"</span> <span class="token operator">+</span> state <span class="token operator">+</span> <span class="token string">"状态"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callSecurityCenter</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        textScreen<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"call! "</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recordLog</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        textScreen<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"record ... "</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> buttonUse<span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">doUse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> buttonAlarm<span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">doAlarm</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> buttonPhone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span><span class="token function">doPhone</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> buttonExit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个设计模式还有一个注意点就是由谁来管理状态迁移，在上面的例子中，我们让每一个具体状态类自己去判断当前的时间是否需要切换状态，如果需要修改就通知context。这种处理方式将什么时候切换类的信息集中到了一个类中，而缺点就是让每一个具体实现类都不可避免的要了解到其他类的状态信息，增加了耦合度。当然也可以将状态迁移的任务交给context来完成，但这样就要求context必须知道所有的具体状态类。</p><h2 id="Flyweight-模式"><a href="#Flyweight-模式" class="headerlink" title="Flyweight 模式"></a>Flyweight 模式</h2><p>在英语中flyweight表示轻量级的意思，而在程序中，他指的就是减少对象的内存占用。通常情况下，我们会使用new来获得对象实例，但如果对象本身占用的空间比较大，若总是使用new来创建对象，就会消耗大量的内存空间。Flyweight模式就是通过共享实例来避免new出实例，减少内存的占用，同时也因为不需要生成新的实例，一定程度上提升了运行速度。<br>最典型的使用该设计模式的技术就是池化技术，用池来管理现有的昂贵资源，接收到请求后，尽量使用现有的资源。<br>不过一旦提到共享，我们就必须要想到，如果对某个实例进行了修改，那么修改的效果会在多个地方产生影响。这违背了我们在并发状况下的不共享原则，需要谨慎选择哪些信息可以被共享哪些不可以。<br>Intrinsic：表示应当被共享的信息，该单词的英文意思是“本质的”，“固有的”。从意思上我们就可以看出，这类信息并不依赖与某个单独的实例，它是某个类的共同特质，且不会被更改。这一类信息属于可以被共享的信息。<br>Extrinsic：表示不应当被共享的信息。与上面的Intrinsic相对的，这类信息依托于实例的状态，会随着状况改变而产生变化。在并发环境下，状况的变化会非常剧烈，因此这类信息的改动就会非常频繁，明显会对程序造成不好的影响。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/design_mode/20220814095410.png" alt="Flyweight 模式类图"></p><p>登场角色：</p><ol><li>Flyweight：按照通常方式生成会占用大量空间的类，即要被共享实例的类。</li><li>FlyweightFactory：生成轻量级角色的工厂，并在其中实现共享实例。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigChar</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">char</span> charname<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> fontdata<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">BigChar</span><span class="token punctuation">(</span><span class="token keyword">char</span> charname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>charname <span class="token operator">=</span> charname<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">BufferedReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>charname <span class="token operator">+</span> <span class="token string">".txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> line<span class="token punctuation">;</span>            <span class="token class-name">StringBuffer</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>                buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>fontdata <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fontdata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigCharFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BigChar</span><span class="token punctuation">&gt;</span></span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BigChar</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">BigCharFactory</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigCharFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">BigCharFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">BigCharFactory</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 生成/共享实例</span>    <span class="token comment">// 这里要保证线程安全，避免生成两个实例</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">BigChar</span> <span class="token function">getBigChar</span><span class="token punctuation">(</span><span class="token keyword">char</span> charname<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">BigChar</span> bc <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> charname<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bc <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigChar</span><span class="token punctuation">(</span>charname<span class="token punctuation">)</span><span class="token punctuation">;</span>            pool<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> charname<span class="token punctuation">,</span> bc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> bc<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigString</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token class-name">BigChar</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bigchars<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">BigString</span><span class="token punctuation">(</span><span class="token class-name">String</span> string<span class="token punctuation">)</span> <span class="token punctuation">{</span>bigchars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigChar</span><span class="token punctuation">[</span>string<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">BigCharFactory</span> factory <span class="token operator">=</span> <span class="token class-name">BigCharFactory</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bigchars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>bigchars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getBigChar</span><span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> bigchars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>bigchars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>垃圾回收：Java可以通过new关键字分配内存空间，当内存不足时就会开始垃圾回收处理。在堆空间中寻找没有被使用的实例，并释放掉他们。这里gc判断是否为垃圾的依据是：有没有其他对象引用了这个实例。在上面的示例中，生成的所有实例都交给pool托管，因此这些实例会长期贮存在内存中，但如果程序要长期运行或是以有限的内存运行，为了避免发生OOM，就要显示地去解除一些引用让gc可以回收他们，这时就需要注意不能把正被共享的实例回收了。</p><h2 id="Proxy-模式"><a href="#Proxy-模式" class="headerlink" title="Proxy 模式"></a>Proxy 模式</h2><p>Proxy模式指代理模式，在面对不需要本体进行工作的请求时，将它交给代理去处理；只有当碰到代理职能之外的任务时，才交给本体去处理。<br>代理模式最典型的就是HTTP代理，如果接收到的请求页面在代理服务器中有缓存，就由代理服务器直接处理，如果没有缓存，才交给真正的服务器处理。所以代理模式的本质就是：只有在必要的时候采取劳烦本体。由于在实际环境中，本体象征的一般都是十分昂贵的资源，在中间添加一层代理，可以有效的提升程序运行的效率以及程序本身的健壮性。<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/design_mode/20220815095304.png" alt="Proxy 模式类图"></p><p>登场角色：</p><ol><li>Subject：定义了使Proxy和RealSubject角色之间保持一致性的接口，并且可以让用户不必在意使用的究竟是代理还是真实角色。</li><li>Proxy：代理会尽可能处理接收到的请求，只有当自己不能处理时，才会生成RealSubject角色并将工作转交给它。</li><li>RealSubject：实际的主体。<br>将代理人和本人划分出来，可以更加明确的指出哪些由代理人负责完成，哪些由本人负责完成，更好的将二者组件化。并且可以极大程度上避免修改本人的相关代码。</li></ol><blockquote><p>各种Proxy模式</p></blockquote><ol><li>Virtual Proxy：只有当真正需要实例的时候才会生成和初始化实例。</li><li>Remote Proxy：远程调用</li><li>Access Proxy：在调用RealSubject角色的功能时设置访问限制，相当于给代理划分权限级别。</li></ol><p>保持代理与本体一致性的接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Printable</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">setPrintName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token function">getPrintName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本体</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Printer</span> <span class="token keyword">implements</span> <span class="token class-name">Printable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Printer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">heavyJob</span><span class="token punctuation">(</span><span class="token string">"Printer实例生成中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Printer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token function">heavyJob</span><span class="token punctuation">(</span><span class="token string">"Printer实例生成中["</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrintName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPrintName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"============"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">heavyJob</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// TODO Auto-generated catch block</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生成完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代理人。这里设置本体名称以及生成本体的操作都需要加上锁，避免在有多个线程访问的情况下出现更新丢失或生成多个实例的情况。<br>此外，这里还是用反射来生成指定的本体，以此解除本体与代理的耦合。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrinterProxy</span> <span class="token keyword">implements</span> <span class="token class-name">Printable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Printable</span> real<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> className<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PrinterProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">PrinterProxy</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> className<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>className <span class="token operator">=</span> className<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">setPrintName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>real <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            real<span class="token punctuation">.</span><span class="token function">setPrintName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPrintName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">realize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        real<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">realize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>real <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                real <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Printable</span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                real<span class="token punctuation">.</span><span class="token function">setPrintName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> <span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Command-模式"><a href="#Command-模式" class="headerlink" title="Command 模式"></a>Command 模式</h2><p>一个类在调用自己或其他类的方法时，虽然调用结果会反映在对象的状态中，但不会留下工作的历史记录。<br>但如果我们使用类来表示相关的命令就可以很轻易的实现记录工作的历史记录，除此之外我们也可以随时执行过去的命令或是将多个过去的命令整合为一个新命令执行。<br>有时，Command也被称为事件(event)。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/design_mode/20220816093905.png" alt="Command模式类图"></p><p>登场角色：</p><ol><li>Command：Command角色负责定义命令的接口。</li><li>ConcreteCommand：负责实现在Command角色中定义的接口</li><li>Receiver：Command角色执行命令时的对象，负责接收命令的角色</li><li>Client：负责生成ConcretCommand并分配Receiver角色</li><li>Invoker：开始执行命令的角色，会调用Command角色定义的接口。</li></ol><p>Command接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>表示复数个命令的集合，这里使用栈存储历史命令方便后续撤销操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MarcoCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Command</span><span class="token punctuation">&gt;</span></span> commands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Command</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Command</span> c <span class="token operator">:</span> commands<span class="token punctuation">)</span> <span class="token punctuation">{</span>            c<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">Command</span> command<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>command <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        commands<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">undo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>commands<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            commands<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        commands<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令接收者的接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Drawable</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>命令的一个具体实现类，其中保存了接收者的实例，当该命令要执行时就通知对应的接收者。<br>由于这里使用Drawable存储接收者，因此接收者可以轻易更换。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DrawCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token class-name">Drawable</span> drawable<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Point</span> point<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DrawCommand</span><span class="token punctuation">(</span><span class="token class-name">Drawable</span> drawable<span class="token punctuation">,</span> <span class="token class-name">Point</span> point<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>drawable <span class="token operator">=</span> drawable<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>point <span class="token operator">=</span> point<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        drawable<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>x<span class="token punctuation">,</span> point<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>命令接收者的实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DrawCanvas</span> <span class="token keyword">extends</span> <span class="token class-name">Canvas</span> <span class="token keyword">implements</span> <span class="token class-name">Drawable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Color</span> color <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>RED<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> radius <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">MarcoCommand</span> history<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">DrawCanvas</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span> <span class="token class-name">MarcoCommand</span> history<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setSize</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setBackground</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>white<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>history <span class="token operator">=</span> history<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paint</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span>        history<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Graphics</span> g <span class="token operator">=</span> <span class="token function">getGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>        g<span class="token punctuation">.</span><span class="token function">fillOval</span><span class="token punctuation">(</span>x <span class="token operator">-</span> radius<span class="token punctuation">,</span> y <span class="token operator">-</span> radius<span class="token punctuation">,</span> radius <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> radius <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Interpreter-模式"><a href="#Interpreter-模式" class="headerlink" title="Interpreter 模式"></a>Interpreter 模式</h2><p>在解释器模式当中，我们不再单纯使用java来解决问题，而是采用更加简单的迷你语言编写一个迷你程序来解决问题。此时java负责的就是编写该迷你语言的解释器，只要解释器编写正确，当问题发生变化时，就不必再修改java代码而是简单的迷你语言代码。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/design_mode/20220817095444.png" alt="Interpreter 模式类图"></p><p>登场角色：</p><ol><li>AbstractExpression：定义了语法树结点的共同接口</li><li>TerminalExpression：对应BNF中的终结符表达式，即不可再被展开的表达式</li><li>NonterminalExpression：非终结符表达式</li><li>Context：为解释器及进行语法解析提供必要的信息</li></ol><p>下面假定有一种迷你语言的BNF表达式为：<br>&lt; program &gt; ::= program &lt; command list &gt;<br>&lt; command list &gt; ::= &lt; command &gt;* end<br>&lt; command &gt; ::= &lt; repeat command &gt;  |  &lt; primitive command &gt;<br>&lt; repeat command &gt; ::= repeat &lt; number &gt; &lt; command list &gt;<br>&lt; primitive command &gt; ::= go | left | right</p><p>这里定义了语法树的公用接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上下文角色，这里使用<code>StringTokenizer</code>来将文本处理成标记，方便后续的解析</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Context</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">StringTokenizer</span> tokenizer<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> currentToken<span class="token punctuation">;</span>    <span class="token comment">// 将接收到的字符串分割为标记，分隔符为空格，制表符，换行符，回车符等等</span>    <span class="token keyword">private</span> <span class="token class-name">Context</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>        tokenizer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringTokenizer</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tokenizer<span class="token punctuation">.</span><span class="token function">hasMoreTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            currentToken <span class="token operator">=</span> tokenizer<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            currentToken <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> currentToken<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">currentToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> currentToken<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">skipToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ParseException</span><span class="token punctuation">(</span><span class="token string">"Warning: "</span> <span class="token operator">+</span> token <span class="token operator">+</span> <span class="token string">" is expected, but "</span> <span class="token operator">+</span> currentToken <span class="token operator">+</span> <span class="token string">" get"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">currentNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        number <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> number<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下就是各个语法树结点的具体实现类，每个结点的组成部分都严格符合上面BNF定义的结构。将子级结点保存在内部，并调用对应的解析方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// &lt;program&gt; ::= program &lt;command list&gt;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProgramNode</span> <span class="token keyword">implements</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> commandListNode<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">skipToken</span><span class="token punctuation">(</span><span class="token string">"program"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        commandListNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommandListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        commandListNode<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"ProgramNode []"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// &lt;commandlist&gt; ::= &lt;command&gt;* end</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommandListNode</span> <span class="token keyword">implements</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Node</span><span class="token punctuation">&gt;</span></span> commands <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">currentToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ParseException</span><span class="token punctuation">(</span><span class="token string">"Missing end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">currentToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                context<span class="token punctuation">.</span><span class="token function">skipToken</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token class-name">Node</span> commandNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommandNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                commandNode<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>                commands<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>commandNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> commands<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// command ::= repeat command | primitive command</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommandNode</span> <span class="token keyword">implements</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> node<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">currentToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"repeat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RepeatCommandNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrimitiveCommandNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            node<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> node<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// &lt;repeat command&gt; ::= repeat number commandlist</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RepeatCommandNode</span> <span class="token keyword">implements</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> number<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">CommandListNode</span> node<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>        context<span class="token punctuation">.</span><span class="token function">skipToken</span><span class="token punctuation">(</span><span class="token string">"repeat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        number <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">currentToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">nextToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommandListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"[repeat "</span> <span class="token operator">+</span> number <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> node <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// primitive command ::= go | left | right</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrimitiveCommandNode</span> <span class="token keyword">implements</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>        name <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">currentToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        context<span class="token punctuation">.</span><span class="token function">skipToken</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"go"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"left"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"right"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ParseException</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" is undefined"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外卖商城项目</title>
      <link href="/2022/08/11/take-away/"/>
      <url>/2022/08/11/take-away/</url>
      
        <content type="html"><![CDATA[<p>仿《瑞吉外卖》项目，练手用</p><span id="more"></span><h1 id="外卖项目"><a href="#外卖项目" class="headerlink" title="外卖项目"></a>外卖项目</h1><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><pre class="line-numbers language-ad-info" data-language="ad-info"><code class="language-ad-info">title:前台手机号登录，地址管理，历史订单，菜品规格，购物车，下单，菜品浏览。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-ad-info" data-language="ad-info"><code class="language-ad-info">title: 后台分类管理，菜品管理，套餐管理，菜品口味管理，员工登录退出，员工管理，订单管理<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/project/2022-08-05%2015-12-20%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p><h2 id="角色介绍"><a href="#角色介绍" class="headerlink" title="角色介绍"></a>角色介绍</h2><ol><li>后台系统管理员：拥有后台系统中的所有操作权限。</li><li>后台系统普通员工：对菜品，套餐，订单进行管理。</li><li>C端用户：可以浏览菜品，添加购物车，设置地址等。</li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>依赖导入</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.7.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- lookup parent from repository --&gt;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.bei<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>takeaway-mall<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- MyBatis 生成器 --&gt;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.generator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-generator-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>          <span class="token comment">&lt;!--MyBatis分页插件--&gt;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>pagehelper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.4.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- lombok --&gt;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.18.20<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>            <span class="token comment">&lt;!-- 序列化工具 --&gt;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.78<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>          <span class="token comment">&lt;!-- 通用工具类 --&gt;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-lang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-lang<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>          <span class="token comment">&lt;!-- 数据库连接 --&gt;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>          <span class="token comment">&lt;!-- 德鲁伊连接池 --&gt;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.7.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>  <span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">datasource</span><span class="token punctuation">:</span>      <span class="token key atrule">druid</span><span class="token punctuation">:</span>        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3307/take<span class="token punctuation">-</span>out<span class="token punctuation">?</span>serverTimezone=Asia/Shanghai<span class="token important">&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span>        <span class="token key atrule">username</span><span class="token punctuation">:</span> root        <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>    <span class="token key atrule">mybatis</span><span class="token punctuation">:</span>    <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> classpath<span class="token punctuation">:</span>mapper/<span class="token important">*.xml</span>      <span class="token punctuation">-</span> classpath<span class="token important">*:com/**/mapper/*.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于静态资源，要将其放在static下才能被springboot找到，或者也可以自主添加资源映射。<br>下面是将请求backend静态资源的路径设置为类路径下的backend文件夹。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebMVCConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebMvcConfigurationSupport</span> <span class="token punctuation">{</span>      <span class="token comment">/**       * 添加静态资源映射       * */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>          registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/backend/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:backend/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">"/front/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">"classpath:front/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实体类及对应SQL语句生成"><a href="#实体类及对应SQL语句生成" class="headerlink" title="实体类及对应SQL语句生成"></a>实体类及对应SQL语句生成</h2><p>本项目使用mybatis生成器来生成数据库对应的实体类以及SQL语句。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Generator</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">XMLParserException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidConfigurationException</span><span class="token punctuation">,</span> <span class="token class-name">SQLException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>          <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> warnings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">boolean</span> overwrite <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Generator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"/generatorConfig.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">ConfigurationParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigurationParser</span><span class="token punctuation">(</span>warnings<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Configuration</span> configuration <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseConfiguration</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>          in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">DefaultShellCallback</span> shell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultShellCallback</span><span class="token punctuation">(</span>overwrite<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">MyBatisGenerator</span> myBatisGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyBatisGenerator</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> shell<span class="token punctuation">,</span> warnings<span class="token punctuation">)</span><span class="token punctuation">;</span>          myBatisGenerator<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> warning <span class="token operator">:</span> warnings<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>warning<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 为model生成注释 */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommentGenerator</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultCommentGenerator</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">boolean</span> addRemarkComments <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> EXAMPLE_SUFFIX<span class="token operator">=</span><span class="token string">"Example"</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> MAPPER_SUFFIX<span class="token operator">=</span><span class="token string">"Mapper"</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> API_MODEL_PROPERTY_FULL_CLASS_NAME<span class="token operator">=</span><span class="token string">"io.swagger.annotations.ApiModelProperty"</span><span class="token punctuation">;</span>        <span class="token comment">/**       * 设置用户配置的参数       */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addConfigurationProperties</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>addRemarkComments <span class="token operator">=</span> <span class="token class-name">StringUtility</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"addRemarkComments"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token comment">/**       * 给字段添加注释       */</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addFieldComment</span><span class="token punctuation">(</span><span class="token class-name">Field</span> field<span class="token punctuation">,</span> <span class="token class-name">IntrospectedTable</span> introspectedTable<span class="token punctuation">,</span>                                  <span class="token class-name">IntrospectedColumn</span> introspectedColumn<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">String</span> remarks <span class="token operator">=</span> introspectedColumn<span class="token punctuation">.</span><span class="token function">getRemarks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//根据参数和备注信息判断是否添加swagger注解信息  </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>addRemarkComments<span class="token operator">&amp;&amp;</span><span class="token class-name">StringUtility</span><span class="token punctuation">.</span><span class="token function">stringHasValue</span><span class="token punctuation">(</span>remarks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//            addFieldJavaDoc(field, remarks);  </span>            <span class="token comment">//数据库中特殊字符需要转义  </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>remarks<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"\""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  remarks <span class="token operator">=</span> remarks<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"\""</span><span class="token punctuation">,</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token comment">//给model的字段添加swagger注解  </span>            field<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span><span class="token string">"@ApiModelProperty(value = \""</span><span class="token operator">+</span>remarks<span class="token operator">+</span><span class="token string">"\")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>        <span class="token comment">/**       * 给model的字段添加注释       */</span>      <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addFieldJavaDoc</span><span class="token punctuation">(</span><span class="token class-name">Field</span> field<span class="token punctuation">,</span> <span class="token class-name">String</span> remarks<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment">//文档注释开始  </span>        field<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//获取数据库字段的备注信息  </span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> remarkLines <span class="token operator">=</span> remarks<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> remarkLine<span class="token operator">:</span>remarkLines<span class="token punctuation">)</span><span class="token punctuation">{</span>              field<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span><span class="token string">" * "</span><span class="token operator">+</span>remarkLine<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token function">addJavadocTag</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          field<span class="token punctuation">.</span><span class="token function">addJavaDocLine</span><span class="token punctuation">(</span><span class="token string">" */"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addJavaFileComment</span><span class="token punctuation">(</span><span class="token class-name">CompilationUnit</span> compilationUnit<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addJavaFileComment</span><span class="token punctuation">(</span>compilationUnit<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//只在model中添加swagger注解类的导入  </span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>compilationUnit<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullyQualifiedName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>MAPPER_SUFFIX<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span>compilationUnit<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullyQualifiedName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>EXAMPLE_SUFFIX<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              compilationUnit<span class="token punctuation">.</span><span class="token function">addImportedType</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FullyQualifiedJavaType</span><span class="token punctuation">(</span>API_MODEL_PROPERTY_FULL_CLASS_NAME<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  <span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">generatorConfiguration</span>          <span class="token name">PUBLIC</span> <span class="token string">"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span>          <span class="token string">"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatorConfiguration</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>generator.properties<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MySqlContext<span class="token punctuation">"</span></span> <span class="token attr-name">targetRuntime</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MyBatis3<span class="token punctuation">"</span></span> <span class="token attr-name">defaultModelType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flat<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>beginningDelimiter<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>`<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>endingDelimiter<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>`<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javaFileEncoding<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>          <span class="token comment">&lt;!-- 覆盖mapper的插件 --&gt;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>          <span class="token comment">&lt;!-- 为模型生成序列化方法--&gt;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.generator.plugins.SerializablePlugin<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>          <span class="token comment">&lt;!-- 为生成的Java模型创建一个toString方法 --&gt;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.mybatis.generator.plugins.ToStringPlugin<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>          <span class="token comment">&lt;!--可以自定义生成model的代码注释--&gt;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commentGenerator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bei.mbg.CommentGenerator<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>              <span class="token comment">&lt;!-- 是否去除自动生成的注释 true：是 ： false:否 --&gt;</span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suppressAllComments<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>suppressDate<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>addRemarkComments<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commentGenerator</span><span class="token punctuation">&gt;</span></span>          <span class="token comment">&lt;!--配置数据库连接--&gt;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jdbcConnection</span> <span class="token attr-name">driverClass</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.driverClass}<span class="token punctuation">"</span></span>                          <span class="token attr-name">connectionURL</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.connectionURL}<span class="token punctuation">"</span></span>                          <span class="token attr-name">userId</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.userId}<span class="token punctuation">"</span></span>                          <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>              <span class="token comment">&lt;!--解决mysql驱动升级到8.0后不生成指定数据库代码的问题--&gt;</span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>nullCatalogMeansCurrent<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jdbcConnection</span><span class="token punctuation">&gt;</span></span>          <span class="token comment">&lt;!--指定生成model的路径--&gt;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaModelGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bei.model<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>          <span class="token comment">&lt;!--指定生成mapper.xml的路径--&gt;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sqlMapGenerator</span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bei.mapper<span class="token punctuation">"</span></span> <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/resources<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!--        指定生成mapper接口的的路径--&gt;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>javaClientGenerator</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>XMLMAPPER<span class="token punctuation">"</span></span> <span class="token attr-name">targetPackage</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.bei.mapper<span class="token punctuation">"</span></span>                               <span class="token attr-name">targetProject</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>src/main/java<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>          <span class="token comment">&lt;!--生成全部表tableName设为%--&gt;</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">tableName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>%<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>generatedKey</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">sqlStatement</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>MySql<span class="token punctuation">"</span></span> <span class="token attr-name">identity</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>generatorConfiguration</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">jdbc.driverClass</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver  </span><span class="token key attr-name">jdbc.connectionURL</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3307/take-out?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai  </span><span class="token key attr-name">jdbc.userId</span><span class="token punctuation">=</span><span class="token value attr-value">root  </span><span class="token key attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token value attr-value">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="通用响应类"><a href="#通用响应类" class="headerlink" title="通用响应类"></a>通用响应类</h2><p>提供两个静态方法，可以直接生成成功与失败实例，同时提供动态数据面对要返回复数个对象的情况。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * 通用响应类   * */</span>  <span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> SUCCESS_CODE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> FAILED_CODE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span> <span class="token comment">//编码：1成功，0和其它数字为失败  </span>      <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span> <span class="token comment">//错误信息  </span>      <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span> <span class="token comment">//数据  </span>      <span class="token keyword">private</span> <span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//动态数据  </span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token class-name">T</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          r<span class="token punctuation">.</span>data <span class="token operator">=</span> object<span class="token punctuation">;</span>          r<span class="token punctuation">.</span>code <span class="token operator">=</span> SUCCESS_CODE<span class="token punctuation">;</span>          <span class="token keyword">return</span> r<span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">CommonResult</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          r<span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>          r<span class="token punctuation">.</span>code <span class="token operator">=</span> FAILED_CODE<span class="token punctuation">;</span>          <span class="token keyword">return</span> r<span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="登录操作"><a href="#登录操作" class="headerlink" title="登录操作"></a>登录操作</h2><p>步骤：</p><ol><li>检查数据库中是否有该用户，如果没有，返回。</li><li>检查密码是否正确，如果错误，返回。</li><li>检查用户当前状态是否可用，如果不可用，返回。</li><li>登录成功，将用户信息托管给spring security，返回token。</li></ol><p>需要依赖：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--JWT(Json Web Token)登录支持--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.jsonwebtoken<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jjwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 解决java不同版本对jwt的兼容问题 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.xml.bind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jaxb-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--SpringSecurity依赖配置--&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先对spring security进行配置<br>由于我们使用jwt，因此可以禁用csrf和session，同时实现框架需要的用户业务类，利用员工service查找对应的员工，由于此处我们只实现登录，因此不需要提取权限。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** spring security配置类 */</span>  <span class="token annotation punctuation">@Configuration</span>  <span class="token annotation punctuation">@EnableWebSecurity</span>  <span class="token annotation punctuation">@EnableGlobalMethodSecurity</span><span class="token punctuation">(</span>prePostEnabled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> <span class="token class-name">EmployeeService</span> employeeService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>          <span class="token comment">// 禁用csrf和session  </span>        http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          http<span class="token punctuation">.</span><span class="token function">sessionManagement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sessionCreationPolicy</span><span class="token punctuation">(</span><span class="token class-name">SessionCreationPolicy</span><span class="token punctuation">.</span>STATELESS<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 允许网页内嵌显示  </span>http<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">frameOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sameOrigin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationManagerBuilder</span> auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>          <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>auth<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Bean</span>      <span class="token keyword">public</span> <span class="token class-name">UserDetailsService</span> <span class="token function">userDetailsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> username <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>              <span class="token class-name">Employee</span> employee <span class="token operator">=</span> employeeService<span class="token punctuation">.</span><span class="token function">getEmployeeByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UsernameNotFoundException</span><span class="token punctuation">(</span><span class="token string">"该用户不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AdminUserDetail</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着实现登录的业务逻辑，这里交给框架管理的也仅仅是用户，没有对应的权限。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * 登录   * @param username 用户名   * @param password 密码   * @return token   * */</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">UserDetails</span> userDetails <span class="token operator">=</span> userDetailsService<span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 校验密码  </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>passwordEncoder<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadCredentialsException</span><span class="token punctuation">(</span><span class="token string">"密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment">// 将登录成功的用户交给spring security  </span>    <span class="token class-name">UsernamePasswordAuthenticationToken</span> authenticationToken <span class="token operator">=</span>              <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authenticationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 返回生成的token  </span>    <span class="token keyword">return</span> jwtTokenUtil<span class="token punctuation">.</span><span class="token function">generateToken</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后实现控制层接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token annotation punctuation">@RestController</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/employee"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeController</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> <span class="token class-name">EmployeeService</span> employeeService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">LoginParam</span> loginParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> token <span class="token operator">=</span> employeeService<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>loginParam<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loginParam<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>token <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"用户名或密码错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>放上jwt的工具类，要注意的是如果token过期，解析token时会直接抛出异常，但是内仍包含解析结果可以辅助我们进行后续处理。这里直接捕获过期异常并返回处理结果。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtTokenUtil</span> <span class="token punctuation">{</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> LOGGER <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">JwtTokenUtil</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CLAIM_KEY_USERNAME <span class="token operator">=</span> <span class="token string">"sub"</span><span class="token punctuation">;</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> CLAIM_KEY_CREATED <span class="token operator">=</span> <span class="token string">"created"</span><span class="token punctuation">;</span>      <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jwt.secret}"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> <span class="token class-name">String</span> secret<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jwt.expiration}"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> <span class="token class-name">Long</span> expiration<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">generateToken</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> claims<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">setClaims</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token function">generateExpirationDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">signWith</span><span class="token punctuation">(</span><span class="token class-name">SignatureAlgorithm</span><span class="token punctuation">.</span>HS512<span class="token punctuation">,</span> secret<span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">compact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token class-name">Claims</span> <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">Claims</span> claims <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              claims <span class="token operator">=</span> <span class="token class-name">Jwts</span><span class="token punctuation">.</span><span class="token function">parser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">setSigningKey</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">parseClaimsJws</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span>                      <span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExpiredJwtException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> e<span class="token punctuation">.</span><span class="token function">getClaims</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"JWT格式验证失败：{}"</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> claims<span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token comment">/** token的过期时间 */</span>      <span class="token keyword">private</span> <span class="token class-name">Date</span> <span class="token function">generateExpirationDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> expiration <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token comment">/**       * 从token获取登录用户名       * */</span>      <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUserNameFromToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">String</span> username<span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token class-name">Claims</span> claims <span class="token operator">=</span> <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>              username <span class="token operator">=</span> claims<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              username <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> username<span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token comment">/** 验证token是否有效 */</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">validateToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">,</span> <span class="token class-name">UserDetails</span> userDetails<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token function">getUserNameFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> username<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token comment">/** 判断token是否已经失效 */</span>      <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isTokenExpired</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">Date</span> expiredDate <span class="token operator">=</span> <span class="token function">getExpiredDateFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> expiredDate<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token class-name">Date</span> <span class="token function">getExpiredDateFromToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">Claims</span> claims <span class="token operator">=</span> <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> claims<span class="token punctuation">.</span><span class="token function">getExpiration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token comment">/** 利用用户信息生成token */</span>      <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">generateToken</span><span class="token punctuation">(</span><span class="token class-name">UserDetails</span> userDetails<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> claims <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>CLAIM_KEY_USERNAME<span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>CLAIM_KEY_CREATED<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token function">generateToken</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token comment">/** 判断token是否可以被刷新 */</span>      <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canRefresh</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token operator">!</span><span class="token function">isTokenExpired</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token comment">/** 刷新token */</span>      <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">refreshToken</span><span class="token punctuation">(</span><span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">Claims</span> claims <span class="token operator">=</span> <span class="token function">getClaimsFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>          claims<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>CLAIM_KEY_CREATED<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token function">generateToken</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>为方便后续调试，添加一个日志切面，每当收到控制器的请求时，就进行日志记录。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 日志切面 */</span>  <span class="token annotation punctuation">@Aspect</span>  <span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@Slf4j</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspect</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(public * com.bei.controller..*.*(..))"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logPt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"logPt()"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doBefore</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">ServletRequestAttributes</span> attributes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"URL: {}"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"HTTP METHOD: {}"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"IP: {}"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"CLASS METHOD: {}"</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaringTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"ARGS: {}"</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><p>对于没有登录的用户，需要进行拦截处理。<br>检测登录状态步骤：<br>jwt过滤器拦截到请求<br>如果没有token，直接放行<br>提取token，检查有没有过期，如果过期就先刷新token<br>获取其中的用户名。<br>检测token是否有效，如果有效，放行。如果安全框架未保存用户信息，则进行保存操作。</p><p>当将用户信息交给框架时，它会将authenticated设置为true，表示认证成功，保证请求能够进入到控制器。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtAuthenticationTokenFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jwt.header}"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> <span class="token class-name">String</span> header<span class="token punctuation">;</span>      <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jwt.head}"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> <span class="token class-name">String</span> head<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> <span class="token class-name">JwtTokenUtil</span> jwtTokenUtil<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> <span class="token class-name">UserDetailsService</span> userDetailsService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>      <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>          <span class="token class-name">String</span> tokenWithHead <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>tokenWithHead<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> tokenWithHead<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">String</span> token <span class="token operator">=</span> tokenWithHead<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 刷新token  </span><span class="token keyword">if</span> <span class="token punctuation">(</span>jwtTokenUtil<span class="token punctuation">.</span><span class="token function">canRefresh</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      jwtTokenUtil<span class="token punctuation">.</span><span class="token function">refreshToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>            <span class="token class-name">String</span> username <span class="token operator">=</span> jwtTokenUtil<span class="token punctuation">.</span><span class="token function">getUserNameFromToken</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>              log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"start authentication"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"authorize {}"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>              log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"token: {}"</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token class-name">UserDetails</span> userDetails <span class="token operator">=</span> userDetailsService<span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>jwtTokenUtil<span class="token punctuation">.</span><span class="token function">validateToken</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> userDetails<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token class-name">UsernamePasswordAuthenticationToken</span> authenticationToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      authenticationToken<span class="token punctuation">.</span><span class="token function">setDetails</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebAuthenticationDetailsSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buildDetails</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authenticationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>                      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"{} has been authenticated"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>              log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"authentication finish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加token失效时的自定义返回结果。当认证没有通过时会进入。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * 登录失败时，自定义返回信息   * */</span>  <span class="token annotation punctuation">@Component</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestAuthenticationEntryPoint</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationEntryPoint</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commence</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">AuthenticationException</span> authException<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>          response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>authException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="员工管理"><a href="#员工管理" class="headerlink" title="员工管理"></a>员工管理</h2><p>实现功能：修改员工状态(启用，禁用)，添加员工，员工信息分页查询，编辑员工信息。</p><h3 id="新增员工"><a href="#新增员工" class="headerlink" title="新增员工"></a>新增员工</h3><p>步骤：</p><ol><li>获取当前登录用户</li><li>设置初始密码，利用雪花算法生成id</li><li>调用mapper插入数据<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEmployee</span><span class="token punctuation">(</span><span class="token class-name">EmployeeParam</span> employeeParam<span class="token punctuation">,</span> <span class="token class-name">Long</span> uid<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Employee</span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>employeeParam<span class="token punctuation">,</span> employee<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">SnowflakeIdUtils</span> idUtils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SnowflakeIdUtils</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      employee<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>idUtils<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      employee<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>passwordEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      employee<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      employee<span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      employee<span class="token punctuation">.</span><span class="token function">setCreateUser</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>      employee<span class="token punctuation">.</span><span class="token function">setUpdateUser</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>      employeeMapper<span class="token punctuation">.</span><span class="token function">insertSelective</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="分页查询员工"><a href="#分页查询员工" class="headerlink" title="分页查询员工"></a>分页查询员工</h3><p>这里使用mybatis-pageHelper插件实现分页。<br>分页查询主要参数：页码，每页数据量，姓名。如果传入了姓名参数，就会查询指定姓名的员工并进行分页。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/page"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">getEmployeePage</span><span class="token punctuation">(</span><span class="token keyword">int</span> page<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> employeeList <span class="token operator">=</span> employeeService<span class="token punctuation">.</span><span class="token function">getEmployeePage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> pageSize<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> pageInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>employeeList<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">getEmployeePage</span><span class="token punctuation">(</span><span class="token keyword">int</span> page<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">PageHelper</span><span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> pageSize<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">EmployeeExample</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmployeeExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          example<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andUsernameEqualTo</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> employeeMapper<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启用禁用员工"><a href="#启用禁用员工" class="headerlink" title="启用禁用员工"></a>启用禁用员工</h3><p>被禁用的员工将不能登录后台系统，该权限只有admin具有。<br>在本阶段中，我们要添加用户鉴权，以及相应的异常处理。<br>业务代码实现，这里@PreAuthorize注解表示要想访问这个接口必须具备admin权限。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasAuthority('admin')"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">updateEmployeeStatus</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">,</span> <span class="token class-name">Integer</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> count <span class="token operator">=</span> employeeService<span class="token punctuation">.</span><span class="token function">updateEmployeeStatus</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"update {} status to {} success"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"修改用户状态成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"update {} status to {} failed"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"修改用户状态失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateEmployeeStatus</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">,</span> <span class="token class-name">Integer</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">AdminUserDetail</span> principal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AdminUserDetail</span><span class="token punctuation">)</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Employee</span> employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      employee<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      employee<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>      employee<span class="token punctuation">.</span><span class="token function">setUpdateUser</span><span class="token punctuation">(</span>principal<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      employee<span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> employeeMapper<span class="token punctuation">.</span><span class="token function">updateByPrimaryKeySelective</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来是授权操作，这里我们先简单的给admin赋予权限</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">&gt;</span></span> authorityList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          authorityList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> authorityList<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后添加鉴权异常处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@Slf4j</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RestfulAccessDeniedHandler</span> <span class="token keyword">implements</span> <span class="token class-name">AccessDeniedHandler</span> <span class="token punctuation">{</span>      <span class="token annotation punctuation">@Override</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">AccessDeniedException</span> accessDeniedException<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>          response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"当前用户权限不足"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"access deny exception: {}"</span><span class="token punctuation">,</span> accessDeniedException<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="记录一个小坑"><a href="#记录一个小坑" class="headerlink" title="记录一个小坑"></a>记录一个小坑</h4><p>本项目中用户id采用雪花算法生成，最终位数大于16，而js表示数据精度有限，在第17位开始全部为0,导致前后端数据不一致。<br>解决方法：将id序列化为字符串</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"主键"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@JsonSerialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name">ToStringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="编辑员工信息"><a href="#编辑员工信息" class="headerlink" title="编辑员工信息"></a>编辑员工信息</h3><ol><li>客户端先向服务器发起请求，获取指定用户当前的信息。</li><li>用户修改后发起修改请求，完成修改</li></ol><p>获取目标用户信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">getEmployeeInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Employee</span> employee <span class="token operator">=</span> employeeService<span class="token punctuation">.</span><span class="token function">getEmployeeById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>employee <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"没有该用户的信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改用户信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"hasAuthority('admin')"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">updateEmployeeInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">EmployeeParam</span> employeeParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> count <span class="token operator">=</span> employeeService<span class="token punctuation">.</span><span class="token function">updateEmployee</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> employeeParam<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"update id: {} information successfully"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"信息更新成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"update id: {} information failed"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"信息更新失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分类管理"><a href="#分类管理" class="headerlink" title="分类管理"></a>分类管理</h2><p>功能：新增分类，删除分类，分类信息查询，修改分类。</p><h3 id="新增分类"><a href="#新增分类" class="headerlink" title="新增分类"></a>新增分类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span>  <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">addCategory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">CategoryParam</span> categoryParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> count <span class="token operator">=</span> categoryService<span class="token punctuation">.</span><span class="token function">addCategory</span><span class="token punctuation">(</span>categoryParam<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> categoryParam<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> categoryParam<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"添加分类 "</span> <span class="token operator">+</span> categoryParam <span class="token operator">+</span> <span class="token string">" 成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"添加分类成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"添加分类 "</span> <span class="token operator">+</span> categoryParam <span class="token operator">+</span> <span class="token string">" 失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"添加分类失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addCategory</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Integer</span> type<span class="token punctuation">,</span> <span class="token class-name">Integer</span> sort<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Category</span> category <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Category</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">AdminUserDetail</span> principal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AdminUserDetail</span><span class="token punctuation">)</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">SnowflakeIdUtils</span> snowflakeIdUtils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SnowflakeIdUtils</span><span class="token punctuation">(</span>principal<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      category<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>snowflakeIdUtils<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      category<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      category<span class="token punctuation">.</span><span class="token function">setSort</span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span><span class="token punctuation">;</span>      category<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>      category<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      category<span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      category<span class="token punctuation">.</span><span class="token function">setCreateUser</span><span class="token punctuation">(</span>principal<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      category<span class="token punctuation">.</span><span class="token function">setUpdateUser</span><span class="token punctuation">(</span>principal<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> categoryMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除分类"><a href="#删除分类" class="headerlink" title="删除分类"></a>删除分类</h3><p>在删除之前需要检查是否有菜品或套餐还属于该分类，如果有，需要驳回请求。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">deleteCategory</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">long</span> dishCount <span class="token operator">=</span> dishService<span class="token punctuation">.</span><span class="token function">getCountByCategory</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">long</span> setmealCount <span class="token operator">=</span> setmealService<span class="token punctuation">.</span><span class="token function">getCountByCategory</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>dishCount <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> setmealCount <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"当前分类下仍有菜品，不可删除"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> categoryService<span class="token punctuation">.</span><span class="token function">deleteCategory</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"删除分类 ["</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"] 成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"删除成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"删除分类 ["</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"] 失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"删除失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteCategory</span><span class="token punctuation">(</span><span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> categoryMapper<span class="token punctuation">.</span><span class="token function">deleteByPrimaryKey</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="更新分类"><a href="#更新分类" class="headerlink" title="更新分类"></a>更新分类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">updateCategory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">CategoryParam</span> categoryParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> count <span class="token operator">=</span> categoryService<span class="token punctuation">.</span><span class="token function">updateCategory</span><span class="token punctuation">(</span>categoryParam<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"更新分类 "</span> <span class="token operator">+</span> categoryParam <span class="token operator">+</span> <span class="token string">" 成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"更新成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"更新分类 "</span> <span class="token operator">+</span> categoryParam <span class="token operator">+</span> <span class="token string">" 失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"更新失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateCategory</span><span class="token punctuation">(</span><span class="token class-name">CategoryParam</span> categoryParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">AdminUserDetail</span> principal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AdminUserDetail</span><span class="token punctuation">)</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Category</span> category <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Category</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      category<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>categoryParam<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      category<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>categoryParam<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      category<span class="token punctuation">.</span><span class="token function">setSort</span><span class="token punctuation">(</span>categoryParam<span class="token punctuation">.</span><span class="token function">getSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      category<span class="token punctuation">.</span><span class="token function">setUpdateUser</span><span class="token punctuation">(</span>principal<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      category<span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> categoryMapper<span class="token punctuation">.</span><span class="token function">updateByPrimaryKeySelective</span><span class="token punctuation">(</span>category<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文件上传和下载"><a href="#文件上传和下载" class="headerlink" title="文件上传和下载"></a>文件上传和下载</h2><p>在后面添加菜品时，需要一并上传菜品图片，这里使用七牛云做对象存储。<br>具体操作直接抄官方文档即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@Slf4j</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QiniuService</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${qiniu.accessKey}"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> <span class="token class-name">String</span> accessKey<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${qiniu.secretKey}"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> <span class="token class-name">String</span> secretKey<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${qiniu.bucket}"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> <span class="token class-name">String</span> bucket<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${qiniu.domain}"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> <span class="token class-name">String</span> domain<span class="token punctuation">;</span>        <span class="token comment">/**       * 上传文件       * @param file 要上传的二进制文件       * @param filename 文件名       * @return 在存储空间的文件名       * */</span>      <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">uploadFile</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">,</span> <span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//构造一个带指定 Region 对象的配置类  </span>        <span class="token class-name">Configuration</span> cfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Configuration</span><span class="token punctuation">(</span><span class="token class-name">Region</span><span class="token punctuation">.</span><span class="token function">autoRegion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//...其他参数参考类注释  </span>        <span class="token class-name">UploadManager</span> uploadManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UploadManager</span><span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//默认不指定key的情况下，以文件内容的hash值作为文件名  </span>        <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> uploadBytes <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">Auth</span> auth <span class="token operator">=</span> <span class="token class-name">Auth</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>accessKey<span class="token punctuation">,</span> secretKey<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">String</span> upToken <span class="token operator">=</span> auth<span class="token punctuation">.</span><span class="token function">uploadToken</span><span class="token punctuation">(</span>bucket<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">try</span> <span class="token punctuation">{</span>                  <span class="token class-name">Response</span> response <span class="token operator">=</span> uploadManager<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>uploadBytes<span class="token punctuation">,</span> filename<span class="token punctuation">,</span> upToken<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//解析上传成功的结果  </span>                <span class="token class-name">DefaultPutRet</span> putRet <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">bodyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">DefaultPutRet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> putRet<span class="token punctuation">.</span>key<span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">QiniuException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token class-name">Response</span> r <span class="token operator">=</span> ex<span class="token punctuation">.</span>response<span class="token punctuation">;</span>                  log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">try</span> <span class="token punctuation">{</span>                      log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">bodyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">QiniuException</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token comment">//ignore  </span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">//ignore  </span>        <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token comment">/**       * 下载文件       * @param filename 文件名       * @return 文件url       * */</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnsupportedEncodingException</span> <span class="token punctuation">{</span>          <span class="token class-name">String</span> encodedFileName <span class="token operator">=</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">,</span> <span class="token string">"%20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">String</span> finalUrl <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s/%s"</span><span class="token punctuation">,</span> domain<span class="token punctuation">,</span> encodedFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token string">"http://"</span> <span class="token operator">+</span> finalUrl<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上传时，文件名需要使用UUID另外生成，避免用户上传同名文件导致覆盖。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/common"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@RestController</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonController</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> <span class="token class-name">QiniuService</span> qiniuService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">uploadFile</span><span class="token punctuation">(</span><span class="token class-name">MultipartFile</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">String</span> suffix <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">String</span> filename <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> suffix<span class="token punctuation">;</span>          <span class="token class-name">String</span> name <span class="token operator">=</span> qiniuService<span class="token punctuation">.</span><span class="token function">uploadFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/download"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>              <span class="token class-name">String</span> picUrl <span class="token operator">=</span> qiniuService<span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>picUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">HttpURLConnection</span> urlConnection <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpURLConnection</span><span class="token punctuation">)</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              urlConnection<span class="token punctuation">.</span><span class="token function">setConnectTimeout</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              urlConnection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>urlConnection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">OutputStream</span> out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token keyword">int</span> size<span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>size <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"文件格式错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MalformedURLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"url获取错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"文件读取错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"传输成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="菜品管理"><a href="#菜品管理" class="headerlink" title="菜品管理"></a>菜品管理</h2><h3 id="新增菜品"><a href="#新增菜品" class="headerlink" title="新增菜品"></a>新增菜品</h3><p>前端传入的参数分为两个部分，一部分属于dish，另一部分属于dishFlavor(菜品口味)。因此单一的dish不足以容纳参数，可以新建一个dto存储。这里种类id也要做串行化处理，否则它在前端会丢失精度导致无法与对应的id匹配。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DishDto</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@JsonSerialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name">ToStringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token annotation punctuation">@JsonSerialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name">ToStringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> <span class="token class-name">Long</span> categoryId<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> price<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> code<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> image<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> status<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DishFlavor</span><span class="token punctuation">&gt;</span></span> flavors<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制层处理逻辑，将dish和口味分别交给对应的服务层处理。注意需要启动事务。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Transactional</span>  <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">addDish</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">DishDto</span> dishParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Dish</span> dish <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>dishParam<span class="token punctuation">,</span> dish<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Long</span> dishId <span class="token operator">=</span> dishService<span class="token punctuation">.</span><span class="token function">addDish</span><span class="token punctuation">(</span>dish<span class="token punctuation">)</span><span class="token punctuation">;</span>      dishFlavorService<span class="token punctuation">.</span><span class="token function">addDishFlavorBatch</span><span class="token punctuation">(</span>dishParam<span class="token punctuation">.</span><span class="token function">getFlavors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dishId<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>dishId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dish的插入很简单，没什么好说的。这里简单说一下口味的插入。由于传入的口味是列表形式，因此不可避免的会想到使用循环，但在宿主语言直接使用循环插入效率极低。这里采用mybatis的原生批量插入方式。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>insertBatch<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    insert into dish_flavor (id, dish_id, name, value,   create_time, update_time, create_user,   update_user, is_deleted)    values     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dishFlavorList<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dishFlavor<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      (#{dishFlavor.id}, #{dishFlavor.dishId,jdbcType=BIGINT}, #{dishFlavor.name,jdbcType=VARCHAR}, #{dishFlavor.value,jdbcType=VARCHAR},    #{dishFlavor.createTime,jdbcType=TIMESTAMP}, #{dishFlavor.updateTime,jdbcType=TIMESTAMP}, #{dishFlavor.createUser,jdbcType=BIGINT},    #{dishFlavor.updateUser,jdbcType=BIGINT}, #{dishFlavor.isDeleted,jdbcType=INTEGER})      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过这种方式有个缺陷是会导致sql语句的长度剧烈增长，一旦文件大小超过4M就会插入失败，不过本项目不考虑海量数据的情况。如果既想高效又要保证足够的健壮性可以使用MP自带的批量插入。<br>service层操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDishFlavorBatch</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DishFlavor</span><span class="token punctuation">&gt;</span></span> dishFlavorList<span class="token punctuation">,</span> <span class="token class-name">Long</span> dishId<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">SnowflakeIdUtils</span> snowflakeIdUtils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SnowflakeIdUtils</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">AdminUserDetail</span> principal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AdminUserDetail</span><span class="token punctuation">)</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Long</span> uid <span class="token operator">=</span> principal<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dishFlavorList <span class="token operator">=</span> dishFlavorList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span>dishFlavor <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                  dishFlavor<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>snowflakeIdUtils<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  dishFlavor<span class="token punctuation">.</span><span class="token function">setDishId</span><span class="token punctuation">(</span>dishId<span class="token punctuation">)</span><span class="token punctuation">;</span>                  dishFlavor<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  dishFlavor<span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  dishFlavor<span class="token punctuation">.</span><span class="token function">setUpdateUser</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>                  dishFlavor<span class="token punctuation">.</span><span class="token function">setCreateUser</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span><span class="token punctuation">;</span>                  dishFlavor<span class="token punctuation">.</span><span class="token function">setIsDeleted</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dishFlavorMapper<span class="token punctuation">.</span><span class="token function">insertBatch</span><span class="token punctuation">(</span>dishFlavorList<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="菜品信息分页查询"><a href="#菜品信息分页查询" class="headerlink" title="菜品信息分页查询"></a>菜品信息分页查询</h3><p>首先要注意这里需要菜品分类的名称而非id，因此可以创建一个vo用于用户层展示。这里注意要把id也返回过去，不然之后前端拿不到数据来完成更新时需要的数据查询。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DishVo</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@JsonSerialize</span><span class="token punctuation">(</span>using <span class="token operator">=</span> <span class="token class-name">ToStringSerializer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> categoryName<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">BigDecimal</span> price<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> code<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> image<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> description<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> status<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> updateTime<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DishFlavor</span><span class="token punctuation">&gt;</span></span> flavors<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制层的逻辑。由于<code>pageHelper</code>只会对下一次sql操作进行分页，如果该sql返回的list在送入pageInfo前被作出改动则分页会失效。因此这里的处理是先将返回的list放入pageinfo，然后再作出修改，放回pageinfo。<br>这里如果使用联表查询，也可以避免上面提到的问题，不过本项目本着尽量简单的宗旨，就先凑合着用吧。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/page"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">getDishPage</span><span class="token punctuation">(</span><span class="token keyword">int</span> page<span class="token punctuation">,</span> <span class="token keyword">int</span> pageSize<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Dish</span><span class="token punctuation">&gt;</span></span> dishList <span class="token operator">=</span> dishService<span class="token punctuation">.</span><span class="token function">getDishPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> pageSize<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">SimpleDateFormat</span> dateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy:MM:dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">PageInfo</span> pageInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token punctuation">(</span>dishList<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">)</span> pageInfo<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                  <span class="token class-name">Dish</span> dish <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dish</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>                  <span class="token class-name">DishVo</span> dishVo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DishVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>dish<span class="token punctuation">,</span> dishVo<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token class-name">Category</span> category <span class="token operator">=</span> categoryService<span class="token punctuation">.</span><span class="token function">getCategoryById</span><span class="token punctuation">(</span>dish<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  dishVo<span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span>dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>dish<span class="token punctuation">.</span><span class="token function">getUpdateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  dishVo<span class="token punctuation">.</span><span class="token function">setCategoryName</span><span class="token punctuation">(</span>category<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">return</span> dishVo<span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      pageInfo<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新菜品信息"><a href="#更新菜品信息" class="headerlink" title="更新菜品信息"></a>更新菜品信息</h3><p>首先需要回显原先的菜品信息，由于之前传入是用的dto，因此这里传回前端也可以使用dto</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">getDishDetail</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Dish</span> dish <span class="token operator">=</span> dishService<span class="token punctuation">.</span><span class="token function">getDishById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>dish <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"没有该菜品的信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DishFlavor</span><span class="token punctuation">&gt;</span></span> flavors <span class="token operator">=</span> dishFlavorService<span class="token punctuation">.</span><span class="token function">getFlavorByDish</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">DishDto</span> dishDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DishDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>dish<span class="token punctuation">,</span> dishDto<span class="token punctuation">)</span><span class="token punctuation">;</span>      dishDto<span class="token punctuation">.</span><span class="token function">setFlavors</span><span class="token punctuation">(</span>flavors<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>dishDto<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>随后是更新菜品，同样本着尽量不动脑的宗旨，这里对于口味的处理是先全部删除，然后重新插入</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PutMapping</span>  <span class="token annotation punctuation">@Transactional</span>  <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">updateDish</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">DishDto</span> dishDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">Dish</span> dish <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>dishDto<span class="token punctuation">,</span> dish<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> count <span class="token operator">=</span> dishService<span class="token punctuation">.</span><span class="token function">updateDish</span><span class="token punctuation">(</span>dish<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"更新菜品 ["</span> <span class="token operator">+</span> dishDto <span class="token operator">+</span> <span class="token string">"] 失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span> <span class="token string">"更新菜品失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      dishFlavorService<span class="token punctuation">.</span><span class="token function">removeByDish</span><span class="token punctuation">(</span>dish<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      dishFlavorService<span class="token punctuation">.</span><span class="token function">addDishFlavorBatch</span><span class="token punctuation">(</span>dishDto<span class="token punctuation">.</span><span class="token function">getFlavors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dish<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>dish<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新菜品状态"><a href="#更新菜品状态" class="headerlink" title="更新菜品状态"></a>更新菜品状态</h3><p>修改菜品的status字段<br>停售菜品后对应套餐的可选操作：</p><ol><li>直接将套餐停售，但是这里这么做的话会让控制层耦合度过高</li><li>用户查询套餐详细信息时显示提示，下单时直接拒绝<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/status/0"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">disableDish</span><span class="token punctuation">(</span><span class="token class-name">String</span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> idList <span class="token operator">=</span> <span class="token function">convertIdsToList</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> id <span class="token operator">:</span> idList<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">Dish</span> dish <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          dish<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>          dish<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> count <span class="token operator">=</span> dishService<span class="token punctuation">.</span><span class="token function">updateDish</span><span class="token punctuation">(</span>dish<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"停售 "</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">" 失败，数据库没有找到操作对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"停售失败，请检查参数是否正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"停售成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/status/1"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">enableDish</span><span class="token punctuation">(</span><span class="token class-name">String</span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> idList <span class="token operator">=</span> <span class="token function">convertIdsToList</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> id <span class="token operator">:</span> idList<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">Dish</span> dish <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          dish<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>          dish<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> count <span class="token operator">=</span> dishService<span class="token punctuation">.</span><span class="token function">updateDish</span><span class="token punctuation">(</span>dish<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"启售 "</span> <span class="token operator">+</span> ids <span class="token operator">+</span> <span class="token string">" 失败，数据库没有找到操作对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"启售失败，请检查参数是否正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"启售成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="套餐管理"><a href="#套餐管理" class="headerlink" title="套餐管理"></a>套餐管理</h2><p>所有的操作跟菜品管理几乎一致，没什么注意点。<br>用于接收套餐详细信息的dto，另外包含了套餐与菜品的关系。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetmealDto</span> <span class="token keyword">extends</span> <span class="token class-name">Setmeal</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SetmealDish</span><span class="token punctuation">&gt;</span></span> setmealDishes<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">String</span> categoryName<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制层逻辑</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RestController</span>  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/setmeal"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Slf4j</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetmealController</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> <span class="token class-name">SetmealService</span> setmealService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> <span class="token class-name">SetmealDishService</span> setmealDishService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> <span class="token class-name">CategoryService</span> categoryService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@PostMapping</span>      <span class="token annotation punctuation">@Transactional</span>        <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">addSetmeal</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">SetmealDto</span> setmealDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">Setmeal</span> setmeal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Setmeal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>setmealDto<span class="token punctuation">,</span> setmeal<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Long</span> setmealId <span class="token operator">=</span> setmealService<span class="token punctuation">.</span><span class="token function">addSetmeal</span><span class="token punctuation">(</span>setmeal<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>setmealId <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"添加套餐失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SetmealDish</span><span class="token punctuation">&gt;</span></span> setmealDishes <span class="token operator">=</span> setmealDto<span class="token punctuation">.</span><span class="token function">getSetmealDishes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>setmealDishes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"套餐中必须有至少一种菜品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          setmealDishService<span class="token punctuation">.</span><span class="token function">addBatches</span><span class="token punctuation">(</span>setmealDishes<span class="token punctuation">,</span> setmealId<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>setmealId<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/page"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">getSetmealPage</span><span class="token punctuation">(</span><span class="token class-name">PageParam</span> pageParam<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Setmeal</span><span class="token punctuation">&gt;</span></span> setmealList <span class="token operator">=</span> setmealService<span class="token punctuation">.</span><span class="token function">getSetmealPage</span><span class="token punctuation">(</span>pageParam<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">PageInfo</span> pageInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageInfo</span><span class="token punctuation">(</span>setmealList<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">List</span> list <span class="token operator">=</span> pageInfo<span class="token punctuation">.</span><span class="token function">getList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          list <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>                      <span class="token class-name">Setmeal</span> setmeal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Setmeal</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>                      <span class="token class-name">SetmealDto</span> setmealDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SetmealDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token class-name">Category</span> category <span class="token operator">=</span> categoryService<span class="token punctuation">.</span><span class="token function">getCategoryById</span><span class="token punctuation">(</span>setmeal<span class="token punctuation">.</span><span class="token function">getCategoryId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      setmealDto<span class="token punctuation">.</span><span class="token function">setCategoryName</span><span class="token punctuation">(</span>category<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>setmeal<span class="token punctuation">,</span> setmealDto<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">return</span> setmealDto<span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          pageInfo<span class="token punctuation">.</span><span class="token function">setList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>pageInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token annotation punctuation">@DeleteMapping</span>      <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">deleteSetmeal</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"ids"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> idList <span class="token operator">=</span> <span class="token function">convertIdsToList</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> id <span class="token operator">:</span> idList<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">int</span> count <span class="token operator">=</span> setmealService<span class="token punctuation">.</span><span class="token function">deleteSetmeal</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"删除套餐 "</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">" 失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"删除套餐失败，没有查到该套餐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              count <span class="token operator">=</span> setmealDishService<span class="token punctuation">.</span><span class="token function">deleteSetmeal</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"删除套餐 "</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">" 失败, 无法更新菜品套餐关系表"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"删除套餐失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"删除套餐 "</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">" 成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"删除套餐成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/status/0"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">disableSetmeal</span><span class="token punctuation">(</span><span class="token class-name">String</span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> idList <span class="token operator">=</span> <span class="token function">convertIdsToList</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> id <span class="token operator">:</span> idList<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">Setmeal</span> setmeal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Setmeal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              setmeal<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>              setmeal<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">int</span> count <span class="token operator">=</span> setmealService<span class="token punctuation">.</span><span class="token function">updateSetmeal</span><span class="token punctuation">(</span>setmeal<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"停售 "</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">" 失败，数据库没有找到操作对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"停售失败，请检查参数是否正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"停售成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/status/1"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">enableSetmeal</span><span class="token punctuation">(</span><span class="token class-name">String</span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> idList <span class="token operator">=</span> <span class="token function">convertIdsToList</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> id <span class="token operator">:</span> idList<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">Setmeal</span> setmeal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Setmeal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              setmeal<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>              setmeal<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">int</span> count <span class="token operator">=</span> setmealService<span class="token punctuation">.</span><span class="token function">updateSetmeal</span><span class="token punctuation">(</span>setmeal<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"启售 "</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">" 失败，数据库没有找到操作对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"启售失败，请检查参数是否正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"启售成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">getSetmealDetail</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">Long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">Setmeal</span> setmeal <span class="token operator">=</span> setmealService<span class="token punctuation">.</span><span class="token function">getSetmeal</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SetmealDish</span><span class="token punctuation">&gt;</span></span> setmealDishList <span class="token operator">=</span> setmealDishService<span class="token punctuation">.</span><span class="token function">getSetmeal</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>setmeal <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> setmealDishList <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> setmealDishList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"查询 "</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">" 信息失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"查询套餐信息失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token class-name">SetmealDto</span> setmealDto <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SetmealDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>setmeal<span class="token punctuation">,</span> setmealDto<span class="token punctuation">)</span><span class="token punctuation">;</span>          setmealDto<span class="token punctuation">.</span><span class="token function">setSetmealDishes</span><span class="token punctuation">(</span>setmealDishList<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>setmealDto<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token annotation punctuation">@PutMapping</span>      <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">updateSetmeal</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">SetmealDto</span> setmealDto<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">Setmeal</span> setmeal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Setmeal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">copyProperties</span><span class="token punctuation">(</span>setmealDto<span class="token punctuation">,</span> setmeal<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> count <span class="token operator">=</span> setmealService<span class="token punctuation">.</span><span class="token function">updateSetmeal</span><span class="token punctuation">(</span>setmeal<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"更新 "</span> <span class="token operator">+</span> setmealDto<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 失败，没有查询到该对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"更新失败，没有查询到该套餐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          count <span class="token operator">=</span> setmealDishService<span class="token punctuation">.</span><span class="token function">deleteSetmeal</span><span class="token punctuation">(</span>setmeal<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"更新 "</span> <span class="token operator">+</span> setmealDto<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 失败，无法删除原先的口味关系"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"更新失败，数据库错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          setmealDishService<span class="token punctuation">.</span><span class="token function">addBatches</span><span class="token punctuation">(</span>setmealDto<span class="token punctuation">.</span><span class="token function">getSetmealDishes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> setmeal<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>setmeal<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token function">convertIdsToList</span><span class="token punctuation">(</span><span class="token class-name">String</span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> idList <span class="token operator">=</span> ids<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>idList<span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token operator">::</span><span class="token function">valueOf</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> list<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上，后台项目就告一段落了</p><p>=========================================================</p><p>前台项目要点不多，这里拣重点说</p><h3 id="禁用套餐"><a href="#禁用套餐" class="headerlink" title="禁用套餐"></a>禁用套餐</h3><p>首先来处理一下之前遗留的停售菜品后包含该菜品的套餐仍能被订购的问题。<br>思路：</p><ol><li>当菜品被停售或删除后，修改套餐菜品关系表中的is_deleted字段，表示这条关系不再生效</li><li>订购套餐时，查询对应的套餐菜品关系表，检查是否有关系记录已经失效，如果有就代表当前套餐包含停售或已经删除的菜品，禁止用户购买。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Transactional</span>  <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">ShoppingCart</span> cart<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShoppingCart</span><span class="token punctuation">&gt;</span></span> shoppingCartList <span class="token operator">=</span> shoppingCartService<span class="token punctuation">.</span><span class="token function">getShoppingCart</span><span class="token punctuation">(</span>cart<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">ShoppingCart</span> shoppingCart <span class="token operator">=</span> shoppingCartList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> shoppingCartList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>shoppingCart <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          shoppingCart<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span>shoppingCart<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> count <span class="token operator">=</span> shoppingCartService<span class="token punctuation">.</span><span class="token function">updateShoppingCart</span><span class="token punctuation">(</span>shoppingCart<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"添加购物车项目: ["</span> <span class="token operator">+</span> cart <span class="token operator">+</span> <span class="token string">"] 失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"加入购物车失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"添加成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      cart<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">AdminUserDetail</span> principal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AdminUserDetail</span><span class="token punctuation">)</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cart<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>principal<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cart<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cart<span class="token punctuation">.</span><span class="token function">getSetmealId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SetmealDish</span><span class="token punctuation">&gt;</span></span> setmealDishList <span class="token operator">=</span> setmealDishService<span class="token punctuation">.</span><span class="token function">getSetmeal</span><span class="token punctuation">(</span>cart<span class="token punctuation">.</span><span class="token function">getSetmealId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SetmealDish</span> setmealDish <span class="token operator">:</span> setmealDishList<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>setmealDish<span class="token punctuation">.</span><span class="token function">getIsDeleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"尝试添加包含停售菜品的套餐, id: {}"</span><span class="token punctuation">,</span> cart<span class="token punctuation">.</span><span class="token function">getSetmealId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"本套餐包含的部分菜品已经停售"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">int</span> count <span class="token operator">=</span> shoppingCartService<span class="token punctuation">.</span><span class="token function">addShoppingCart</span><span class="token punctuation">(</span>cart<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"添加购物车项目: ["</span> <span class="token operator">+</span> cart <span class="token operator">+</span> <span class="token string">"] 失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"加入购物车失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"添加成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="前台用户登录"><a href="#前台用户登录" class="headerlink" title="前台用户登录"></a>前台用户登录</h2><p>前台用户的登录采用邮箱验证的方法，接收到用户请求后先检查验证码是否正确，如果正确，就去数据库中查询用户的信息。如果没有用户信息就直接注册。<br>该功能使用redis缓存验证码，并使用springboot提供的邮件发送功能。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 邮件服务 --&gt;</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>邮件需要的配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mail</span><span class="token punctuation">:</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">25</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token string">"邮箱号"</span>  <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token string">"邮箱提供的令牌"</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> smtp.163.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>邮箱服务实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@Slf4j</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailService</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> <span class="token class-name">JavaMailSender</span> mailSender<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${spring.mail.username}"</span><span class="token punctuation">)</span>      <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendSimpleTextMail</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">SimpleMailMessage</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          message<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          message<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>          message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>          message<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>          mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"向"</span> <span class="token operator">+</span> <span class="token keyword">to</span> <span class="token operator">+</span> <span class="token string">"发送邮件成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送验证码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/validate"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">sendCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> email<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"validation"</span> <span class="token operator">+</span> email<span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>mailService<span class="token punctuation">.</span><span class="token function">sendSimpleTextMail</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"外卖系统登录验证码"</span><span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"验证码为:"</span> <span class="token operator">+</span> builder<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">"验证码发送成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用户登录逻辑</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> email<span class="token punctuation">,</span> <span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">String</span> realCode <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"validation"</span> <span class="token operator">+</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>code<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>realCode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getUserByEmail</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">SnowflakeIdUtils</span> snowflakeIdUtils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SnowflakeIdUtils</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>snowflakeIdUtils<span class="token punctuation">.</span><span class="token function">nextId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          user<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">int</span> count <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insertSelective</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"注册新用户失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token class-name">UserDetails</span> userDetails <span class="token operator">=</span> userDetailsService<span class="token punctuation">.</span><span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">UsernamePasswordAuthenticationToken</span> authenticationToken <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> userDetails<span class="token punctuation">.</span><span class="token function">getAuthorities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authenticationToken<span class="token punctuation">)</span><span class="token punctuation">;</span>      redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"validation"</span> <span class="token operator">+</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> jwtTokenUtil<span class="token punctuation">.</span><span class="token function">generateToken</span><span class="token punctuation">(</span>userDetails<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h3><p>对于菜品信息，种类信息这类会被频繁查询的内容，我们可以将他们放在缓存中，减少数据库的负担。<br>这里创建两个注解<code>@Cache</code>, <code>@CleanCache</code>，前者表示指定接口的返回值需要被缓存，一般用于查询接口，后者表示该接口执行完后要清理对应的缓存，一般用于数据库更新接口。<br>缓存切面实现<br>这里在实现过程中碰到一个小坑，如果某个形参与传入参数结合后为null，就无法识别到对应的方法。因此接口的形参应当尽量是一个能够封装入参的类型。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span>  <span class="token annotation punctuation">@Component</span>  <span class="token annotation punctuation">@Slf4j</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CacheAspect</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>      <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.bei.annotation.Cache)"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cachePt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.bei.annotation.CleanCache)"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cleanPt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"cachePt()"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">cacheAround</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> point<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>          <span class="token class-name">Signature</span> signature <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">String</span> className <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">String</span> methodName <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">String</span> params <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  params <span class="token operator">+=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  parameterTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                  parameterTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token class-name">Method</span> method <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> parameterTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Cache</span> cache <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Cache</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">long</span> expire <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">String</span> name <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">String</span> key <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> params<span class="token punctuation">;</span>          <span class="token class-name">String</span> value <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"缓存命中， {}, {}"</span><span class="token punctuation">,</span> className<span class="token punctuation">,</span> methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token class-name">Object</span> proceed <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>proceed<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofMillis</span><span class="token punctuation">(</span>expire<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"未命中缓存，保存本次返回结果, {}, {}"</span><span class="token punctuation">,</span> className<span class="token punctuation">,</span> methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> proceed<span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"cleanPt()"</span><span class="token punctuation">)</span>      <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> point<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>          <span class="token class-name">Signature</span> signature <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">String</span> className <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">String</span> methodName <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">String</span> params <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  params <span class="token operator">+=</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  parameterTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                  parameterTypes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token class-name">Method</span> method <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaringType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> parameterTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">CleanCache</span> annotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">CleanCache</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">String</span> name <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Object</span> proceed <span class="token operator">=</span> point<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>keys <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> keys<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"数据库更新，清除缓存, {}, {}"</span><span class="token punctuation">,</span> className<span class="token punctuation">,</span> methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>              redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> proceed<span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方法是手动实现缓存，除此之外还可以使用spring cache，能够更方便的实现缓存，并且也可以更轻易的实现比当前精度更高的缓存处理(这里在清除缓存时，会直接清空整个相关接口的缓存)。</p><h3 id="Redis实现购物车"><a href="#Redis实现购物车" class="headerlink" title="Redis实现购物车"></a>Redis实现购物车</h3><p>购物车方面也是一个可以使用缓存优化的点，目前的操作都是直接操作数据库，会有大量细碎的io，可以将用户对购物车的操作先缓存在内存中，如果用户在时限内完成操作提交订单，那全程都不需要数据库。如果超过某个时限，可以将目前在缓存中的数据先刷入数据库。<br>对于购物车项目采用散列的方式存储，键为食品id，值为序列化后的购物车项目实体，使用cart:id作为命名空间。这里注意的是，<code>RedisTemplate</code>的两个范型在散列中的体现是key和hashkey要属于范型类型，此外如果范型不同，那读取到的数据也会不同。<br>redis添加购物车项目的操作：</p><ol><li>检查redis中是否存储了该项目，如果有就代表只是修改数量</li><li>如果没有存储就将其存入redis<br>这里还额外判断了一下，如果这是该用户首次往购物车存入数据，就添加一个更新数据调度。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@Transactional</span>  <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">addItemRedis</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">ShoppingCart</span> cart<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">AdminUserDetail</span> principal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AdminUserDetail</span><span class="token punctuation">)</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"cart:"</span> <span class="token operator">+</span> principal<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">String</span> foodId <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>cart<span class="token punctuation">.</span><span class="token function">getDishId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> cart<span class="token punctuation">.</span><span class="token function">getDishId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> cart<span class="token punctuation">.</span><span class="token function">getSetmealId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cart<span class="token punctuation">.</span><span class="token function">getSetmealId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SetmealDish</span><span class="token punctuation">&gt;</span></span> setmealDishList <span class="token operator">=</span> setmealDishService<span class="token punctuation">.</span><span class="token function">getSetmeal</span><span class="token punctuation">(</span>cart<span class="token punctuation">.</span><span class="token function">getSetmealId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">SetmealDish</span> setmealDish <span class="token operator">:</span> setmealDishList<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>setmealDish<span class="token punctuation">.</span><span class="token function">getIsDeleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"尝试添加包含停售菜品的套餐, id: {}"</span><span class="token punctuation">,</span> cart<span class="token punctuation">.</span><span class="token function">getSetmealId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"本套餐包含的部分菜品已经停售"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> foodId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">String</span> item <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> foodId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">ShoppingCart</span> sCart <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> <span class="token class-name">ShoppingCart</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          sCart<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span>sCart<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> foodId<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>sCart<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>foodId<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      cart<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cart<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>principal<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cart<span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">addSchedule</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>principal<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> foodId<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>cart<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>foodId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在获取购物车列表时需要判断redis中是否有用户的数据，如果没有，就到数据库中查找并缓存，之后返回查询结果。如果redis中已经缓存过，就直接返回。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">getShoppingListRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">AdminUserDetail</span> principal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AdminUserDetail</span><span class="token punctuation">)</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"cart:"</span> <span class="token operator">+</span> principal<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span>FALSE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">ShoppingCart</span> shoppingCart <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShoppingCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          shoppingCart<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>principal<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShoppingCart</span><span class="token punctuation">&gt;</span></span> shoppingCartList <span class="token operator">=</span> shoppingCartService<span class="token punctuation">.</span><span class="token function">getShoppingCart</span><span class="token punctuation">(</span>shoppingCart<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ShoppingCart</span> cart <span class="token operator">:</span> shoppingCartList<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">String</span> foodId <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>cart<span class="token punctuation">.</span><span class="token function">getDishId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> cart<span class="token punctuation">.</span><span class="token function">getDishId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> cart<span class="token punctuation">.</span><span class="token function">getSetmealId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> foodId<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>cart<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>shoppingCartList<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashKeys <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiGet</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hashKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShoppingCart</span><span class="token punctuation">&gt;</span></span> shoppingCartList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ShoppingCart</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>shoppingCartList<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/sub"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">CommonResult</span> <span class="token function">subItem</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">ShoppingCart</span> cart<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">AdminUserDetail</span> principal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AdminUserDetail</span><span class="token punctuation">)</span> <span class="token class-name">SecurityContextHolder</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"cart:"</span> <span class="token operator">+</span> principal<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">String</span> foodId <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>cart<span class="token punctuation">.</span><span class="token function">getDishId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> cart<span class="token punctuation">.</span><span class="token function">getDishId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> cart<span class="token punctuation">.</span><span class="token function">getSetmealId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> foodId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"用户：{} 尝试删除不在购物车中的商品：{}"</span><span class="token punctuation">,</span> principal<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> foodId<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"购物车中没有该商品"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token class-name">Object</span> item <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> foodId<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">ShoppingCart</span> sCart <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ShoppingCart</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      sCart<span class="token punctuation">.</span><span class="token function">setNumber</span><span class="token punctuation">(</span>sCart<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>sCart<span class="token punctuation">.</span><span class="token function">getNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> foodId<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> foodId<span class="token punctuation">,</span> JSON<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>sCart<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>foodId<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定时将redis中的购物车数据写入磁盘。调度的数据结构为有序集合，成员为用户id，分数为更新数据的时间戳。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 添加更新购物车数据调度 * @param uid 用户id * @param delay 延迟时长 * */</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addSchedule</span><span class="token punctuation">(</span><span class="token class-name">String</span> uid<span class="token punctuation">,</span> <span class="token keyword">int</span> delay<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LocalDateTime</span> next <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">plusMinutes</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ZoneOffset</span> zoneOffset <span class="token operator">=</span> <span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"schedule:"</span><span class="token punctuation">,</span> uid<span class="token punctuation">,</span> next<span class="token punctuation">.</span><span class="token function">toEpochSecond</span><span class="token punctuation">(</span>zoneOffset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加定时任务配置类。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>  <span class="token annotation punctuation">@EnableScheduling</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringTaskConfig</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里选择每隔5秒检查一下redis的存储情况。<br>取出离当前时间最近的调度，如果不存在，或该调度还没有到就直接跳过本轮搜索。<br>如果已到达调度时间，就开始将redis中的数据写入磁盘，完成后向redis存入下一次调度的时间。并继续取出下一个调度。<br>这里在插入数据时需要注意，有一部分数据是更新而非插入。这里通过更新操作的返回值判断是否有对记录造成影响，如果没有就代表是新记录，需要插入。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0/5 * * ? * ?"</span><span class="token punctuation">)</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">flushShoppingCart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ZSetOperations<span class="token punctuation">.</span>TypedTuple</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rangeWithScores</span><span class="token punctuation">(</span><span class="token string">"schedule:"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">ZoneOffset</span> zoneOffset <span class="token operator">=</span> <span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token function">ofHours</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>set <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"开始尝试将购物车信息写入磁盘"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">ZSetOperations<span class="token punctuation">.</span>TypedTuple</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> min <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Double</span> time <span class="token operator">=</span> min<span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>time <span class="token operator">-</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochSecond</span><span class="token punctuation">(</span>zoneOffset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">-</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochSecond</span><span class="token punctuation">(</span>zoneOffset<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token class-name">String</span> uid <span class="token operator">=</span> min<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"将用户：{}的购物车数据写入磁盘"</span><span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>          redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"schedule"</span><span class="token punctuation">,</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">"cart:"</span> <span class="token operator">+</span> uid<span class="token punctuation">;</span>          <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hashKeys <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multiGet</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hashKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShoppingCart</span><span class="token punctuation">&gt;</span></span> shoppingCartList <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>o <span class="token operator">-&gt;</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ShoppingCart</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ShoppingCart</span> cart <span class="token operator">:</span> shoppingCartList<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">int</span> count <span class="token operator">=</span> shoppingCartService<span class="token punctuation">.</span><span class="token function">updateShoppingCart</span><span class="token punctuation">(</span>cart<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  count <span class="token operator">=</span> shoppingCartService<span class="token punctuation">.</span><span class="token function">addShoppingCart</span><span class="token punctuation">(</span>cart<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"购物车信息写入磁盘失败，param: {}"</span><span class="token punctuation">,</span> cart<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BusinessException</span><span class="token punctuation">(</span><span class="token string">"购物车信息写入失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token function">addSchedule</span><span class="token punctuation">(</span>uid<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目实现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2022/08/05/docker/"/>
      <url>/2022/08/05/docker/</url>
      
        <content type="html"><![CDATA[<p>docker 入门</p><span id="more"></span><h1 id="容器技术的诞生"><a href="#容器技术的诞生" class="headerlink" title="容器技术的诞生"></a>容器技术的诞生</h1><p>随着现代软件项目越来越庞大，需要的依赖也变得越来越多，因此不同依赖之间的库/依赖的冲突就变得越来越频繁，调试环境成为了一大难题。而容器诞生便是为了解决环境配置问题，他将不同的依赖库隔离，提供专属于它的适配环境，以此来避免不同依赖运行在同一环境上带来的冲突。<br>和虚拟机相比，容器更多的面向任务，而不掌管操作系统，虚拟机则会真正的控制一个操作系统。</p><h1 id="容器-vs-虚拟机"><a href="#容器-vs-虚拟机" class="headerlink" title="容器 vs. 虚拟机"></a>容器 vs. 虚拟机</h1><p>在虚拟机模型中，首先要开启物理机并启动Hypervisor。Hypervisor之后会占据物理机上的全部物理资源，并将他们划分为虚拟资源。最后将这些资源打包进VM的软件架构中。</p><p>容器模型中，服务器启动之后，OS会启动并占据所有物理资源。OS之上安装了容器引擎，容器引擎可以获取系统资源并将资源分割为安全的互相隔离的资源结构。这个资源结构就是容器。</p><p>从更高层面上来说，虚拟机就是将硬件虚拟化——它将硬件物理资源划分为虚拟资源。而容器则是将操作系统虚拟化——它将系统资源划分为虚拟资源。</p><h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><ol><li>docker run  {name} {cmd}运行指定的容器并执行<em>cmd</em>对应的任务，如果本地没有对应镜像，就前往仓库下载<br>参数：<br>-d：在后台运行<br>-i：以交互模式运行<br>-t：为容器分配一个伪输入终端。<br>-p：指定映射的端口  -p 80:5000将容器的5000端口映射到本机的80端口 -p 80 表示将容器内的80端口映射到本机上的随机路径<br>-v：将docker内的数据映射到外部机器的指定位置，通常用于运行数据库的容器。 -v /opt/dir:/var/lib/mysql<br>-e：设置环境变量<br>–name：给容器命名<br>–restart:设置容器的重启规则 always:总是重启容器 on-failure:在退出代码为非0值时才会自动重启</li><li>docker ps 查看当前正在运行的容器，参数-a可以显示所有容器</li><li>docker stop {name} 停止某容器</li><li>docker rm {name} 删除某容器</li><li>docker images 显示当前本地储存的镜像</li><li>docker rmi {name} 删除指定镜像</li><li>docker pull {name} 拉取指定镜像</li><li>docker exec {name} {cmd} 在容器<em>name</em>执行<em>cmd</em></li><li>docker inspect {name} 获取容器<em>name</em>的详细信息</li><li>docker logs {name} 获取容器<em>name</em>的日志，可以添加参数-f来监控日志</li><li>docker top {name} 获取容器<em>name</em>的所有进程信息</li><li>docker stats {name}… 显式一个或多个容器的统计信息</li></ol><h1 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker compose"></a>Docker compose</h1><p>在需要多个服务相互交互的情况下，我们就需要将不同的容器连接起来<br>docker run –link {target-containter} {container} 运行<em>container</em>并与<em>target-container</em>连接，实现交互。<br>但在有大量服务的情况下，这样做明显费时费力，因此，我们可以使用docker-compose实现服务依赖的管理。<br>docker compose分为3个部分：</p><ul><li>services（服务）：服务定义了容器启动的各项配置，就像我们执行<code>docker run</code>命令时传递的容器启动的参数一样，指定了容器应该如何启动，例如容器的启动参数，容器的镜像和环境变量等。</li><li>networks（网络）：网络定义了容器的网络配置，就像我们执行<code>docker network create</code>命令创建网络配置一样。</li><li>volumes（数据卷）：数据卷定义了容器的卷配置，就像我们执行<code>docker volume create</code>命令创建数据卷一样。<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token key atrule">services</span><span class="token punctuation">:</span><span class="token comment"># 这一级都是容器名称</span><span class="token key atrule">nginx</span><span class="token punctuation">:</span><span class="token comment"># 指定使用的镜像</span><span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token key atrule">work</span><span class="token punctuation">:</span><span class="token comment"># 也可以指定文件夹进行build，然后运行</span><span class="token key atrule">build</span><span class="token punctuation">:</span> ./<span class="token comment"># 指定当前容器依赖的容器</span><span class="token key atrule">depends_on</span><span class="token punctuation">:</span><span class="token comment"># 要定义的环境变量</span><span class="token key atrule">environment</span><span class="token punctuation">:</span><span class="token comment"># 端口映射</span><span class="token key atrule">ports</span><span class="token punctuation">:</span><span class="token key atrule">volumes</span><span class="token punctuation">:</span><span class="token comment"># 指定数据卷</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="Docker-image"><a href="#Docker-image" class="headerlink" title="Docker image"></a>Docker image</h1><p>Docker镜像由文件系统叠加而成。最底端是一个引导文件系统，即bootfs。当一个容器启动之后，它将会被移到内存中，引导文件系统则会被卸载，留出更多的内存供initrd磁盘镜像使用。<br>Docker镜像的第二层是root文件系统即rootfs，它位于引导文件系统之上，rootfs可以是一种或多种OS。<br>在传统Linux引导过程中，root文件系统会最先以只读的方式加载，当引导结束并完成完整性检查之后，他才会切换成读写模式。但是在Docker里，root文件系统永远只能是只读状态，此外，Docker利用联合加载技术又会在root文件系统层上加载更多的只读文件系统。</p><p>联合加载：一次同时加载多个文件系统，它会将各层文件系统叠加到一起，这样最终的文件系统会包含所有底层的文件和目录。</p><p>Docker在创建一个新容器时，会构建出一个镜像栈，并在栈的最顶端添加一个读写层。这个读写层再加上下面的镜像层以及一些配置数据就构成了一个容器。如果我们希望对某个文件进行修改，Docker会利用写时复制(COW)策略将更改应用到读写层当中，而不改变只读层的镜像内容。</p><h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><pre class="line-numbers language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile"># 指定image基于哪一个OS镜像或是基于OS镜像的某个镜像FROM Ubuntu# 在容器中安装需要的依赖RUN apt-get update &amp;&amp; apt-get -y install pythonRUN pip install flask flask-mysql# 拷贝源代码到容器的指定目录中COPY . /opt/source-code# 在指定位置执行命令ENTRYPOINT FLASK_APP=/opt/source-code/app.py flask run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的五个步骤都会被Docker缓存，方便再次build</p><p>docker执行Dockerfile中指令的流程：</p><ol><li>Docker从基础镜像运行一个容器</li><li>执行一条指令，对容器做出修改</li><li>提交一个新的镜像层</li><li>Docker基于刚提交的镜像运行一个新容器</li><li>执行Dockerfile中的下一条指令</li></ol><h4 id="构建缓存"><a href="#构建缓存" class="headerlink" title="构建缓存"></a>构建缓存</h4><p>Docker会将之前的镜像层看作缓存，当再次开启构建时，会将缓存的镜像作为新的开始点。<br>构建缓存带来的一个好处就是，我们可以实现简单的Dockerfile模板，例如在文件顶部使用相同的指令集模板</p><pre class="line-numbers language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">FROM ubuntu:14.04MAINTAINER faustc "xx@qq.com"ENV REFRESHED_AT 2022-10-04RUN apt-get -qq update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在上面这个例子中，如果我们希望刷新apt的缓存，只需要修改环境变量中的日期即可。Docker会发现新的构建请求无法命中缓存，于是开始重新构建镜像。而在大多数时候，Docker都可以命中现有的缓存，大幅提升了效率。<br>不过有的时候要确保构建过程不会使用缓存，此时可以使用–no-cache标志。</p><h4 id="基本命令-1"><a href="#基本命令-1" class="headerlink" title="基本命令"></a>基本命令</h4><ol><li><p>CMD<br>CMD指令用于指定一个容器<em>启动时</em>要运行的命令。有点类似于RUN指令。但RUN指令是指定镜像被构建时要运行的命令，而CMD是指定容器被启动时要运行的命令。<br>推荐使用数组语法来设置要执行的命令 <code>CMD ['command', 'param1', 'param2']</code>，否则Dokcer会在指定的命令之前自动加上/bin/sh -c 这有可能导致意外的错误。<br>ps:在Dockerfile中只能指定一条CMD指令，如果指定了多条CMD指令也只有最后一条会被执行。</p></li><li><p>EntryPoint<br>EntryPoint作用和CMD相近，唯一的区别是，EntryPoint的可执行指令在镜像文件中已经规定好，docker run只能修改指令的参数。<br>同时，在启动容器时附加的参数也会被传递给EntryPoint，交给他来执行。如果我们希望容器启动时可以有一个默认参数，那么就可以将EntryPoint和CMD联合起来使用</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 默认休眠5秒</span><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"sleep"</span>]</span><span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"5"</span>]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>WORKDIR<br>从镜像创建一个新容器时，在容器内部设置一个工作目录，ENTRYPOINT，CMD指定的程序都会在这个目录下执行。</p><pre class="line-numbers language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">WORKDIR /opt/webapp/dbRUN bundle installWORKDIR /opt/webappENTRYPOINT ["rackup"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>上面的实例中，先将工作目录切换为/opt/webapp/db之后运行bundle install，然后将目录切换到/opt/webapp运行ENTRYPOINT的指令。</p></li><li><p>ENV<br>在镜像构建过程中设置环境变量。</p><pre class="line-numbers language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">ENV MYSQL_ROOT_PASSWORD 123456ENV TARGET_DIR /homeWORKDIR $TARGET_DIR<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的实例中将MYSQL的root密码传递到容器中，同时如果要在其他命令中使用定义的环境变量，只需要用${环境变量名} 即可 </p></li><li><p>USER<br>指定镜像会以什么样的用户去运行</p><pre class="line-numbers language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">USER nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>VOLUME<br>VOLUME指令用来向基于镜像创建的容器添加卷。一个卷是可以存在一个或者多个容器内的特定目录，该目录可以提供共享数据或者对数据持久化的功能。</p></li></ol><ul><li>卷可以在容器间共享和重用</li><li>一个容器未必需要和其他容器共享卷</li><li>对卷的修改是实时的</li><li>对卷的修改不会对更新镜像产生影响</li><li>卷会一直存在直到没有任何容器再使用它<pre class="line-numbers language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">VOLUME ["/opt/project"]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>该指令会为基于此镜像创建的任何容器创建一个名为/opt/project的挂载点。</li></ul><ol start="7"><li><p>ADD<br>ADD指令用来将构建环境下的文件和目录复制到镜像中，指向源文件的参数也可以是一个URL。<br>ADD指令会根据目标参数的末尾来判断文件源是目录还是文件，如果以/结尾，就会认为源是一个目录，反之则为文件。<br>初次之外，如果源文件是一个压缩包，ADD还会将它进行解压，并将它放在目标目录下。该指令的输出结果是原目的目录已经存在的内容加上归档文件中的内容。如果已经存在了同名的目录或者文件，不会被覆盖。</p><pre class="line-numbers language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">ADD software.lic /opt/application/software.lic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-ad-tip" data-language="ad-tip"><code class="language-ad-tip">ADD指令会使构建缓存无效，也就是说在ADD指令之后的操作都不会被缓存起来<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>COPY<br>COPY指令与ADD非常相似，区别在于，COPY只关心构建上下文中文件的复制，同时COPY也不会做文件提取和解压。</p><pre class="line-numbers language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">COPY conf.d/ /etc/apache2/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>文件源路径必须是一个与当前构建环境相对的文件或者目录，本地文件都放到与Dockerfile的同一级目录下。由于构建环境会上传到Docker daemon，复制是在daemon中发生的，因此构建环境之外的部分无法被访问。</p></li><li><p>ARG<br>ARG指令用来定义可以在docker build命令运行时传递给构建运行时的变量，只需要在构建时使用 –build-arg 标志即可。用户只能在构建时指定在Dockerfile文件中定义过的参数。</p><pre class="line-numbers language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">ARG build# 默认值为userARG webapp_user=user <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>ps：千万不要使用ARG来传递一些机密信息，因为他们会在构建过程中以及镜像的构建历史中被暴露。</p></li><li><p>ONBUILD<br>这个指令可以为镜像添加触发器。当一个镜像被用作其他镜像的基础镜像时，触发器就会被触发。它最典型的用法就是将用户代码添加到镜像当中。<br>触发器会在构建过程中插入新的指令，一般都是紧跟在FROM之后的</p><pre class="line-numbers language-Dockerfile" data-language="Dockerfile"><code class="language-Dockerfile">ONBUILD ADD . /app/srcONBUILD RUN cd /app/src &amp;&amp; make<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ONBUILD触发器会按照在父镜像中指定的顺序执行，<em>并且只能继承一次，孙子镜像并不会触发触发器</em></p></li></ol><h1 id="Docker-Engine"><a href="#Docker-Engine" class="headerlink" title="Docker Engine"></a>Docker Engine</h1><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img20220729201817.png" alt="Docker Engine结构图"></p><h2 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h2><p>系统会为每一个进程分配一个唯一的pid，也就是说即使运行了一个容器，上面也不可能有相同pid的进程。这时候命名空间就发挥作用了，它可以将容器内部的进程编号隔离开来，不受外部主机影响，发放与外部相同的进程id，但这个id只属于该容器内部，在容器外看到的pid依旧不会与外部进程编号重复。</p><h1 id="Docker-Storage"><a href="#Docker-Storage" class="headerlink" title="Docker Storage"></a>Docker Storage</h1><p>docker在安装之后，会将它所有的数据存储在 /var/lib/docker文件夹下。</p><h2 id="Layer-Architecture"><a href="#Layer-Architecture" class="headerlink" title="Layer Architecture"></a>Layer Architecture</h2><p>docker会以层级结构进行build，其中的每一层都是某一条指令。每一层的操作结果都会被缓存下来，方便复用。整个镜像层都是只读不可更改的。<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/docker20220802092752.png" alt="image layer"></p><p>当容器运行之后，会在镜像层之上再运行一个容器层。这一层的内容都是可读写的，其生存周期等同于该容器的生存周期，当容器被销毁后，里面存储的所有数据也会被销毁。</p><h2 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h2><p>鉴于容器内的数据在容器销毁后无法保存，如果我们需要保存某些数据，就需要使用到数据卷(volume)。<br>创建命令 docker volume create {name}，在/var/lib/docker/volumes下创建一个名为<em>name</em>的数据卷。挂载操作见基本命令第1条。</p><p>默认情况下，Docker创建新卷时采用内置的local驱动，本地卷只能被所在节点的容器使用。使用-d参数可以指定不同的驱动。</p><p>第三方驱动可以作为插件的方式</p><ul><li>块存储：相对性能较高，适用于对小块数据的随机访问负载</li><li>文件存储：包括NFS和SMB协议的系统，在高性能场景下表现优异</li><li>对象存储：较大且长期存储的、很少变更的二进制数据存储。通常对象存储是根据内容寻址，效率较低。</li></ul><h1 id="Docker-Network"><a href="#Docker-Network" class="headerlink" title="Docker Network"></a>Docker Network</h1><p>docker有三种网络模式</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>Host</td><td>容器直接使用宿主机的IP与端口</td></tr><tr><td>Bridge(default)</td><td>此模式会为每一个容器分配、设置IP等，并将容器连接到一个docker0虚拟网桥，通过docker0网桥以及Iptables nat表配置与宿主机通信。</td></tr><tr><td>None</td><td>关闭网络功能</td></tr><tr><td>bridge模式是docker的默认网络模式，他会为每一个容器分配一个独立的network namespace，并将容器连接到docker0虚拟网卡，通过docker0网桥以及Iptables nat表配置与宿主机通信。</td><td></td></tr><tr><td>docker容器间通信不一定需要知道容器的主机地址，也可以直接使用容器名，docker为根据内嵌的DNS，将容器名转换成对应的ip地址，同时使用容器名也可以避免重新启动后ip地址更改带来的麻烦。</td><td></td></tr><tr><td><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/docker/20220805121555.png" alt="bridge模式拓扑"></td><td></td></tr></tbody></table><h2 id="Docker内部连网"><a href="#Docker内部连网" class="headerlink" title="Docker内部连网"></a>Docker内部连网</h2><p>Docker安装后，会创建一个名为docker0的网络接口，每个Docker容器都会在这个接口上分配一个IP地址。<br>接口docker0是一个虚拟的以太网桥，用于连接容器和本地宿主网络。<br>Docker每创建一个容器就会创建一组互联的网络接口，这组接口就像管道的两端，其中一端为容器里的eth0接口，另一端统一命名为类似veth6a这种名字作为宿主机的一个端口。通过将每一个veth*接口绑定到虚拟网桥，Docker创建了一个虚拟子网。</p><h2 id="Docker-Networking"><a href="#Docker-Networking" class="headerlink" title="Docker Networking"></a>Docker Networking</h2><p>Docker networking允许用户创建自己的网络，容器可以通过它来互相通信。最重要的是，现在容器可以跨越不同的宿主机来通信，网络配置也可以更加灵活。<br>创建Docker网络：<code>docker network create {name}</code> 创建一个名为<em>name</em>的网络<br>启动一个容器，并将它连接到指定网络：<code>docker run --net={net_name} {image_name}</code><br>上面的命令会让容器在指定网络内部启动，Docker会感知到所有连接在这个网络上的容器，然后将这些地址保存在/etc/hosts文件当中。之后，只要是连接在网络内的容器，都可以通过容器名获得其他容器的地址。<br>将已有的容器连接到网络中：<code>docker network connect {net_name} {container_name}</code><br>PS:一个容器可以同时隶属于多个Docker网络</p><h2 id="Docker链接"><a href="#Docker链接" class="headerlink" title="Docker链接"></a>Docker链接</h2><p>链接容器需要的参数：–link {container_name}:{alias}。标志创建了两个容器之间的客户-服务链接。该参数需要两个参数一个是容器名，另一个是链接的别名。别名可以让我们一致的访问容器公开的信息，而无需关注底层容器的名字。<br>虽然链接是早期Docker使用的容器通信方式，但即使在当下，他仍具备一些安全上的优势。比如，在启动被链接容器时不需要指定暴露的端口，通过将容器链接在一起，可以让客户容器直接访问服务容器的公开端口。并且，只有通过link链接的容器才能链接到这个端口。<br>最后，Docker在父容器的以下地方写入了链接信息：</p><ul><li>/etc/hosts 文件中</li><li>包含连接信息的环境变量中<br>第一点就不必再多赘述，我们主要介绍下第二点。<br>Docker会在链接时，自动在客户容器中创建以别名开头的环境变量，这些变量包含如下信息：</li><li>服务容器的名字</li><li>容器里运行的服务所使用的协议、IP和端口号</li><li>容器里运行的不同服务所指定的协议、IP和端口号</li><li>容器里由Docker设置的环境变量</li></ul><h2 id="Docker-网络详解"><a href="#Docker-网络详解" class="headerlink" title="Docker 网络详解"></a>Docker 网络详解</h2><h3 id="CNM"><a href="#CNM" class="headerlink" title="CNM"></a>CNM</h3><p>CNM是一个设计标准，规定了Docker网络架构的基础组成要素</p><p>CNM定义了三个基本要素：</p><ol><li>沙盒：一个独立的网络栈</li><li>终端：虚拟网络接口，主要负责创建连接。在CNM中就是由终端将沙盒连接到网络</li><li>网络：802.1d网桥的软件实现</li></ol><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/docker/20230204143126.png"></p><p>沙盒最终会被放在容器内部，用于给容器提供网络功能</p><h3 id="单机桥接网络"><a href="#单机桥接网络" class="headerlink" title="单机桥接网络"></a>单机桥接网络</h3><p>最简单的Docker网络就是单机桥接网络</p><p>单机意味着只能在单个Docker主机上运行，并且只能与所在Docker主机上的容器连接</p><p>桥接代表这是802.1.d网桥的一种实现。</p><p>每个Docker主机都有一个默认的单机桥接网络，如果在创建容器时没有指定连接到的网络，就会将它连接到该网络上去。（这个默认网桥不支持Docker DNS域名解析）</p><h3 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h3><p>服务发现允许处于同一个网络的容器和Swarm服务通过名称互相定位。</p><p>原理：p><ol><li>容器A发起一个请求，请求目标是容器B</li><li>容器首先会调用本地DNS解析器（每个容器都有自己的本地DNS解析器），尝试将容器B名称解析为具体IP地址。如果本地没有缓存该地址，就会向Docker DNS服务器发起一个递归查询</li><li>DNS服务器返回容器名对应的IP地址，容器向该地址发出请求</li></ol><h2 id="覆盖网络"><a href="#覆盖网络" class="headerlink" title="覆盖网络"></a>覆盖网络</h2><p>大多数情况下，我们在单一主机上创建的网络都只能连接该Docker主机上运行的容器，如果我们想要将运行在多个Docker容器上的主机连接起来，就需要使用覆盖网络了。</p><p>创建一个覆盖网络：<code>docker network create -d overlay uber-net</code></p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>Docker使用VXLAN隧道技术构建虚拟二层网络。在VXLAN的设计中，允许用户基于已经存在的三层网络结构创建虚拟的二层网络。</p><blockquote><p>二层网络和三层网络<br>所谓的二层网络和三层网络指的是，该网络包含分层结构中的物理层，链路层，（网络层）。二层网络只能进行子网内的通信，ARP协议只在子网内寻址。而三层网络就是我们平时接触到的网络，利用路由器来跨网通信。</p></blockquote><p>Docker会为每台主机创建一个沙盒（网络命名空间），里面存储了这个容器的网络栈。当我们将两个容器通过覆盖网络连接起来时，沙盒内部会创建一个VTEP（VXLAN隧道终端），其中一端接入到名为Br0的虚拟交换机中，另一端接入主机网络栈。在主机网络栈中的终端从主机所连接的基础网络中获得IP地址。接下来每个容器都会有自己的虚拟以太网（veth）适配器，并接入本地Br0虚拟交换机。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/docker/20230206161321.png"></p><h3 id="通信过程"><a href="#通信过程" class="headerlink" title="通信过程"></a>通信过程</h3><p>当容器A要向容器B发送消息时，请求会从veth接口到达Br0虚拟交换机，如果是首次通信，交换机会借助ARP协议获取请求的目标地址，也就是在子网内广播询问哪个节点知道这个地址，此时VETP会做出响应，交换机就知道这个数据要发送给VETP。</p><p>VETP收到发送过来的数据包后会进行数据帧的封装，也就是将VXLAN Header信息添加到以太帧中。然后将这个数据帧发送给目标主机。</p><h1 id="Docker-swarm"><a href="#Docker-swarm" class="headerlink" title="Docker swarm"></a>Docker swarm</h1><p>docker swarm是用来管理docker集群的平台，它将一群docker主机变成一台虚拟机</p><ul><li><strong>swarm mananger</strong>：负责整个集群的管理工作包括集群配置、服务管理等所有跟集群有关的工作。</li><li><strong>work node</strong>：即图中的 available node，主要负责运行相应的服务来执行任务（task）。<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/docker/20220807101122.png" alt="原理图"></li></ul><p>Swarm的配置和状态信息保存在一套位于所有管理节点上的分布式etcd数据库中，这个数据库运行在内存中，并保持数据的最新状态。</p><p>docker swarm init 初始化管理节点<br>选项：<br><code>--advertise-addr</code> 指定其他节点应用英语连接到当前管理节点的IP和端口<br><code>--listen-adr</code> 指定用于承载Swarm流量的IP和端口</p><p>docker service –replicas=n {container} 在集群中部署n台<em>container</em></p><p>docker node ls 列出Swarm中的所有节点</p><h2 id="Swarm管理器高可用性"><a href="#Swarm管理器高可用性" class="headerlink" title="Swarm管理器高可用性"></a>Swarm管理器高可用性</h2><p>即使swarm中有多个管理节点，但在同一时刻也只有一个节点处于活跃状态，这个节点被称为主节点。主节点也是<strong>唯一一个会发送控制命令</strong>的节点，即使一个从节点收到了控制命令它也会将这个命令转发给主节点</p><h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p>服务是Swarm中专有的概念，服务可配置的东西和容器大体相同。</p><p>当我们要创建服务时可以使用命令：<code>docker service create</code></p><p>在这个命令的可配置项与容器基本相同，除此之外，它还可以指定这个服务的副本数量。服务创建之后，docker就会将服务的副本分发给swarm中的所有节点，此时管理节点也会作为工作节点运行。</p><p>服务启动后，swarm会在后台轮询检查，持续比较服务的实际状态和期望状态是否一致，如果不一致，swarm还会尝试使其一致。例如，如果某个节点宕机了，swarm会尝试启动一个新的副本</p><p><code>docker service ls</code> 可以查看运行中的服务<br><code>docker service ps</code> 可以查看服务副本列表及副本状态<br><code>docker service scale {name}={n}</code> 调整服务的副本数</p><p>Swarm节点网络映射有两种模式：</p><ol><li>Ingress 入站模式<br>这种模式下，Swarm所有节点开放端口，即使节点上没有服务的副本</li><li>Host模式<br>仅在运行有容器副本的节点上开放端口</li></ol><p>使用主机模式的命令比较繁琐，下面是一个例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">service</span> create --name uber-svc <span class="token punctuation">\</span>--network uber-net <span class="token punctuation">\</span>--publish <span class="token assign-left variable">published</span><span class="token operator">=</span><span class="token number">80</span>, <span class="token assign-left variable">target</span><span class="token operator">=</span><span class="token number">80</span>, <span class="token assign-left variable">mode</span><span class="token operator">=</span>host <span class="token punctuation">\</span>--replicas <span class="token number">12</span> <span class="token punctuation">\</span><span class="token punctuation">{</span>image<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>swarm还支持滚动更新，下面是一个例子</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">service</span> update <span class="token punctuation">\</span>--image nigelpoulton/tu-demo:v2 <span class="token punctuation">\</span>--update-parallelism <span class="token number">2</span> <span class="token punctuation">\</span>--update-delay 20s uber-svc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个命令会每隔20s将swarm中的两个容器的镜像更新为v2版本</p><h1 id="Docker-Stack"><a href="#Docker-Stack" class="headerlink" title="Docker Stack"></a>Docker Stack</h1><p>Docker Stack提供多服务部署和管理的功能。它能够在单个文件中定义复杂的多服务应用，并且提供了简单的方式来部署应用并管理其完整的生命周期：初始化部署 &gt; 健康检查 &gt; 扩容 &gt; 更新 &gt; 回滚</p><p>接下来我们会用这个<a href="https://github.com/dockersamples/atsea-sample-shop-app/blob/master/docker-stack.yml">示例文件</a>讲解Stack用法</p><p>这个文件中定义了3个网络</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">front-tier</span><span class="token punctuation">:</span>  <span class="token key atrule">back-tier</span><span class="token punctuation">:</span>  <span class="token key atrule">payment</span><span class="token punctuation">:</span>    <span class="token key atrule">driver</span><span class="token punctuation">:</span> overlay    <span class="token key atrule">driver_opts</span><span class="token punctuation">:</span>      <span class="token key atrule">encrypted</span><span class="token punctuation">:</span> <span class="token string">'yes'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中payment网络比较特殊，它对数据层进行了加密，至于原因，显而易见。所有要通过该覆盖网络的数据在发送之前都会被进行加密。</p><p>这里还定义了4个密钥</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">secrets</span><span class="token punctuation">:</span>  <span class="token key atrule">postgres_password</span><span class="token punctuation">:</span>    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">staging_token</span><span class="token punctuation">:</span>    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">revprox_key</span><span class="token punctuation">:</span>    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">revprox_cert</span><span class="token punctuation">:</span>    <span class="token key atrule">external</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中external参数表明，这些密钥都是在部署之前就已经在Docker主机上存在的。</p><p>以上都是部署之前的准备，对一个应用来说，最重要的还是服务，下面来看一下服务的定义。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">reverse_proxy</span><span class="token punctuation">:</span><span class="token key atrule">image</span><span class="token punctuation">:</span> dockersamples/atseasampleshopapp_reverse_proxy<span class="token key atrule">ports</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token string">"80:80"</span><span class="token punctuation">-</span> <span class="token string">"443:443"</span><span class="token key atrule">secrets</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">source</span><span class="token punctuation">:</span> revprox_cert  <span class="token key atrule">target</span><span class="token punctuation">:</span> revprox_cert<span class="token punctuation">-</span> <span class="token key atrule">source</span><span class="token punctuation">:</span> revprox_key  <span class="token key atrule">target</span><span class="token punctuation">:</span> revprox_key<span class="token key atrule">networks</span><span class="token punctuation">:</span><span class="token punctuation">-</span> front<span class="token punctuation">-</span>tier<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>image</code>关键字是必选项，Stack不像Compose那样可以支持构建，在部署Stack之前，所有的image都必须是构建好的。</p><p><code>ports</code>创建了两个端口映射，默认情况下采用的是Ingress模式。</p><p><code>secrets</code>关键字中定义了两个密钥，他们会以普通文件的形式被挂载到服务副本中，文件的名称就是target的值。他们的路径为<code>/run/secrets</code></p><p>下面来看看数据库服务的定义</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">database</span><span class="token punctuation">:</span><span class="token key atrule">image</span><span class="token punctuation">:</span> dockersamples/atsea_db<span class="token key atrule">environment</span><span class="token punctuation">:</span><span class="token key atrule">POSTGRES_USER</span><span class="token punctuation">:</span> gordonuser<span class="token key atrule">POSTGRES_DB_PASSWORD_FILE</span><span class="token punctuation">:</span> /run/secrets/postgres_password<span class="token key atrule">POSTGRES_DB</span><span class="token punctuation">:</span> atsea<span class="token key atrule">networks</span><span class="token punctuation">:</span><span class="token punctuation">-</span> back<span class="token punctuation">-</span>tier<span class="token key atrule">secrets</span><span class="token punctuation">:</span><span class="token punctuation">-</span> postgres_password<span class="token key atrule">deploy</span><span class="token punctuation">:</span><span class="token key atrule">placement</span><span class="token punctuation">:</span><span class="token key atrule">constraints</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token string">'node.role == worker'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大体上和反向代理的配置相同，不过多了部署配置，它要求这个服务的副本必须运行在worker节点上。</p><p>部署约束是一种拓扑感知定时任务，是一种很好的优化调度选择的方式，Swarm目前允许通过如下几种方式进行调度。</p><ol><li>节点id node.id==abcd</li><li>节点名称 node.hostname==abcd</li><li>节点角色 node.role != manager</li><li>节点引擎标签 engine.labels.operatingsystem==ubuntu20.04</li><li>节点自定义标签 node.labels.zone == prod1</li></ol><p>接下来是appserver服务，它对部署进行了更多的配置</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">appserver</span><span class="token punctuation">:</span><span class="token key atrule">image</span><span class="token punctuation">:</span> dockersamples/atsea_app<span class="token key atrule">networks</span><span class="token punctuation">:</span><span class="token punctuation">-</span> front<span class="token punctuation">-</span>tier<span class="token punctuation">-</span> back<span class="token punctuation">-</span>tier<span class="token punctuation">-</span> payment<span class="token key atrule">deploy</span><span class="token punctuation">:</span><span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token key atrule">update_config</span><span class="token punctuation">:</span><span class="token key atrule">parallelism</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token key atrule">failure_action</span><span class="token punctuation">:</span> rollback<span class="token key atrule">placement</span><span class="token punctuation">:</span><span class="token key atrule">constraints</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token string">'node.role == worker'</span><span class="token key atrule">restart_policy</span><span class="token punctuation">:</span><span class="token key atrule">condition</span><span class="token punctuation">:</span> on<span class="token punctuation">-</span>failure<span class="token key atrule">delay</span><span class="token punctuation">:</span> 5s<span class="token key atrule">max_attempts</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token key atrule">window</span><span class="token punctuation">:</span> 120s<span class="token key atrule">secrets</span><span class="token punctuation">:</span><span class="token punctuation">-</span> postgres_password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里要求服务在集群中部署两个服务副本，并配置了滚动升级。</p><p>如果服务崩溃，尝试重新启动，每次重启最多等待120s，最大尝试次数为3</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">payment_gateway</span><span class="token punctuation">:</span><span class="token key atrule">image</span><span class="token punctuation">:</span> dockersamples/atseasampleshopapp_payment_gateway<span class="token key atrule">secrets</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">source</span><span class="token punctuation">:</span> staging_token  <span class="token key atrule">target</span><span class="token punctuation">:</span> payment_token<span class="token key atrule">networks</span><span class="token punctuation">:</span><span class="token punctuation">-</span> payment<span class="token key atrule">deploy</span><span class="token punctuation">:</span><span class="token key atrule">update_config</span><span class="token punctuation">:</span><span class="token key atrule">failure_action</span><span class="token punctuation">:</span> rollback<span class="token key atrule">placement</span><span class="token punctuation">:</span><span class="token key atrule">constraints</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token string">'node.role == worker'</span>  <span class="token punctuation">-</span> <span class="token string">'node.labels.pcidss == yes'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后是支付网关，它配置的部署约束是，这个服务的副本部署的节点必须具有<code>pcidss=yes</code>的标签</p><blockquote><p>Docker Stack 常用命令</p></blockquote><p>Docker Stack很多命令都和Swarm通用，这里只介绍一些不同的</p><p><code>docker stack deploy -c {stack file} {app name}</code> 部署应用</p><p><code>docker stack ls</code> 列出系统中全部stack</p><p><code>docker stack ps</code> 查询指定stack的详细信息</p><p><code>docker stack rm</code> 删除指定的stack</p><p>PS：更新stack一定不要使用API直接修改服务配置信息，这会导致服务实际配置与stack文件不一致，后期如果再次使用stack文件更新，会导致配置回滚。推荐的做法是，修改stack中的配置，然后使用部署命令更新配置。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Remake | 数据库</title>
      <link href="/2022/08/02/Database/"/>
      <url>/2022/08/02/Database/</url>
      
        <content type="html"><![CDATA[<p>菜狗的Remake之路 – 数据库篇</p><span id="more"></span><h1 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h1><h2 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h2><h3 id="Grammar"><a href="#Grammar" class="headerlink" title="Grammar"></a>Grammar</h3><p>sql描述的是我需要什么，而非怎么做。底层交给DBMS实现。</p><blockquote><p>limit</p></blockquote><p>limit [Integer]</p><p>查找表中前Integer条记录。通常与orderby一同使用。</p><blockquote><p>group by</p></blockquote><p>将表切分成多个组，并以表为单位进行相关操作。</p><p>group by不允许直接查询非group by参数的字段。</p><p>re: group by会将许多记录作为整体操作，但非group by参数字段在分类后其数量在同一组中也势必&gt;=1 无法成为一个整体被反映到表中，因此不被允许。</p><p>所有的聚合函数都需要针对一个组来使用，如果不显式指明，则整张表作为一个组。</p><p>Having对查询出的组根据给定条件进行过滤。</p><blockquote><p>like</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">WHERE</span> xxx <span class="token operator">LIKE</span> <span class="token string">'B_%'</span><span class="token comment">-- _ means any character. % means any number of that character</span><span class="token comment">-- Regular expression</span><span class="token comment">-- ~ means match</span><span class="token keyword">WHERE</span> xxx <span class="token operator">~</span> <span class="token string">'B.*'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>集合运算</p></blockquote><p>UNION: 取并集</p><p>INTERSECT: 取交集</p><p>EXCEPT: 取差集</p><p>加上ALL代表显示重复值。</p><blockquote><p>view</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">view</span> view_name<span class="token keyword">as</span> select_statement<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>临时视图</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> bname<span class="token punctuation">,</span> scount<span class="token keyword">FROM</span> Boats2 B<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span> B<span class="token punctuation">.</span>bid<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token keyword">FROM</span> R<span class="token punctuation">.</span>bid <span class="token operator">=</span> B<span class="token punctuation">.</span>bid <span class="token operator">AND</span> B<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span>    <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> b<span class="token punctuation">.</span>bid<span class="token punctuation">)</span> <span class="token keyword">AS</span> Reds<span class="token punctuation">(</span>bid<span class="token punctuation">,</span> scount<span class="token punctuation">)</span><span class="token keyword">WHERE</span> Reds<span class="token punctuation">.</span>bid <span class="token operator">=</span> B<span class="token punctuation">.</span>bid <span class="token operator">AND</span> scount <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token keyword">WITH</span> tablename<span class="token punctuation">(</span><span class="token keyword">columns</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> <span class="token punctuation">(</span>select_statement<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h3><blockquote><p>SQL执行流程</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> target<span class="token operator">-</span>list<span class="token keyword">FROM</span> single <span class="token keyword">table</span><span class="token keyword">WHERE</span> qualification<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> grouping list<span class="token keyword">HAVING</span> <span class="token keyword">group</span><span class="token operator">-</span>qualification<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>FROM  确认要查询的表</li><li>WHERE  筛选满足条件的记录</li><li>SELECT  保留所需要(出现在SELECT/GROUP BY/ HAVING)的字段</li><li>GROUP BY  形成需要的组</li><li>HAVING  筛选满足条件的组</li><li>DISTINCT  去除冗余的记录</li></ol><blockquote><p>Division</p></blockquote><p> 查找拥有所有船只的船员 ==&gt;  查找没有哪艘船不持有的船员</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> s<span class="token punctuation">.</span>sname<span class="token keyword">from</span> Sailors s<span class="token keyword">where</span> <span class="token operator">not</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> B<span class="token punctuation">.</span>bid    <span class="token keyword">from</span> Boats b    <span class="token keyword">where</span> <span class="token operator">not</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span>    <span class="token keyword">select</span> R<span class="token punctuation">.</span>id        <span class="token keyword">where</span> R<span class="token punctuation">.</span>bid <span class="token operator">=</span> B<span class="token punctuation">.</span>bid        <span class="token operator">And</span> R<span class="token punctuation">.</span>sid <span class="token operator">=</span> S<span class="token punctuation">.</span>sid    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>NULL</p></blockquote><p>NULL代表<strong>不确定</strong></p><p>所有与NULL直接进行判定的操作都被判为False</p><p>聚合函数会忽略其所有操作的字段中的NULL值</p><h2 id="Hardware"><a href="#Hardware" class="headerlink" title="Hardware"></a>Hardware</h2><h3 id="Disk"><a href="#Disk" class="headerlink" title="Disk"></a>Disk</h3><p>访问的方式不是通过指针解除引用，而是借助API</p><p>READ：将一页数据从磁盘移到内存中，然后通过内存的地址对磁盘进行访问</p><p>WRITE：将一页数据从内存写入磁盘</p><p>注意API调用的速度都非常慢，需要良好的规划。</p><blockquote><p>访问一个页的时间消耗</p></blockquote><p>查找：磁盘臂将磁头定位到目标位置</p><p>旋转延迟：等待目标数据块旋转到磁头下</p><p>传输时间：将数据从磁盘读取到内存</p><p>主要的IO时间消耗在查找和旋转延迟上</p><blockquote><p>预测行为</p></blockquote><p>缓存访问次数多的数据块</p><p>提前将很有可能被访问的数据提取到内存中</p><p>若要写入的是连续的数据块，则可以先进行缓存，最后一并写入。</p><blockquote><p>磁盘中数据块的组织</p></blockquote><p>Next block concept：</p><ul><li>在同一磁道上连续的数据块</li><li>在同一磁盘上的数据块</li><li>在相邻磁盘上的数据块</li></ul><p>因此可以将文件的数据块在磁盘上连续存储，来介绍查询和旋转延迟</p><p>对于顺序的扫描，就可以做到提前提取，一次读取大量连续的数据块（一次性将文件的大部分提取到内存中）</p><h3 id="Files"><a href="#Files" class="headerlink" title="Files"></a>Files</h3><p>表会被存储为逻辑文件，由数据块构成，每个数据块中都存储一系列记录</p><blockquote><p> DB File Structures</p></blockquote><ol><li><p>Unordered Heap Files</p><p>记录在页中随意存放，适用于经常查询所有记录的情况</p></li><li><p>Clustered Heap Files</p><p>记录和页被分组存放</p></li><li><p>Sorted Files</p><p>记录和页按某一顺序存放</p></li><li><p>Index Files</p><p>可能会包含指向其他文件中记录的索引</p></li></ol><h3 id="Page"><a href="#Page" class="headerlink" title="Page"></a>Page</h3><p>Header会包含：</p><ol><li>记录数量</li><li>空余的空间</li><li>可能会有指向下一个元素的指针</li><li>可能会有Bitmaps</li></ol><blockquote><p>布局</p></blockquote><p>方向：</p><ul><li><p>记录数量（定长还是变长）</p></li><li><p>是否打包</p></li></ul><p>定长：</p><ol><li><p>打包</p><p>让记录稠密分布，类似链表的形式。</p><p>Record id = (pageId, record number in page)</p><p>添加元素十分容易，但删除需要重组数据，让后面的数据填补被删数据的空白。</p></li></ol><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/image-20220528161445934.png" alt="稠密布局"></p><ol start="2"><li><p>不打包</p><p>在头部添加bitmaps，标记每个存储单元的存储情况</p><p>在插入时只要寻找首个还没被标记的存储单元即可</p><p>删除时只需要清除bitmaps中对应的位即可</p></li></ol><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/image-20220528161648072.png" alt="稀疏布局"></p><p>变长：</p><p>在page的底部维护一个slot directory，第一个元素（从右往左）为记录的个数，第二个为指向首个空地址的指针，其余位置放置各个记录的id。</p><p>插入元素时，只需要直接插入第二个指针指向的存储单元，并用一个闲置槽记录新纪录的id即可</p><p>删除元素时，回收对应的存储单元，并清除对应id所在的槽。</p><p>删除会导致page中出现不连续的空闲空间，此时可以对其进行再分配，也可以等剩余连续空间用完后再清理。</p><p>而当page大小需要变化时，例如page需要扩容，则直接在slot directory的最后添加记录id即可（从右往左看）</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/image-20220528163256111.png" alt="变长布局"></p><h3 id="Record"><a href="#Record" class="headerlink" title="Record"></a>Record</h3><p>关系模型</p><p>每条记录都有一些固定的类型</p><p>不将类型信息存储在记录中而是放在系统目录中，以此节省空间，</p><blockquote><p>定长</p></blockquote><p>在一个文件中，所有记录中字段的类型都是一致的</p><p>在内存和磁盘中字节的表现形式一致。</p><blockquote><p>变长</p></blockquote><p>将变长的字段放在尾部，添加一个记录头，其中存储指向变长字段的指针以及长度</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/image-20220530094616356.png" alt="变长字段结构"></p><h3 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h3><p>索引是一种数据结构，利用search key实现对data entry的快速查找和修改</p><p>查找操作需要支持许多类型的操作，例如比较时需要考虑一维还是二维比较</p><p>search key可以是表字段的任意子集，并且不一定要是unique键，也可以是某具有唯一性的复合属性</p><p>data entry:存储在索引中的条目</p><h4 id="ISAM"><a href="#ISAM" class="headerlink" title="ISAM"></a>ISAM</h4><p>最简单的做法：对存储键值的文件使用二分查找。但因为有跨页中断，因此效率一般</p><p>改进：再多加一层连接不同的page，将其作为查找树的根节点。节点本身的键值起到标识左右子树范围的作用。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/image-20220530150809929.png" alt="ISAM原理图"></p><p>压缩：每个内部节点的最左边的值可以被省略。</p><p>插入：在指定位置插入对应节点，可能需要重新排序。如果插入后会超出原先能容纳的数据量，则会再开辟一块Overflow pages存储，被逻辑连接到最后一块页数据之后。随着超出数据量的增多，查找速度会逐步退化成线性。</p><h4 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B+ Tree"></a>B+ Tree</h4><p>结构与ISAM类似, 节点存储&lt;Key, Page Ptr&gt;</p><p>但B+树可以实现动态索引，保持树永远是平衡的，并且支持更高效的插入和删除，因为增长都体现在根节点而非叶子节点。</p><p>约束条件：</p><ol><li>每一个<strong>内部结点</strong>至少被填满一半，d &lt;= #entry &lt;= 2d</li><li>d称为B树的阶数，结点最大扇出数为2d+1</li></ol><p>B+树的叶子结点之间必须做逻辑连接，因为他不像ISAM一样在物理层面就连在一起，但这也方便它进行动态分配。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/image-20220531192910950.png" alt="B+树原理图"></p><p>插入操作：</p><p>查找到新数据应在的叶子结点</p><ol><li><p>若该结点未满：直接将其存入，并重新排序</p></li><li><p>若该结点已满：分裂当前结点，建立一个新的结点，将现有的2d+1个数据中较小的d个拷贝进一个结点1，另一部分拷贝进另一个结点2。然后将结点2中最小的数据拷贝一份传入父节点中。若父节点已满重复上述步骤。</p><p>如果要向新的索引结点传递数据，则直接推入，而非拷贝。</p><p>re：对于B+树来说，所有的数据都存在叶子结点，因此必须在叶子结点保留相关数据，而其对应的值则可以传到索引结点起到划分域的作用。</p></li></ol><p>大规模插入操作：</p><p>将要插入的数据按照键先进行排序，然后直接向叶子结点插入数据，超出可容纳个数时就进行分裂，确保每一个叶子结点中的数据量都达到插入因子。这样和反复的插入相比节省了大量IO时间，已经完成装载的部分不会被算法考虑，节省时间。</p><p>索引结构需要考虑的问题</p><ol><li>支持的查询</li><li>Search key的选择</li><li>数据的存储方式</li><li>变长键的处理</li><li>性能消耗</li></ol><h4 id="Search-Key-and-Ordering"><a href="#Search-Key-and-Ordering" class="headerlink" title="Search Key and Ordering"></a>Search Key and Ordering</h4><p>在一个有序的索引中，它的键都会按照字典序排列</p><p>字典序：先比较search key中的第一个字段，若相等，继续比较第二个字段，以此类推。</p><p>一个复合查询键的格式：整个查询由m个等值比较与一个大小比较(必须放在最后)构成。哦</p><h4 id="Data-Entry-Storage"><a href="#Data-Entry-Storage" class="headerlink" title="Data Entry Storage"></a>Data Entry Storage</h4><p>数据在索引中的存储方式：</p><ol><li>值</li><li>单一引用</li><li>引用链表（当数据量很大时，单一引用的存储方式会分裂出大量的索引记录）</li></ol><p>如果存储引用，则必须能支持多索引查询，否则就需要为每个索引都建立一个索引文件，导致数据冗余，加大修改数据的难度。</p><p>Clustered vs. Unclustered Index</p><p>聚合索引会根据search key确保索引<em>大致有序</em>(并不要求绝对顺序)</p><p>因此聚合索引往往能提供比较好的查询性能。同时顺序的磁盘访问也有助于进行类似prefetching之类的优化工作，并且也方便进行压缩操作。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/image-20220602203353495.png" alt="聚合索引 vs. 非聚合索引"></p><p>对于聚合索引，它在查询时要涉及的页明显少于非聚合索引。</p><p>但聚合索引的维护成本相对较高，并且由于其在初始插入时会预留1/3空间给之后的插入操作，会带来一定的空间浪费。</p><p>Variable Length Keys &amp; Records</p><p>当字段为变长时，顺序就失去了意义（难以比较），不同的结点会存储不同长度的条目。与此同时，不同索引存储的记录引用个数也会产生较大的差距，不利于高效查询。</p><p>因此针对变长的字段，我们在要求填充超过半数时，是从字节数的角度进行衡量。</p><p>键后缀压缩</p><p>提取记录中键的最小前缀放在头部，然后将剩余部分链接上去。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/image-20220602205107634.png" alt="键后缀压缩"></p><p>适用于复合键，且首个属性个体差异不大，之后的属性差异较大。</p><h2 id="Buffer-Management"><a href="#Buffer-Management" class="headerlink" title="Buffer Management"></a>Buffer Management</h2><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/image-20220608222913582.png" alt="缓冲区结构"></p><p>当上层向缓存发起请求时，缓存会先在内部查找有没有需要的数据页，如果有，直接返回，如果没有，从磁盘读取到缓存，然后返回。</p><p>脏页：在缓存中有数据被修改，但还没有刷入内存的数据页</p><p>处理方式：用一个dirty bit标识当前页是否是脏页。</p><table><thead><tr><th>FrameId</th><th>PageId</th><th>Dirty?</th><th>Pin count</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td></tr></tbody></table><p>Pin count显示当前有多少任务在使用该缓存</p><h3 id="Replacement-Policy"><a href="#Replacement-Policy" class="headerlink" title="Replacement Policy"></a>Replacement Policy</h3><p>替换策略：</p><p>Least-recently-used(LRU), Clock</p><p>Most-recently-used(MRU)</p><p>根据访问的数据特征选择</p><h4 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h4><p>替换原则：挑选当前不被使用的，且在近期都没有被使用的数据页替换</p><p>方法：在缓存池的结构中添加一个记录上一次使用截止期的字段</p><table><thead><tr><th>FrameId</th><th>PageId</th><th>Dirty?</th><th>Pin count</th><th>Last used</th></tr></thead><tbody><tr><td>1</td><td></td><td></td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td></td></tr><tr><td>3</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>优势：对于部分数据需要被频繁访问的情况很友好</p><p>劣势：找到最不受待见的数据页需要线性时间（可以用堆优化到对数级）</p><h4 id="Clock"><a href="#Clock" class="headerlink" title="Clock"></a>Clock</h4><p>一种类LRU策略，用一个指针依次扫描缓存池中的Frame，在结构中添加一个字段表示是否为最近访问的字段。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/image-20220608224724744.png" alt="Clock"></p><p>若指向的页正在被使用，直接跳过。若指向的页ref bits为1，且没有被使用，则将ref bits置为0。若某页既没有被使用，ref bits也为0，则将它替换下来。</p><p>Clock替换掉的仅仅是当前不热门的数据，而LRU会替换掉最不热门的数据，因此Clock相对来说开销会小一点。</p><p>但LRU类型的策略在面对大型数据时都存在致命缺陷:</p><p>当数据页的数量超过了缓存池的大小时，缓存命中率会直接降为0。考虑文件长度为7页，缓存池大小为6页，读取前6页时都在填充缓存池，当读取到第7页时，会将第1页踢掉。若下一步是再次读取第1页，则又需要讲第1页重新从磁盘读入缓存。LRU会将后续马上要用到的数据踢出缓存，大大降低了效率。</p><h4 id="MRU"><a href="#MRU" class="headerlink" title="MRU"></a>MRU</h4><p>当MRU处理大型文件时，第一轮与LRU无异。但在处理第7页数据时，它会踢掉最近使用的，也就是第6页。之后再次读取第1页时就会命中缓存，平均每次读取缓存命中次数为B - (N-B)。因此当文件过大时，命中次数也会下降。</p><p>综上：LRU在随机读取，涉及热门程度的数据的读取上占据优势。MRU在重复读取上占据优势。DBMS会根据查询数据特征选择相对优秀的策略。</p><h3 id="DBMS-vs-OS-Buffer-Cache"><a href="#DBMS-vs-OS-Buffer-Cache" class="headerlink" title="DBMS vs OS Buffer Cache"></a>DBMS vs OS Buffer Cache</h3><p>OS不会管理数据库的缓存</p><p>re：</p><ol><li>不同OS支持的操作不相同，但都会支持DBMS，因此放在DBMS上具备更好的适配性</li><li>OS只能识别物理层面上的连续的数据页，而DBMS可以根据其索引，例如B+树叶子结点的兄弟属性来识别逻辑上连续的数据页，能够更好的进行类似pre-fetching的操作。</li><li>OS无法强制让数据刷入磁盘。</li></ol><h2 id="Sorting-and-Hashing"><a href="#Sorting-and-Hashing" class="headerlink" title="Sorting and Hashing"></a>Sorting and Hashing</h2><h3 id="out-of-core-algorithm"><a href="#out-of-core-algorithm" class="headerlink" title="out-of-core algorithm"></a>out-of-core algorithm</h3><h4 id="Single-passing-Streaming"><a href="#Single-passing-Streaming" class="headerlink" title="Single passing Streaming"></a>Single passing Streaming</h4><p>利用函数f(x)将记录映射为另一个值。</p><p>尽可能地减少RAM的使用（映射函数需要让产出的结果占用空间小于其对应的记录），降低IO使用率。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/image-20220611220459995.png" alt="单缓冲"></p><h4 id="Double-Buffer"><a href="#Double-Buffer" class="headerlink" title="Double Buffer"></a>Double Buffer</h4><p>主线程利用一对输入输出缓冲区进行常规的映射操作。</p><p>另加一个IO线程，向目前没有使用的输入输出缓冲区填充/释放数据。</p><p>当主线程完成操作，等待缓冲区时，直接交换缓冲区。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/image-20220611220755064.png" alt="双缓冲"></p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/image-20220611220804636.png" alt="双缓冲(翻转后)"></p><h4 id="2-Way"><a href="#2-Way" class="headerlink" title="2-Way"></a>2-Way</h4><p>Pass 0：</p><p>读取一个数据页，排序并写入。</p><p>只使用一个缓冲区。</p><p>重复类似步骤，将整个文件包含的数据页写入，并保证每一页有序。</p><p>Pass 1，2，3 …:</p><p>至少需要3个缓冲区（假设每个缓冲区的大小为一个数据页）</p><p>将两个输入缓冲区的数据进行归并排序传给输出缓冲区。</p><blockquote><p>2-Way External sort</p></blockquote><p>拥有&gt;3个缓冲区</p><p>Pass 0:</p><p>使用B个缓冲区，每次导入B页数据，总共需要N/B（上取）个runs，每一个runs里运行一个排序进程。</p><p>Pass 1：</p><p>每个runs的数据长度为B，本轮可以进行B-1个runs的归并</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/image-20220611224041793.png" alt="2路外部归并流程"></p><p>因此在Pass 1可以完成B(B-1) pages数据的排序。</p><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><p>将数据分批读取到内存中，在进行hash操作。</p><p>两步骤：</p><ol><li><p>Divide</p><p>使用哈希函数hp将记录流传递到指定的磁盘分区</p><p>满足匹配条件的都处在同一分区，确保具有同样特征的值不会在内存中被不同的哈希表计算（去除冗余）。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/image-20220611230629236.png" alt="磁盘内分块"></p></li><li><p>Conquer</p><p>利用哈希函数hr，将分区读取到RAM的hash表中</p><p>然后读取桶中的数据，并将它们回写到磁盘中</p></li></ol><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/image-20220611230641780.png" alt="内存中哈希"></p><p>若划分之后的数据块还是很大，则进行递归划分操作，满足条件后再进行Conquer。</p><h2 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h2><h3 id="关系操作符和查询规划"><a href="#关系操作符和查询规划" class="headerlink" title="关系操作符和查询规划"></a>关系操作符和查询规划</h3><p>假设有一查询<br>$$<br>𝜋_{sname}(𝜋_{sid}(𝜋_{bid}(𝜎_{color}=’red’(Boats)) ⋈ Res) ⋈ Sailors)<br>$$<br>则其对应的数据流图为</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/database20220630213659.png"></p><p>其中每一条边都代表数据的流向</p><p>结点代表关系运算符</p><p>源代表某个关系</p><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>对于每一个关系运算符要做的操作都会有一个对应的迭代器。筛选传入数据流中符合条件的元素，再传递到下一个操作的迭代器中。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> iterator <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Iterator</span><span class="token punctuation">&gt;</span></span> inputs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    tuple <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>init和next操作可以采取流式或批量算法</p><p>流式：每次调用只有少量，有限的工作。</p><p>批量：每次执行一系列的工作，在完成之前不会产生输出。</p><h4 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h4><pre class="line-numbers language-none"><code class="language-none">init(predicate):     child.init()    pred = predicate;    current = NULL;next():     while (current != EOF &amp;&amp; !pred(current))        current = child.next();    return current; close():     child.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先初始化自己的子结点，并装配断言</p><p>next():不断循环直至到达文件末尾或是当前字段满足断言条件</p><h4 id="Heap-Scan"><a href="#Heap-Scan" class="headerlink" title="Heap Scan"></a>Heap Scan</h4><p>该迭代器不可能有孩子，因为其处于最底层，负责从磁盘中读取指定关系的数据。</p><pre class="line-numbers language-none"><code class="language-none">init(relation):     heap = open heap file for this relation;    cur_page = heap.first_page(); // first page    cur_slot = cur_page.first_slot(); // first slot on that page    next():     if (cur_page == NULL) return EOF;  // End Of Fun    current = [cur_page, cur_slot]; // we will return this recordId    // advance the slot    cur_slot = cur_slot.next();    if (cur_slot == NULL) {      // advance to next page, first slot      cur_page = cur_page.next();      if (cur_page != NULL)         cur_slot = cur_page.first_slot();    }    return current;     close(): heap.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Sort"><a href="#Sort" class="headerlink" title="Sort"></a>Sort</h4><pre class="line-numbers language-none"><code class="language-none">init(keys):                // all of pass 0 in init, a blocking call    child.init()    repeatedly call child.next() and generate the sorted runs on disk, until child gives EOF    // set up for pass 1, assumes enough buffers to merge    open each sorted run file and load into input buffer for pass 1    next():              // pass 1 (assumes enough buffers to merge)    output = min tuple across all buffers    if min tuple was last one in its buffer, fetch next page from that run into buffer    return output (or EOF -- “End of Fun” -- if no tuples remain)close():     deallocate the runs files    child.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先初始化所有的子节点，确保他们以及准备好了下一步操作。然后获取子节点的所有数据，并照上一章所讲的排序方法进行第0轮排序。完成后将所有的数据载入缓冲区进行归并。</p><h4 id="Group-By"><a href="#Group-By" class="headerlink" title="Group By"></a>Group By</h4><pre class="line-numbers language-none"><code class="language-none">init(group_keys, aggs):    child.init()    cur_group = NULL;next():    result = NULL    do {        tup = child.next();        if (group(tup) != cur_group) { // New group!            if (cur_group != NULL)     // Form a result for current group                result = [cur_group, final() of all aggs]            cur_group = group(tup);            call init() on all the aggs        }         call merge(tup) on all the aggs     } while (!result);    return result;close():child.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种实现方式的前提是已经完成排序。初始化参数是要分组的键和聚合函数</p><p>next()操作：</p><p>不断获取下一个数据，直到遇见不同组的数据</p><p>当碰到新的某一组数据，且不是碰到的第一个组时，宣告本轮分组完成，结果包含当前组以及聚合函数的结果。若是碰到的第一个组，就获取对应分组并开始聚合函数的计算。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/database20220630221951.png"></p><p>以上就是一个完整的查询流程。整个过程都不需要将输出的数据存储到磁盘。所有迭代器的操作结果都会作为上一层的参数继续参与运算，元组流只需要留存在栈中。</p><h2 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h2><h3 id="Simple-Nested-Loop-Join"><a href="#Simple-Nested-Loop-Join" class="headerlink" title="Simple Nested-Loop Join"></a>Simple Nested-Loop Join</h3><p>简单嵌套循环，每次循环从驱动表中读取一行数据，然后扫描一遍被驱动表，添加满足条件的数据。</p><p>假设驱动表R有1000张数据页，每一页有100条数据</p><p>被驱动表S有500张数据页，每一页有80条数据</p><p>则开销为：</p><p>扫描一遍驱动表要1000次IO(IO操作的单位为数据页而非记录)，而对于R中每一条记录，都要扫描一遍S表，IO次数为100000 * 500</p><p>PS：若S为驱动表，开销为500 + 40000 * 1000，相对减少500次IO</p><h3 id="Page-Nested-Loop-Join"><a href="#Page-Nested-Loop-Join" class="headerlink" title="Page Nested-Loop Join"></a>Page Nested-Loop Join</h3><p>和SNL相比，每次从驱动表中获取一页数据，然后从被驱动表获取一页数据。将获取的两页数据先进行一次Join操作。</p><p>此时开销降低为 1000 + 1000 * 500(R为驱动表)</p><p>演化：Chunk Nested-Loop Join</p><p>一次IO从驱动表中获取几页数据，其余操作同上。</p><p>开销可降低为 1000 + (1000 / N) * 500 N为一次性获取的页数，一般为缓冲区数-2</p><h3 id="Index-Nested-Loop-Join"><a href="#Index-Nested-Loop-Join" class="headerlink" title="Index Nested-Loop Join"></a>Index Nested-Loop Join</h3><p>驱动表在拿到数据后，直接根据关联字段的索引进行查找。和上述的方法相比，该方法每从驱动表取出一条记录，都只要去查询被驱动表的索引，查询次数为索引的高度。</p><p>开销为：驱动表页数 + 驱动表记录数 * 索引树高度</p><h3 id="Sort-Merge-Join"><a href="#Sort-Merge-Join" class="headerlink" title="Sort-Merge Join"></a>Sort-Merge Join</h3><p>条件：有相同字段(自然连接)或指定的判定条件</p><p>步骤：</p><ol><li>将驱动表和被驱动表按照join key排序</li><li>归并扫描排序后的表并提取出满足条件的元组</li></ol><pre class="line-numbers language-C" data-language="C"><code class="language-C">do {  if (!mark) {    while (r &lt; s) { advance r }    while (r &gt; s) { advance s }    // mark start of “block” of S    mark = s  }  if (r == s) {    result = &lt;r, s&gt;    advance s    return result  }  else {    reset s to mark    advance r    mark = NULL  }} while(r)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开销：R和S排序的IO开销，加上归并时，读取一遍R和S的开销</p><h3 id="Grace-Hash-Join"><a href="#Grace-Hash-Join" class="headerlink" title="Grace Hash Join"></a>Grace Hash Join</h3><p>与SNL的区别仅为预处理阶段。</p><p>将R表映射到B-1个分区，每个分区的页数都&lt;=B-2，然后将R表的各个分区都读进内存建立哈希映射，然后将S表读入并进行匹配。</p><p>以上的做法会导致磁盘扫描次数过多，无法起到减小开销的目的。</p><p>Grace Hash Join的操作：</p><ol><li>将两张表按照同一个哈希函数分配到不同的分片中，得到B-1个分区，每个分区由两张表组成Ri,Sj(R和S的子表)</li><li>针对每一个分区，将一张表读入内存，建立哈希表，然后读取另一张表进行匹配。</li></ol><p>如果分区后仍然无法装入内存，则递归进行进一步分区。</p><h2 id="Parallel-Query"><a href="#Parallel-Query" class="headerlink" title="Parallel Query"></a>Parallel Query</h2><h3 id="并行架构"><a href="#并行架构" class="headerlink" title="并行架构"></a>并行架构</h3><ol><li><p>共享内存</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/database20220709152532.png"></p></li><li><p>共享磁盘</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/database20220709152604.png"></p></li><li><p>无共享</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/database20220709152629.png"></p></li></ol><p>本章主要介绍无共享架构的数据库。</p><h3 id="并行的种类"><a href="#并行的种类" class="headerlink" title="并行的种类"></a>并行的种类</h3><ol><li><p>Intra-query parallel</p><p>不同的线程执行某一个单一的查询</p></li><li><p>Inter-query parallel</p><p>单个或多个线程执行许多不同的查询或事务。</p></li></ol><h3 id="数据划分"><a href="#数据划分" class="headerlink" title="数据划分"></a>数据划分</h3><p>由于无共享数据库中的数据分散在不同的机器，因此良好的划分策略可以大幅提升检索效率。</p><ol><li><p>Range</p><p>所有的数据根据范围分布到不同的存储器上。适合做等值连接，范围查询，分组。</p></li><li><p>Hash</p><p>通过哈希确定数据所处的分组。适合等值连接，分组。</p></li><li><p>Round-Robin</p><p>轮询策略，可以有效地分散负载。</p></li></ol><p>Lookup by key</p><p>如果数据依据键分布，则可以直接检索到相关的结点。(Range, Hash)</p><p>否则就必须广播查询所有的结点。(Round Robin)</p><p>插入键值或有唯一性约束的键也类似。</p><h3 id="Parallel-Join"><a href="#Parallel-Join" class="headerlink" title="Parallel Join"></a>Parallel Join</h3><h4 id="Parallel-Grace-Hash-Join"><a href="#Parallel-Grace-Hash-Join" class="headerlink" title="Parallel Grace Hash Join"></a>Parallel Grace Hash Join</h4><ol><li>首先将所有的数据利用哈希函数hn，分布到不同的机器上去。</li><li>等到第1步完成后，每台机器都在本机对得到的数据进行进一步的Hash操作。</li><li>每台机器完成Hash后，进行 GHJ</li></ol><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/database20220709163827.png"></p><p>整个过程只有第一步需要机器等待数据分发完毕，其他时刻都不存在等待，因此效率会比较高。</p><h4 id="Parallel-Sort-Merge-Join"><a href="#Parallel-Sort-Merge-Join" class="headerlink" title="Parallel Sort-Merge Join"></a>Parallel Sort-Merge Join</h4><p>Pass 0：将数据按照范围传送到指定的机器上去。</p><p>范围选取方式：根据输入获取样本，并根据每个范围内的数据量进行分割。如下图所示，频率高的区间，范围小，确保数据在每台机器上平均分布。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/database20220709165057.png"></p><p>Pass 1：在每台机器上进行Sort-Merge Join操作</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/database20220709165303.png"></p><h4 id="Symmetric-Hash-join"><a href="#Symmetric-Hash-join" class="headerlink" title="Symmetric Hash join"></a>Symmetric Hash join</h4><p>无论是Hash join还是Sort Merge Join都有一个等待同步的过程。但Symmetric Hash Join可以做到整个Join过程没有任何等待，且全程只需要流式传输。</p><p>这种Join方式让每台机器都为驱动表和被驱动表各维护一张哈希表，每当一个数据到来，就将其添加到对应表的哈希表中，然后让该数据去探索另一张表的哈希表，寻找可以匹配的记录并输出。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/database20220709171615.png"></p><h4 id="One-side-shuffle-Join"><a href="#One-side-shuffle-Join" class="headerlink" title="One-side shuffle Join"></a>One-side shuffle Join</h4><p>如果R表本身已经被合理地划分了，就只划分S表，然后在每台机器上进行join并合并结果。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/database20220709172320.png"></p><h4 id="Broadcast-Join"><a href="#Broadcast-Join" class="headerlink" title="Broadcast Join"></a>Broadcast Join</h4><p>如果R表很小，那就将它传送给每一个获得S表分块的机器上</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/database20220709172436.png"></p><h3 id="Query-Optimization"><a href="#Query-Optimization" class="headerlink" title="Query Optimization"></a>Query Optimization</h3><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/database20220710154252.png"></p><blockquote><p>Query parser</p></blockquote><p>检查SQL语句正确性，并鉴权。</p><p>生成语法树</p><blockquote><p>Query rewriter</p></blockquote><p>将查询转换为规范格式：</p><ul><li>扁平视图</li><li>将子查询分解为更少的查询块</li></ul><h4 id="优化手段"><a href="#优化手段" class="headerlink" title="优化手段"></a>优化手段</h4><ol><li><p>选择操作：在获得了相关的字段之后，就先对其进行选择操作。使得进入之后操作的数据量减少。</p><p>需要注意的是，如果是提前被驱动表的选择操作，则对IO不会有什么提升。在进行join操作时，每次驱动表发起探索，都要去提取整个被驱动表，不会减少被驱动表要检索的记录数。但放在驱动表前可以有效减少参与探索的记录数。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/database20220710160112.png"></p></li><li><p>投影操作：只保留下流操作需要用到的字段。使得单个record变小，page能存下更多record。</p></li><li><p>两表连接时，选择需要发起探索的记录数少的表作为驱动表。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/database20220710160152.png"></p></li><li><p>物化临时表到内存中：上文提到被驱动表提前进行选择操作无优化作用的原因是每次都会重新提取一整张被驱动表。但如果在做完选择操作后，将该临时表物化到内存中，就可以让驱动表与该临时表进行join，大大减少要探索的记录数。</p><p><img src="C:\Users\Faust\AppData\Roaming\Typora\typora-user-images\image-20220710160212176.png" alt="image-20220710160212176"></p></li><li><p>选取更加高效的Join算法。</p></li><li><p>只考虑使用左深树，即每次join的结果都作为左表，新加入的表作为右表。使得join操作可以流水线式操作，中途不需要将临时表物化进内存，减少物化带来的额外io开销。</p></li></ol><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/database20220714152230.png"></p><h2 id="DB-Design"><a href="#DB-Design" class="headerlink" title="DB Design"></a>DB Design</h2><h3 id="ER-Models"><a href="#ER-Models" class="headerlink" title="ER Models"></a>ER Models</h3><p>Data Model：描述数据定义的概念集合<br>Schema：基于使用数据模型，对特定一组数据集合的描述</p><blockquote><p>Levels  of  Abstraction </p></blockquote><p>External  schema：描述用户看到的数据<br>Conceptul schema：设计逻辑结构<br>Physical schema：描述文件和索引的使用</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/database/20220720144434.png"></p><blockquote><p>key constraints</p></blockquote><p>键约束，持有键约束的实体类，代表它的每一个对象在对应的关系中至多参与一次，也就是说该实体类在1-many中为many的一方。<br>箭头代表该实体在这个关系中持有键约束。<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/database/20220720145316.png"></p><blockquote><p>participation constraints</p></blockquote><p>参与约束，描述某一个实体在该关系中是全部参与(不可为null)还是部分参与，将连接实体与关系的线加粗代表该实体在本关系中全部参与。</p><blockquote><p>弱实体</p></blockquote><p>一个弱实体只能借助其依赖的强实体的主键标识。其具备如下特征：</p><ul><li>对应的强实体和弱实体必须构成一对多关系。</li><li>弱实体必须是全部参与</li><li>弱实体可以包含部分键，用来进一步唯一标识该弱实体。<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/database/20220720152706.png"></li></ul><p>Aggregation<br>允许某一个关系成为另一个关系的参与者。<br>例如，下图表示员工监管部门对项目的投资。<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/database/20220720154642.png"></p><h3 id="FDs-and-normalization"><a href="#FDs-and-normalization" class="headerlink" title="FDs and normalization"></a>FDs and normalization</h3><p>函数依赖的定义：若有X -&gt; Y (-&gt;可以读作决定)，则当X相等时，Y必然相等。</p><p>关键术语：</p><ol><li>超键：一系列决定表中所有字段的字段集合。</li><li>候选键：决定表中所有字段的最小字段集合。</li><li>主键：被选取的某个候选键。</li><li>索引键：用于索引的某个键（与本章探讨的内容无关）</li></ol><p>表中存在对非键属性的依赖存在的问题（数据冗余）</p><ol><li>更新：每次更新必须对涉及的所有元组进行修改，否则会导致数据不一致。</li><li>插入：若插入时依赖的属性错误或不确定就会破坏数据一致性。</li><li>删除：如果删除了非键属性特定值的记录，那么我们就会失去该属性对应的指定值。例如：r=5 -&gt; y=7，若删除r=5的所有记录，则我们会丢失r=5时y的值。<br>但对键的依赖不会导致数据冗余，因为键本身具备唯一性。</li></ol><h4 id="Decomposition"><a href="#Decomposition" class="headerlink" title="Decomposition"></a>Decomposition</h4><p>分解可能导致的问题</p><ol><li>可能导致原始关系无法重建(破坏性的分解)。</li><li>依赖的检查可能会需要join。</li><li>一些查询可能会变的非常昂贵。<br>以上是在分解时需要考虑的问题，分解带来的好处是否能够超过上述问题带来的弊端。</li></ol><h5 id="Lossless-Join-Decomposition"><a href="#Lossless-Join-Decomposition" class="headerlink" title="Lossless Join Decomposition"></a>Lossless Join Decomposition</h5><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/database/20220720171607.png" alt="破坏性的分解"></p><p>无损的分解：如果将关系R分解为X和Y，对于每一个满足函数依赖F的实例r，都要求$π_x(r) ⋈ π_y(r) = r$。<br>通俗来说就是要求，分解后作为拼接两个关系的字段，必须能唯一标识某一张表中其余被拆分的信息。例如，本例中将ABC -&gt; AB和BC，就要求B能够唯一标识A或C，在本例中明显做不到。如果我们使用将其拆分成AC和BC，则可以达成这个目标，但就会导致另一个问题，A-&gt;B这个函数依赖没有被保存在任何一个拆分后的关系中，也就是每次检查该依赖都要进行join，这就引出了另一个问题：保留依赖的分解。</p><h5 id="Dependency-Preserving-Decomposition"><a href="#Dependency-Preserving-Decomposition" class="headerlink" title="Dependency Preserving Decomposition"></a>Dependency Preserving Decomposition</h5><p>保留依赖的分解，要求分解后每一个关系中函数依赖的并集等于原先的函数依赖集合（简单理解）。这就要求每一次分解之后，每一个函数依赖涉及的字段必须存在同一张表中。</p><p>eg. BCNF的分解<br>对任意违反BCNF的函数依赖X-&gt;Y，都可以将其分解为R-Y和，XY，其中X可以唯一标识Y，因此一定是无损依赖。<br>但是未必可以做到保留函数依赖，例如R={C,S,Z}, F={CS -&gt; Z, Z-&gt;C}(切分一个首尾相连的结构必然破坏其结构特性)。</p><h2 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h2><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>事务是一系列操作组成的工作单元，该工作单元内的操作是不可分割的，即要么所有操作都做，要么所有操作都不做，这就是事务。</p><h4 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a>ACID</h4><p>automic:原子性，事务中的操作要么全部执行，要么都不执行<br>Consistency:一致性，事务应当维护数据库的完整性约束<br>Isolation:隔离性，并行的事务不应当相互影响<br>Durability:持久性，事务一旦被提交，所产生的更改是永久性的</p><h4 id="可串行化"><a href="#可串行化" class="headerlink" title="可串行化"></a>可串行化</h4><p>并行出现问题的最明显特征：针对某一数据A，事务1的读取发生在事务2的写入之前，而写入发生在之后（如果事务1仅仅做读取操作，则不会有问题）。</p><p>可串行化调度：如果一段并行调度产生的结果和串行调度产生的结果一致，则称为可串行化调度。</p><p>冲突可串行化调度：在可串行化调度的基础上，满足交换没有冲突的操作可以变成串行调度。</p><p>冲突：</p><ol><li>在同一事务中的对同一数据的所有操作都相互冲突。</li><li>在不同事务间，对同一数据的读写，写写操作冲突。</li></ol><h4 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h4><h5 id="两段锁协议"><a href="#两段锁协议" class="headerlink" title="两段锁协议"></a>两段锁协议</h5><p>共享锁：事务获取该锁后得到读取权限<br>互斥锁：事务获取该锁后得到读写权限</p><p>两个阶段<br>获取锁阶段：取得事务需要的所有锁，期间不能释放锁<br>释放锁阶段：释放之前获取的所有锁，期间不能获得新的锁</p><p>问题：普通的两段锁协议不能处理事务回滚导致的一致性被破坏</p><p>严格两段锁协议：只有在事务提交之后锁才被允许释放</p><p>更加严格的协议：获取的锁都为互斥锁</p><h5 id="多粒度锁"><a href="#多粒度锁" class="headerlink" title="多粒度锁"></a>多粒度锁</h5><p>我们可以将锁针对的对象大小称为锁的粒度，细粒度的锁可以帮助实现更加高效的并发，但相对的我们要创建大量的锁来确保对数据的精确操控，需要的空间更多。粗粒度锁虽然不能对数据进行细致的操作，但是相对来说它的数量并不需要太多，占用的空间更小。<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/database/20220721155144.png" alt="不同粒度锁组成的树状结构"></p><h5 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h5><p>当某个事务获取指定一个结点的锁时，它将隐式地锁定该节点的所有子节点。意向锁协议便是为了解决这个问题。<br>在本协议中，多了3中额外的锁：</p><ol><li>IS：代表有意向获取共享锁的意向锁。</li><li>IX：代表有意向获取互斥锁的意向锁。</li><li>SIX：同时获取共享锁和IX。这类锁主要用于更新，既要读取结点的内容，又要表现出修改的意向。<br>在本协议中，如果想要锁定某一个结点，则必须获取该结点所有父节点对应类型的意向锁。</li></ol><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/database/20220721160700.png" alt="锁之间的互斥性"></p><h4 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h4><p>数据库恢复只要为了维护原子性，持久性，以及回滚某些破坏一致性的事务。</p><h5 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h5><p>No Steal Policy：不允许缓冲池中还未提交的脏页被页面置换算法替换。可以达成原子性，但由于未提交的脏页会长久待在缓冲池中，会拖慢效率。<br>Force Policy：在提交事务之前，确保所有的更新都已经被刷入数据库。可以达成持久性，但会产生随机琐碎的IO，也会拖慢运行效率。<br>以上两者虽然很好的维护了各自对应的特性，但是对系统性能的消耗较大，并且也没有真正意义地达成原子性（批量提交的构成中可能出现崩溃），因此现在更倾向于使用下面两种策略。<br>No Force：和强制策略想反，它的问题是系统可能在事务提交后崩溃，导致缓存中的修改丢失。但我们也因此可以在事务提交前，减少IO开销，同时可以通过redo操作来维护数据的持久性。<br>Steal：这种策略会允许脏页被提前刷入磁盘，空出缓冲区。它的问题是，系统可能会在事务提交前崩溃，事务也有可能在提交前被终止。对此我们可以利用undo来维护原子性。</p><p>上面提到的redo和undo，可以通过日志来实现</p><h5 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h5><blockquote><p>Write-Ahead log</p></blockquote><p>数据被写入磁盘前，其对应的日志必须先被写入磁盘。</p><p>每一个日志记录都会有一个属于自己的唯一编号，在RAM中有一个顺序文件，记录log，当日志编号达到了指定的flushLSN时，就将日志记录刷入磁盘。<br>每一个数据页也都有一个pageLSN，指向最近的一个涉及该数据页更新的记录。<br>同时日志也有一个prevLSN字段，指向当前事务的上一条日志记录。因此，每个事务的所有记录操作合起来可以看作一条链表。<br>    在内存中有两张与内存有关的表</p><ol><li><p>Transaction table</p><table><thead><tr><th>XID</th><th>Status</th><th>LastLSN</th></tr></thead><tbody><tr><td>1</td><td>R</td><td>33</td></tr><tr><td>2</td><td>C</td><td>42</td></tr></tbody></table></li><li><p>Dirty Page</p><table><thead><tr><th>PageID</th><th>recLSN</th></tr></thead><tbody><tr><td>46</td><td>11</td></tr><tr><td>recLSN：首个更新该表的日志编号</td><td></td></tr></tbody></table></li></ol><p>Undo Log: 在操作任何数据之前，先将原始数据拷贝一份，系统可以在崩溃后利用它恢复宕机前的状态。<br>Undo Log可以保持事务的原子性和持久性，若事务提交阶段宕机，则数据库可以依据日志恢复，若在此之前宕机则数据库内仍旧为原先的数据。<br>缺陷：每次事务提交都需要IO操作，但如果添加缓存会破坏持久性</p><p>redo Log: 更改数据时，保留更改后的数据。<br>redo log让事务提交后修改的数据可以暂时缓存在内存中而非直接提交。若事务崩溃，可以根据redo log还原事务</p><h5 id="崩溃恢复"><a href="#崩溃恢复" class="headerlink" title="崩溃恢复"></a>崩溃恢复</h5><p>三步骤：</p><ol><li>分析：检查哪些事务在检查点前已经提交，哪些没有提交。<br>从检查点开始往前查看日志，对于已经有End标识的事务，将其从事务表移除。对于有Update标记且不在脏表记录中的数据页，将其添加到相应记录中。当分析结束后，事务表中剩下的都是在崩溃时仍在活跃的事务，脏表记录中都是可能没有将数据更新到磁盘中的数据页。</li><li>Redo：重复所有的操作。但有部分情况不需要重复。1. 受影响的表不在Dirty Page Table中，这代表涉及该表的更改已经全部写入磁盘。2. 受影响的表在Dirty Page Table中，但recLSN &gt; LSN，这说明该表的更新发生在记录点之后，需要舍弃，因此无需重做。 3. pageLSN &gt;= LSN，理由同上一条。</li><li>Undo：撤销所有没有成功提交的事务。对于简单事务回滚，每回滚一条就记录一条CLR日志，CLR日志的作用是防止多次回滚。同时CLR日志还有一个额外字段指向下一条回滚日志，即日志记录中的 prevLSN。<pre class="line-numbers language-python" data-language="python"><code class="language-python">toUndo <span class="token operator">=</span> <span class="token punctuation">{</span>lastLSNs of <span class="token builtin">all</span> Xacts <span class="token keyword">in</span> the Xact Table<span class="token punctuation">}</span><span class="token keyword">while</span> !toUndo<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>thisLR <span class="token operator">=</span> toUndo<span class="token punctuation">.</span>find_and_remove_largest_LSN<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> thisLR<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">==</span> CLR<span class="token punctuation">:</span><span class="token keyword">if</span> thisLR<span class="token punctuation">.</span>undoNextLSN <span class="token operator">!=</span> NULL<span class="token punctuation">:</span>toUndo<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>thisLR<span class="token punctuation">.</span>undonextLSN<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token operator">//</span> thisLR<span class="token punctuation">.</span>undonextLSN <span class="token operator">==</span> NULL write an End record <span class="token keyword">for</span> thisLR<span class="token punctuation">.</span>xid <span class="token keyword">in</span> the log<span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token keyword">if</span> thisLR<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">==</span> UPDATE<span class="token punctuation">:</span>  write a CLR <span class="token keyword">for</span> the undo <span class="token keyword">in</span> the log undo the update <span class="token keyword">in</span> the database<span class="token keyword">if</span> thisLR<span class="token punctuation">.</span>prevLSN <span class="token operator">!=</span> NULL<span class="token punctuation">:</span>toUndo<span class="token punctuation">.</span>insert<span class="token punctuation">(</span>thisLR<span class="token punctuation">.</span>prevLSN<span class="token punctuation">)</span><span class="token keyword">elif</span> thisLR<span class="token punctuation">.</span>prevLSN <span class="token operator">==</span> NULL<span class="token punctuation">:</span>write an END record <span class="token keyword">for</span> thisLR<span class="token punctuation">.</span>xid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="Distributed-transactions"><a href="#Distributed-transactions" class="headerlink" title="Distributed transactions"></a>Distributed transactions</h2><p>分布式事务本质上属于 share-nothing prallel</p><h3 id="锁的分配"><a href="#锁的分配" class="headerlink" title="锁的分配"></a>锁的分配</h3><p>一种典型的设计就是：根据数据的分区分配锁。这样每一个结点(数据页/元组)可以管理它自己的lock表，对于粗粒度锁，因为它很有可能涉及跨分区锁定，因此我们专门给它分配一种home锁。</p><p>通过这种锁分配机制，可以简洁高效的管理锁，但死锁和commit/abort的问题依旧没有解决。<br>死锁的处理在此不多赘述，主要记录一下分布式提交的理解。</p><h3 id="Distributed-Commit：2PC"><a href="#Distributed-Commit：2PC" class="headerlink" title="Distributed Commit：2PC"></a>Distributed Commit：2PC</h3><p>分布式系统的一大特点就是不同步，但如果我们希望提交某一个事务，那必然需要涉及的所有结点都已经准备好了提交，通俗来讲就是，想提交某个事务必须得到所有相关人士的同意。也就是类似投票的机制。<br>在面对信息传输延迟/失败的情况下，我们就需要2 Phase Commit来实现分布式投票。<br>在阶段1中，协调者会询问所有的结点是否准备好了投票/提交事务。</p><ol><li>协调者询问结点是否已就绪。</li><li>参与者生成prepare/abort记录，并将其写入磁盘。</li><li>参与者返回自己是否参与投票的应答。</li><li>协调者生成提交记录(如果结点都同意)，并写入磁盘。</li></ol><p>在阶段2中，协调者就会根据投票结果选择对事务的操作，并将其广播。</p><ol><li>协调者广播投票结果。</li><li>参与者生成有关结果的记录，并写入磁盘。</li><li>参与者返回一个ack。</li><li>协调者生成一个end记录，并写入磁盘，标志该事务完成操作。<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/database/20220802152520.png" alt="2PC时序图"></li></ol><h3 id="Failure-handling"><a href="#Failure-handling" class="headerlink" title="Failure handling"></a>Failure handling</h3><p>如果协调者发现有参与者发生了故障：</p><ul><li>如果该参与者还没有参与投票，那就将该事务抛弃。</li><li>如果已经参与了投票，那就交给恢复操作处理。<br>如果参与者发现协调者发生故障：</li><li>如果还没有打prepare日志，就单方面拒绝。</li><li>否则交给恢复过程处理。</li></ul><p>分析阶段操作：</p><ul><li>参与者：检测到prepare log时，将状态调整为commiting，让恢复进程询问协调者当前的状态，如果协调者响应了，就正常处理commit/abort。</li><li>检测到Commit/Abort log后，将状态做出对于的修改，让恢复进程将状态信息发送给参与者，一旦所有的参与者都确认收到，就写入End记录。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Remake </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rookie db</title>
      <link href="/2022/07/05/rookie-db/"/>
      <url>/2022/07/05/rookie-db/</url>
      
        <content type="html"><![CDATA[<h1 id="Rookie-DB-实现"><a href="#Rookie-DB-实现" class="headerlink" title="Rookie DB 实现"></a>Rookie DB 实现</h1><p>cs186 project实现<br>评价：这个project强度有点高，略微有些折磨。</p><span id="more"></span><h2 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B+ Tree"></a>B+ Tree</h2><h3 id="Task-1-LeafNode-fromBytes"><a href="#Task-1-LeafNode-fromBytes" class="headerlink" title="Task 1: LeafNode::fromBytes"></a>Task 1: LeafNode::fromBytes</h3><p>本题要实现将叶子节点的信息从字节流中读取出来，首先阅读<code>LeafNode::toBytes</code>了解叶子节点的字节流构成</p><ol><li>第1个字节用于表示结点类型，如果为1，代表该结点是叶子节点。</li><li>之后8个字节用于表示右兄弟结点的page id，如果为-1则表示没有兄弟结点。</li><li>然后4个字节用于表示该结点中的记录数</li><li>之后的所有字节用于表示每条记录的信息。<br>只要按照以上顺序将信息解释出来即可。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">LeafNode</span> <span class="token function">fromBytes</span><span class="token punctuation">(</span><span class="token class-name">BPlusTreeMetadata</span> metadata<span class="token punctuation">,</span> <span class="token class-name">BufferManager</span> bufferManager<span class="token punctuation">,</span>                                     <span class="token class-name">LockContext</span> treeContext<span class="token punctuation">,</span> <span class="token keyword">long</span> pageNum<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO(proj2): implement</span><span class="token comment">// Note: LeafNode has two constructors. To implement fromBytes be sure to</span><span class="token comment">// use the constructor that reuses an existing page instead of fetching a</span><span class="token comment">// brand new one.</span><span class="token class-name">Page</span> page <span class="token operator">=</span> bufferManager<span class="token punctuation">.</span><span class="token function">fetchPage</span><span class="token punctuation">(</span>treeContext<span class="token punctuation">,</span> pageNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Buffer</span> buf <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">byte</span> nodeType <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">assert</span> <span class="token punctuation">(</span>nodeType <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> rightSibling <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> size <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataBox</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RecordId</span><span class="token punctuation">&gt;</span></span> rids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>keys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">DataBox</span><span class="token punctuation">.</span><span class="token function">fromBytes</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> metadata<span class="token punctuation">.</span><span class="token function">getKeySchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">RecordId</span><span class="token punctuation">.</span><span class="token function">fromBytes</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LeafNode</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> bufferManager<span class="token punctuation">,</span> page<span class="token punctuation">,</span> keys<span class="token punctuation">,</span> rids<span class="token punctuation">,</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>rightSibling <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> rightSibling<span class="token punctuation">)</span><span class="token punctuation">,</span> treeContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="Task-2-get-getLeftmostLeaf-put-remove"><a href="#Task-2-get-getLeftmostLeaf-put-remove" class="headerlink" title="Task 2: get, getLeftmostLeaf, put, remove"></a>Task 2: get, getLeftmostLeaf, put, remove</h3><p>接下来就是实现<code>LeafNode</code>, <code>InnerNode</code>, and <code>BPlusTree</code>的基本方法</p><h4 id="LeafNode"><a href="#LeafNode" class="headerlink" title="LeafNode"></a>LeafNode</h4><p>首先从最简单的叶子结点入手，对与叶子结点来说，无论是get还是getLeftmostLeaf都只要返回自身</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">LeafNode</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">DataBox</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// See BPlusNode.getLeftmostLeaf.</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">LeafNode</span> <span class="token function">getLeftmostLeaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>put()</code>的执行逻辑大体上为：首先将传入的键值对插入有序数组中的对应位置。如果插入完成后数组的大小 &lt; 2d (d表示B+树结点大小的一半)，则直接返回。否则就要进行扩容操作。<br>扩容：将数组对半分成两份，第一份的大小为d，第二份为d+1，第一份的数据仍然保留在当前结点。将第二份的数据存入新建的结点中，并将该新结点作为当前结点的右兄弟。最后返回右兄弟结点中的第一条记录，用于上一级结点做范围划分。<br>注意这里调用的构造方法应当创建一个全新的叶子结点，而非上一问中创建指定数据页的叶子结点。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">DataBox</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">DataBox</span> key<span class="token punctuation">,</span> <span class="token class-name">RecordId</span> rid<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO(proj2): implement</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BPlusTreeException</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> d <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">InnerNode</span><span class="token punctuation">.</span><span class="token function">numLessThanEqual</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> keys<span class="token punctuation">)</span><span class="token punctuation">;</span>keys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>rids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> rid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token operator">*</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataBox</span><span class="token punctuation">&gt;</span></span> leftKeys <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RecordId</span><span class="token punctuation">&gt;</span></span> leftRids <span class="token operator">=</span> rids<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataBox</span><span class="token punctuation">&gt;</span></span> rightKeys <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RecordId</span><span class="token punctuation">&gt;</span></span> rightRids <span class="token operator">=</span> rids<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>d<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LeafNode</span> right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeafNode</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> bufferManager<span class="token punctuation">,</span> rightKeys<span class="token punctuation">,</span> rightRids<span class="token punctuation">,</span> rightSibling<span class="token punctuation">,</span> treeContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>keys <span class="token operator">=</span> leftKeys<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>rids <span class="token operator">=</span> leftRids<span class="token punctuation">;</span>rightSibling <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataBox</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>rightKeys<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> right<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>remove()</code>执行逻辑也非常简单，只要找到记录在数组中的位置然后删除即可。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">DataBox</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RecordId</span><span class="token punctuation">&gt;</span></span> r <span class="token operator">=</span> <span class="token function">getKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// TODO(proj2): implement</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">InnerNode</span><span class="token punctuation">.</span><span class="token function">numLessThan</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> keys<span class="token punctuation">)</span><span class="token punctuation">;</span>keys<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>rids<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="InnerNode"><a href="#InnerNode" class="headerlink" title="InnerNode"></a>InnerNode</h4><p>接下来处理内部结点的基本方法。<br><code>get()</code>方法需要先根据传入的key，找出该key位于哪一棵子树，然后对子树递归调用get方法直到抵达叶子节点并返回。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">LeafNode</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">DataBox</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO(proj2): implement</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">numLessThanEqual</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> keys<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BPlusNode</span> child <span class="token operator">=</span> <span class="token function">getChild</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> child<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>getLeftmostLeaf()</code>则是获取首个子树(即最左边的子树)然后递归调用<code>getLeftmostLeaf()</code>方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">LeafNode</span> <span class="token function">getLeftmostLeaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">assert</span><span class="token punctuation">(</span>children<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">getChild</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLeftmostLeaf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>put()</code>方法首先要获取传入的参数要插入在哪一棵子树，然后递归调用<code>put</code>。如果返回值为空，则代表底层没有做扩容操作，直接返回。否则就要将返回的参数插入结点维护的数组，并扩充子结点。<br>这里的扩容操作与叶子结点大体上没有区别，唯一要注意的是，结点分裂时将数组拆成[0, d-1]，[d+1, 2d]两部分，第d条记录作为本次分裂的返回值。re：叶子节点中存储的是真实的记录信息，不能丢弃，而上层结点的记录都是用于范围锁定，交给上层可以节省空间。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">DataBox</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">DataBox</span> key<span class="token punctuation">,</span> <span class="token class-name">RecordId</span> rid<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO(proj2): implement</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">numLessThanEqual</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> keys<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">BPlusNode</span> child <span class="token operator">=</span> <span class="token function">getChild</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">DataBox</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> op <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> rid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">DataBox</span> newKey <span class="token operator">=</span> op<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Long</span> newPage <span class="token operator">=</span> op<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> d <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>keys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> newKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回的是右边的孩子，因此要放置在索引的右侧</span>children<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> newPage<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token operator">*</span>d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">split</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">DataBox</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataBox</span><span class="token punctuation">&gt;</span></span> leftKeys <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataBox</span><span class="token punctuation">&gt;</span></span> rightKeys <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> leftChildren <span class="token operator">=</span> children<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> rightChildren <span class="token operator">=</span> children<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> d <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DataBox</span> retKey <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InnerNode</span> right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerNode</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> bufferManager<span class="token punctuation">,</span> rightKeys<span class="token punctuation">,</span> rightChildren<span class="token punctuation">,</span> treeContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>keys <span class="token operator">=</span> leftKeys<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> leftChildren<span class="token punctuation">;</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataBox</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>retKey<span class="token punctuation">,</span> right<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>remove()</code>方法的思路和上述的方法都差不多，就不多赘述。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">DataBox</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO(proj2): implement</span>        <span class="token class-name">LeafNode</span> leaf <span class="token operator">=</span> <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        leaf<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="BPlusTree"><a href="#BPlusTree" class="headerlink" title="BPlusTree"></a>BPlusTree</h4><p>最后是B+树的数据结构，它的基本方法的思路也没有太大差别，依旧是递归的思想。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RecordId</span><span class="token punctuation">&gt;</span></span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">DataBox</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">typecheck</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// TODO(proj4_integration): Update the following line</span><span class="token class-name">LockUtil</span><span class="token punctuation">.</span><span class="token function">ensureSufficientLockHeld</span><span class="token punctuation">(</span>lockContext<span class="token punctuation">,</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// TODO(proj2): implement</span><span class="token class-name">LeafNode</span> leafNode <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> leafNode<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>put</code>方法有一些微小的变化，这里先明确一个点xx.put()如果有返回值，代表的是xx出现溢出而非其子结点出现溢出，<code>InnerNode</code>是对子结点调用put方法，而在<code>BPlusTree</code>中是直接对root调用put方法，因此这里一旦出现返回值，代表的是根节点的溢出。<br>对于根节点的溢出，将返回值作为新的索引列表中的元素，将现有的root数据页作为新索引键的左结点，新的数据页作为右结点。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">DataBox</span> key<span class="token punctuation">,</span> <span class="token class-name">RecordId</span> rid<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">typecheck</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// TODO(proj4_integration): Update the following line</span><span class="token class-name">LockUtil</span><span class="token punctuation">.</span><span class="token function">ensureSufficientLockHeld</span><span class="token punctuation">(</span>lockContext<span class="token punctuation">,</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// TODO(proj2): implement</span><span class="token comment">// Note: You should NOT update the root variable directly.</span><span class="token comment">// Use the provided updateRoot() helper method to change</span><span class="token comment">// the tree's root if the old root splits.</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">DataBox</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> op <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> rid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataBox</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>keys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>children<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>children<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">updateRoot</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InnerNode</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> bufferManager<span class="token punctuation">,</span> keys<span class="token punctuation">,</span> children<span class="token punctuation">,</span> lockContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Task-3-Scans"><a href="#Task-3-Scans" class="headerlink" title="Task 3: Scans"></a>Task 3: Scans</h4><p>这里要实现<code>BPlusTree</code>中的两个方法  <code>scanAll</code> ，<code>scanGreaterEqual</code><br>在此之前需要先实现迭代器的方法，先观察一下迭代器的结构</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LeafNode</span> curNode<span class="token punctuation">;</span> <span class="token comment">// 当前所处的叶子节点</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RecordId</span><span class="token punctuation">&gt;</span></span> curIterator<span class="token punctuation">;</span> <span class="token comment">// 该叶子结点中记录的迭代器</span><span class="token keyword">byte</span> type<span class="token punctuation">;</span> <span class="token comment">// 迭代器类型</span><span class="token class-name">DataBox</span> cmpKey<span class="token punctuation">;</span> <span class="token comment">// 用于比较的键</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对于<code>hasNext()</code>，如果<code>curIterator.hasNext()</code>返回true，则直接返回。否则就代表当前叶子结点的记录已经被遍历完了，检查是否还有右兄弟结点，没有就返回false。有就根据迭代器的类型获取指定的迭代器，然后返回迭代器的情况。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>curIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>curNode<span class="token punctuation">.</span><span class="token function">getRightSibling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>curNode <span class="token operator">=</span> curNode<span class="token punctuation">.</span><span class="token function">getRightSibling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>curIterator <span class="token operator">=</span> curNode<span class="token punctuation">.</span><span class="token function">scanAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>curIterator <span class="token operator">=</span> curNode<span class="token punctuation">.</span><span class="token function">scanGreaterEqual</span><span class="token punctuation">(</span>cmpKey<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> curIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">RecordId</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> curIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之后的操作就很简单了，根据方法要求，new出指定的迭代器即可。</p><h3 id="Task-4-Bulk-Load"><a href="#Task-4-Bulk-Load" class="headerlink" title="Task 4: Bulk Load"></a>Task 4: Bulk Load</h3><p>bulk load的基本思路和普通的插入大体相同，区别在于bulk load在叶子节点的填充因子超过3/4就会分裂。同时bulk load也省略了查找插入位置的步骤，只需要不断往最后的叶子结点插入。</p><h4 id="LeafNode-1"><a href="#LeafNode-1" class="headerlink" title="LeafNode"></a>LeafNode</h4><p>对于叶子结点来说，循环插入数据，如果超出阈值，就将最后插入的数据删除并返回。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">DataBox</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">bulkLoad</span><span class="token punctuation">(</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">DataBox</span><span class="token punctuation">,</span> <span class="token class-name">RecordId</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> data<span class="token punctuation">,</span><span class="token keyword">float</span> fillFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO(proj2): implement</span><span class="token keyword">int</span> d <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">float</span> limit <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> d <span class="token operator">*</span> fillFactor<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataBox</span><span class="token punctuation">,</span> <span class="token class-name">RecordId</span><span class="token punctuation">&gt;</span></span> pair <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DataBox</span> key <span class="token operator">=</span> pair<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">RecordId</span> rid <span class="token operator">=</span> pair<span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>keys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>rids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> limit <span class="token operator">&lt;=</span> <span class="token number">0.001</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">DataBox</span> ret <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">RecordId</span> recordId <span class="token operator">=</span> rids<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>rids<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LeafNode</span> right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeafNode</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> bufferManager<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>recordId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rightSibling<span class="token punctuation">,</span> treeContext<span class="token punctuation">)</span><span class="token punctuation">;</span>rightSibling <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> right<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="InnerNode-1"><a href="#InnerNode-1" class="headerlink" title="InnerNode"></a>InnerNode</h4><p>获取最右侧的孩子结点，并且对它进行bulk load，如果返回值为空，则代表所有记录都插入完毕。否则就代表目前的孩子结点已经满了，将新返回的结点记录到子结点数组中，更新当前子结点，并继续进行批量导入。<br>当该结点存储的索引键达到上限时就进行分裂操作，具体操作与上文提到的相同。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">DataBox</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">bulkLoad</span><span class="token punctuation">(</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">DataBox</span><span class="token punctuation">,</span> <span class="token class-name">RecordId</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> data<span class="token punctuation">,</span><span class="token keyword">float</span> fillFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// TODO(proj2): implement</span><span class="token class-name">BPlusNode</span> child <span class="token operator">=</span> <span class="token function">getChild</span><span class="token punctuation">(</span>children<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">DataBox</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> op <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">bulkLoad</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> fillFactor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> d <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">DataBox</span> newKey <span class="token operator">=</span> op<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Long</span> pageNum <span class="token operator">=</span> op<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>keys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>newKey<span class="token punctuation">)</span><span class="token punctuation">;</span>children<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">2</span> <span class="token operator">*</span> d <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token function">split</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>child <span class="token operator">=</span> <span class="token function">getChild</span><span class="token punctuation">(</span>children<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>op <span class="token operator">=</span> child<span class="token punctuation">.</span><span class="token function">bulkLoad</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> fillFactor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="BPlusTree-1"><a href="#BPlusTree-1" class="headerlink" title="BPlusTree"></a>BPlusTree</h4><p>对于根节点来说，批量导入和单独插入差别并不大，只是将单一操作变成了根据插入结果判断是否继续的循环操作。分裂操作也跟上文提到的相同。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bulkLoad</span><span class="token punctuation">(</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">DataBox</span><span class="token punctuation">,</span> <span class="token class-name">RecordId</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> data<span class="token punctuation">,</span> <span class="token keyword">float</span> fillFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// TODO(proj4_integration): Update the following line</span>        <span class="token class-name">LockUtil</span><span class="token punctuation">.</span><span class="token function">ensureSufficientLockHeld</span><span class="token punctuation">(</span>lockContext<span class="token punctuation">,</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TODO(proj2): implement</span>        <span class="token comment">// Note: You should NOT update the root variable directly.</span>        <span class="token comment">// Use the provided updateRoot() helper method to change</span>        <span class="token comment">// the tree's root if the old root splits.</span>        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">DataBox</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> pair <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">bulkLoad</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> fillFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pair<span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataBox</span><span class="token punctuation">&gt;</span></span> keys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            keys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pair<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            children<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">getPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            children<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pair<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">updateRoot</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InnerNode</span><span class="token punctuation">(</span>metadata<span class="token punctuation">,</span> bufferManager<span class="token punctuation">,</span> keys<span class="token punctuation">,</span> children<span class="token punctuation">,</span> lockContext<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pair <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">bulkLoad</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> fillFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Joins-and-Query-Optimization"><a href="#Joins-and-Query-Optimization" class="headerlink" title="Joins and Query Optimization"></a>Joins and Query Optimization</h2><h3 id="Join-Algorithm"><a href="#Join-Algorithm" class="headerlink" title="Join Algorithm"></a>Join Algorithm</h3><h4 id="Task-1：BNLJ"><a href="#Task-1：BNLJ" class="headerlink" title="Task 1：BNLJ"></a>Task 1：BNLJ</h4><p>本阶段要实现的方法 <code>fetchNextRecord</code>, <code>fetchNextLeftBlock</code>, <code>fetchNextRightBlock</code></p><p>获取左表下一部分数据块</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fetchNextLeftBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 左表遍历完毕，退出</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>leftSourceIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> limit <span class="token operator">=</span> numBuffers <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>leftBlockIterator <span class="token operator">=</span> <span class="token function">getBlockIterator</span><span class="token punctuation">(</span>leftSourceIterator<span class="token punctuation">,</span> <span class="token function">getLeftSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>leftBlockIterator<span class="token punctuation">.</span><span class="token function">markNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    leftRecord <span class="token operator">=</span> leftBlockIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>左表可用缓冲大小为总缓冲数 - 2，每次获取新的数据块迭代器，都要标记其中的第一个数据，用于之后的回溯。</p><p>获取右表的下一部分数据</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">fetchNextRightPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rightSourceIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">this</span><span class="token punctuation">.</span>rightPageIterator <span class="token operator">=</span> <span class="token function">getBlockIterator</span><span class="token punctuation">(</span>rightSourceIterator<span class="token punctuation">,</span> <span class="token function">getRightSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>rightPageIterator<span class="token punctuation">.</span><span class="token function">markNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用的缓冲大小为1，即每次只读取被驱动表的一页数据到内存进行匹配，同样地，获取到的迭代器也要进行标记。</p><p>获取下一跳满足条件的记录</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Record</span> <span class="token function">fetchNextRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rightPageIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Record</span> rightRecord <span class="token operator">=</span> rightPageIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span>leftRecord<span class="token punctuation">,</span> rightRecord<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> leftRecord<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>rightRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>leftBlockIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            leftRecord <span class="token operator">=</span> leftBlockIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rightPageIterator<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rightPageIterator<span class="token punctuation">.</span><span class="token function">markNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rightSourceIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">fetchNextRightPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            leftBlockIterator<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            leftBlockIterator<span class="token punctuation">.</span><span class="token function">markNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            leftRecord <span class="token operator">=</span> leftBlockIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>leftSourceIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">fetchNextLeftBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rightSourceIterator<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rightSourceIterator<span class="token punctuation">.</span><span class="token function">markNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">fetchNextRightPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总共有四种情况</p><p>约定： L为驱动表， R为被驱动表</p><p>case 1：right page迭代器还有值可用，表明R在内存中的内容还没有完全被探索完毕。此时继续获取迭代器中的值，并进行匹配。</p><p>case 2：R的页迭代器被耗尽，但L的块迭代器还有值，代表L当前记录已经探索完了R在内存中的记录，此时需要获取L的下一条记录，并重置R的页迭代器。</p><p>case 3：L的块迭代器耗尽，但R的源迭代器还有值，代表L放在内存中的数据已经探索完了R在内存中的记录，此时要获取新的R的数据页，并将L的块迭代器重置，开始新一轮匹配。</p><p>case 4：R的源迭代器耗尽，L的源迭代器还有值，代表L在内存中的记录已经探索完了整张R，此时获取L新的数据块，并重置R的源迭代器，开始新一轮匹配。</p><p>当L的迭代器耗尽时，匹配完毕。</p><p>错误示范：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Record</span> <span class="token function">fetchNextRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>leftRecord <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> leftSourceIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 左表数据块迭代器与右表所有的页迭代器的循环</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>rightSourceIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> rightPageIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 针对某一块左表记录的循环</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>leftRecord <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 针对某一左表记录的循环</span>                <span class="token comment">// 扫描右表当前页的记录，寻找匹配</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>rightPageIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">Record</span> rightRecord <span class="token operator">=</span> rightPageIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>leftRecord<span class="token punctuation">,</span> rightRecord<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> leftRecord<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>rightRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment">// 换到下一个左表记录</span>                leftRecord <span class="token operator">=</span> leftBlockIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> leftBlockIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token comment">// 重置右表迭代器</span>                rightPageIterator<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                rightPageIterator<span class="token punctuation">.</span><span class="token function">markNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 重置左表迭代器</span>            leftBlockIterator<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            leftBlockIterator<span class="token punctuation">.</span><span class="token function">markNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            leftRecord <span class="token operator">=</span> leftBlockIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> leftBlockIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment">// 获取新的右表迭代器</span>            <span class="token function">fetchNextRightPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token comment">// 获取新的左表块迭代器</span>        <span class="token function">fetchNextLeftBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 重置整个右表迭代器</span>        rightSourceIterator<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rightSourceIterator<span class="token punctuation">.</span><span class="token function">markNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 重新获取右表迭代器</span>        <span class="token function">fetchNextRightPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上方的写法看上去差不多，但是如果被驱动表被读取完毕，而驱动表块迭代器没有迭代完，就会直接去fetch下一个驱动表块迭代器<br>其判断逻辑为：先看驱动表有没有剩余数据，再看被驱动表有无剩余数据，然后检查驱动表块有无剩余数据，最后匹配，与题目要求恰好相反。因为被驱动表必定会先被读完，因此每块只有第一个数据能完整探索被驱动表</p><h4 id="Task-2：GHJ"><a href="#Task-2：GHJ" class="headerlink" title="Task 2：GHJ"></a>Task 2：GHJ</h4><p>本阶段要实现<code>partition</code>, <code>buildAndProbe</code>, <code>run</code>以及思考SHJ与GHJ失效的可能情况。</p><p>分区实现</p><p>比较简单，根据记录参与join的字段以及当前分区的轮次生成对应的哈希值，在哈希对应的分区下添加记录。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">Partition</span><span class="token punctuation">[</span><span class="token punctuation">]</span> partitions<span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span> records<span class="token punctuation">,</span> <span class="token keyword">boolean</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> pass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Record</span> record <span class="token operator">:</span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> columnIndex <span class="token operator">=</span> left <span class="token operator">?</span> <span class="token function">getLeftColumnIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">getRightColumnIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataBox</span> columnValue <span class="token operator">=</span> record<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token class-name">HashFunc</span><span class="token punctuation">.</span><span class="token function">hashDataBox</span><span class="token punctuation">(</span>columnValue<span class="token punctuation">,</span> pass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> hash <span class="token operator">%</span> partitions<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        index <span class="token operator">+=</span> partitions<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        partitions<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>左右分区的连接实现</p><p>首先选择驱动表，只有当左右分区中有一个分区的数据页数小于缓冲区数-2（剩下两个缓冲区，一个用于输入被驱动表，一个输出结果），该方法才能进行。</p><p>然后将驱动表的数据哈希过后写入哈希表中。然后从被驱动表中读取数据，探索整张哈希表进行匹配。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">buildAndProbe</span><span class="token punctuation">(</span><span class="token class-name">Partition</span> leftPartition<span class="token punctuation">,</span> <span class="token class-name">Partition</span> rightPartition<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// true if the probe records come from the left partition, false otherwise</span><span class="token keyword">boolean</span> probeFirst<span class="token punctuation">;</span>    <span class="token comment">// We'll build our in memory hash table with these records</span>    <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span> buildRecords<span class="token punctuation">;</span>    <span class="token comment">// We'll probe the table with these records</span>    <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span> probeRecords<span class="token punctuation">;</span>    <span class="token comment">// The index of the join column for the build records</span>    <span class="token keyword">int</span> buildColumnIndex<span class="token punctuation">;</span>    <span class="token comment">// The index of the join column for the probe records</span>    <span class="token keyword">int</span> probeColumnIndex<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>leftPartition<span class="token punctuation">.</span><span class="token function">getNumPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numBuffers <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>buildRecords <span class="token operator">=</span> leftPartition<span class="token punctuation">;</span>        buildColumnIndex <span class="token operator">=</span> <span class="token function">getLeftColumnIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        probeRecords <span class="token operator">=</span> rightPartition<span class="token punctuation">;</span>        probeColumnIndex <span class="token operator">=</span> <span class="token function">getRightColumnIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        probeFirst <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rightPartition<span class="token punctuation">.</span><span class="token function">getNumPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numBuffers <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        buildRecords <span class="token operator">=</span> rightPartition<span class="token punctuation">;</span>        buildColumnIndex <span class="token operator">=</span> <span class="token function">getRightColumnIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        probeRecords <span class="token operator">=</span> leftPartition<span class="token punctuation">;</span>        probeColumnIndex <span class="token operator">=</span> <span class="token function">getLeftColumnIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        probeFirst <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>        <span class="token string">"Neither the left nor the right records in this partition "</span> <span class="token operator">+</span>        <span class="token string">"fit in B-2 pages of memory."</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DataBox</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> hashTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Record</span> buildRecord <span class="token operator">:</span> buildRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">DataBox</span> buildJoinValue <span class="token operator">=</span> buildRecord<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>buildColumnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hashTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>buildJoinValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        hashTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>buildJoinValue<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        hashTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>buildJoinValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>buildRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Record</span> probeRecord <span class="token operator">:</span> probeRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">DataBox</span> probeJoinValue <span class="token operator">=</span> probeRecord<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>probeColumnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hashTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>probeJoinValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span> matchRecords <span class="token operator">=</span> hashTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>probeJoinValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Record</span> matchRecord <span class="token operator">:</span> matchRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Record</span> record<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>probeFirst<span class="token punctuation">)</span> <span class="token punctuation">{</span>                record <span class="token operator">=</span> matchRecord<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>probeRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                record <span class="token operator">=</span> probeRecord<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>matchRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>joinedRecords<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行实现</p><p>首先获取左右表的分区，在遍历分区时，两张表共用下标索引（分区使用的是同一个哈希函数，如果左右表分区数不一致，那可以直接判断不一致的分区必然不存在匹配，因此不必考虑）。</p><p>如果两个分区有任意一个满足探索条件，即可调用对应方法，否则递归调用run，将这两个分区进行进一步的划分然后连接。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span> leftRecords<span class="token punctuation">,</span> <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span> rightRecords<span class="token punctuation">,</span> <span class="token keyword">int</span> pass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">assert</span> pass <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pass <span class="token operator">&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Reached the max number of passes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Create empty partitions</span>    <span class="token class-name">Partition</span><span class="token punctuation">[</span><span class="token punctuation">]</span> leftPartitions <span class="token operator">=</span> <span class="token function">createPartitions</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Partition</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rightPartitions <span class="token operator">=</span> <span class="token function">createPartitions</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Partition records into left and right</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span>leftPartitions<span class="token punctuation">,</span> leftRecords<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> pass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span>rightPartitions<span class="token punctuation">,</span> rightRecords<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> pass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> leftPartitions<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Partition</span> leftPartition <span class="token operator">=</span> leftPartitions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Partition</span> rightPartition <span class="token operator">=</span> rightPartitions<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> limit <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numBuffers <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leftPartition<span class="token punctuation">.</span><span class="token function">getNumPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> limit <span class="token operator">||</span> rightPartition<span class="token punctuation">.</span><span class="token function">getNumPages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">buildAndProbe</span><span class="token punctuation">(</span>leftPartition<span class="token punctuation">,</span> rightPartition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">run</span><span class="token punctuation">(</span>leftPartition<span class="token punctuation">,</span> rightPartition<span class="token punctuation">,</span> pass <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在有SHJ参照的情况下GHJ的实现可以说相当简单。</p><blockquote><p>SHJ失效，GHJ保持有效的情况</p></blockquote><p>SHJ在驱动表的分区大小大于B-2时会失效，因此只要驱动表中有足够多的冗余数据，便可使其失效。</p><p>但由于GHJ要保持有效，因此pass不能过深，保持被驱动表的大小满足条件即可。</p><p>由题知，缓冲区大小为6，每个数据页存储8个数据，因此只需要往一个分区中填入(6-2)*8+1=33个数据即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getBreakSHJInputs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span> leftRecords <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span> rightRecords <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">33</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        leftRecords<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">createRecord</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// GHJ只要有一张表的分区数据页小于B-2就不会加深pass</span>    <span class="token comment">// 因此这里在右表只放1个数据，确保不需要多次递归</span>    rightRecords<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">createRecord</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>leftRecords<span class="token punctuation">,</span> rightRecords<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>GHJ失效</p></blockquote><p>GHJ的生效条件是两个分区中有一个满足条件，且pass不能过大，因此让其失效只要破坏这两个条件即可。在本题中，只需让被驱动表也不满足探索条件，且有大量冗余数据即可完成。</p><p>因为冗余数据会带来不断的无效分区，导致pass数急速上升。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getBreakGHJInputs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span> leftRecords <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span> rightRecords <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 首先同样要让表数据页大小超过缓冲区数-2</span>    <span class="token comment">// 但在本题中，但要让GHJ提高pass，必须让两张表都满足上述条件</span>    <span class="token comment">// 而对于GHJ来说，如果表中均为冗余数据，则会不断造成无效分区，pass急速增加</span>    <span class="token comment">// 因此，在两表中添加大量冗余数据即可达成目标。</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">33</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        leftRecords<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">createRecord</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rightRecords<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">createRecord</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>leftRecords<span class="token punctuation">,</span> rightRecords<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Task-3：External-Sort"><a href="#Task-3：External-Sort" class="headerlink" title="Task 3：External Sort"></a>Task 3：External Sort</h4><p>本题中要实现<code>sortRun</code>, <code>mergeSortedRuns</code>, <code>mergePass</code>, and <code>sort</code></p><p>sortRun</p><p>pass0的操作，将排序段内的数据排序，实现很简单。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Run</span> <span class="token function">sortRun</span><span class="token punctuation">(</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span> recordList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>records<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        recordList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>records<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    recordList<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">makeRun</span><span class="token punctuation">(</span>recordList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mergeSortedRuns</p><p>对一系列有序的排序段做归并操作</p><p>此处使用优先队列来提取要进入输出排序段的记录，同时在优先队列中，每条记录以&lt;Record, Integer&gt;的形式存储，整型数追踪该记录来源的排序段，每当一个记录被送到输出段，就从该记录来源的排序段再提取一个记录放入队列。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Run</span> <span class="token function">mergeSortedRuns</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Run</span><span class="token punctuation">&gt;</span></span> runs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">assert</span> <span class="token punctuation">(</span>runs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>numBuffers <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// TODO(proj3_part/1): implement</span>    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RecordPairComparat</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Iterator</span><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> iterators <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 先获取每一个排序段的迭代器</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Run</span> run <span class="token operator">:</span> runs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        iterators<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>run<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 获取每个排序段中的最小元素，并将其填入优先队列</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">:</span> iterators<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> pair <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Record</span> record <span class="token operator">=</span> pair<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        output<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> iterators<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pair<span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pair<span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">makeRun</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>mergePass</p><p>一轮pass要做的归并操作，将排序段B-1个一组进行归并，生成一个新的有序排序段</p><p>主要工作为计算归并次数并给排序段分组，实现也很简单。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Run</span><span class="token punctuation">&gt;</span></span> <span class="token function">mergePass</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Run</span><span class="token punctuation">&gt;</span></span> runs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Run</span><span class="token punctuation">&gt;</span></span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 每次归并都有n-1个缓冲区用于输入，1个缓冲区用于输出</span>    <span class="token keyword">int</span> runsNum <span class="token operator">=</span> numBuffers <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 计算归并次数</span>    <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>runs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> runsNum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 划分出与缓冲区大小相同的run</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Run</span><span class="token punctuation">&gt;</span></span> curRuns<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> runsNum <span class="token operator">&gt;</span> runs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            curRuns <span class="token operator">=</span> runs<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>i <span class="token operator">*</span> runsNum<span class="token punctuation">,</span> runs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            curRuns <span class="token operator">=</span> runs<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>i <span class="token operator">*</span> runsNum<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> runsNum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 调用归并有序排序段方法</span>        <span class="token class-name">Run</span> out <span class="token operator">=</span> <span class="token function">mergeSortedRuns</span><span class="token punctuation">(</span>curRuns<span class="token punctuation">)</span><span class="token punctuation">;</span>        output<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> output<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sort</p><p>外部排序的驱动方法，只需要先按缓冲区大小划分出排序段，然后为每个排序段排序(调用sortRun)，再不断归并，直到只剩下一个排序段。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Run</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// Iterator over the records of the relation we want to sort</span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span> sourceIterator <span class="token operator">=</span> <span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Iterator</span><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> initialStates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>sourceIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 将程序划分为若干个排序段，每一个排序段的大小与缓冲区一致</span>        <span class="token class-name">BacktrackingIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> <span class="token function">getBlockIterator</span><span class="token punctuation">(</span>sourceI        initialStates<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Run</span><span class="token punctuation">&gt;</span></span> runs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 对每一个排序段进行排序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span> state <span class="token operator">:</span> initialStates<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Run</span> run <span class="token operator">=</span> <span class="token function">sortRun</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span>        runs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 不断归并，直到列表中只剩下唯一一个排序段</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>runs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        runs <span class="token operator">=</span> <span class="token function">mergePass</span><span class="token punctuation">(</span>runs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">assert</span> runs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> runs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Task-4：Sort-Merge-Join"><a href="#Task-4：Sort-Merge-Join" class="headerlink" title="Task 4：Sort Merge Join"></a>Task 4：Sort Merge Join</h4><p>本题要实现该Join方法的迭代器的获取下一条记录的部分</p><p>用marked来标记当前是处于匹配阶段还是寻找阶段。</p><p>若处于匹配阶段，则不断移动左右迭代器，保证每一次移动都能确保最后左表记录&lt;=右表。然后标记右迭代器当前元素，开始进入匹配阶段。</p><p>如果左右记录相等，则匹配成功，继续移动右表记录，若右表无记录可用，则移动左表，并重置右表，重新计入寻找阶段。</p><p>如果左右记录不等，代表匹配阶段结束，重置右表并移动左表，重新进入寻找阶段。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Record</span> <span class="token function">fetchNextRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>leftRecord <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span>leftRecord <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>marked<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span>leftRecord<span class="token punctuation">,</span> rightRecord<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>leftIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    leftRecord <span class="token operator">=</span> leftIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment">// 若左表已经用完，则代表join结束，直接终止</span>                    leftRecord <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span>leftRecord<span class="token punctuation">,</span> rightRecord<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>rightIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    rightRecord <span class="token operator">=</span> rightIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment">// 若右表记录恒小于左表当前记录，则代表左表自此之后的记录无法匹配，也可终止。</span>                    leftRecord <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            marked <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            rightIterator<span class="token punctuation">.</span><span class="token function">markPrev</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span>leftRecord<span class="token punctuation">,</span> rightRecord<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Record</span> ret <span class="token operator">=</span> leftRecord<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>rightRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rightIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                rightRecord <span class="token operator">=</span> rightIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">// 若右表记录已经用完，则代表左表当前记录已经完成匹配，前进左表，并重置右表</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>leftIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    marked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    rightIterator<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    rightRecord <span class="token operator">=</span> rightIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    leftRecord <span class="token operator">=</span> leftIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment">// 左表耗尽，停止</span>                    leftRecord <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 左右表记录不匹配，重置右表后，重新进入查询阶段</span>            marked <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            rightIterator<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rightRecord <span class="token operator">=</span> rightIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>leftIterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                leftRecord <span class="token operator">=</span> leftIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                leftRecord <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Query-Optimization"><a href="#Query-Optimization" class="headerlink" title="Query Optimization"></a>Query Optimization</h3><h4 id="Task-5-Single-Table-Access-Selection-Pass-1"><a href="#Task-5-Single-Table-Access-Selection-Pass-1" class="headerlink" title="Task 5: Single Table Access Selection (Pass 1)"></a>Task 5: Single Table Access Selection (Pass 1)</h4><p>读取算法选择，在顺序遍历，以及索引遍历两种方法中，选取IO开销最小的来读取指定的表。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">QueryOperator</span> <span class="token function">minCostSingleAccess</span><span class="token punctuation">(</span><span class="token class-name">String</span> table<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">QueryOperator</span> minOp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SequentialScanOperator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>transaction<span class="token punctuation">,</span> table<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 1. 获取sequential scan的io开销</span>    <span class="token keyword">int</span> cost <span class="token operator">=</span> minOp<span class="token punctuation">.</span><span class="token function">estimateIOCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2. 获取这张表上的索引</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> indexColumns <span class="token operator">=</span> <span class="token function">getEligibleIndexColumns</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 在使用索引查询时，标记此刻使用的索引</span>    <span class="token keyword">int</span> skipIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 遍历所有的索引</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> indexColumn <span class="token operator">:</span> indexColumns<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">SelectPredicate</span> pre <span class="token operator">=</span> selectPredicates<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>indexColumn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 新建一个索引查找并估算它的io开销，与现有最小的io开销对比</span>        <span class="token class-name">IndexScanOperator</span> indexScanOperator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexScanOperator</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> table<span class="token punctuation">,</span> pre<span class="token punctuation">.</span>column<span class="token punctuation">,</span> pre<span class="token punctuation">.</span>operator<span class="token punctuation">,</span> pre<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ioCost <span class="token operator">=</span> indexScanOperator<span class="token punctuation">.</span><span class="token function">estimateIOCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ioCost <span class="token operator">&lt;</span> cost<span class="token punctuation">)</span> <span class="token punctuation">{</span>            minOp <span class="token operator">=</span> indexScanOperator<span class="token punctuation">;</span>            cost <span class="token operator">=</span> ioCost<span class="token punctuation">;</span>            skipIndex <span class="token operator">=</span> indexColumn<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// push down所有的除索引外的选择,因为可能已经有了用户索引扫描的谓词，再下放没有意义</span>    minOp <span class="token operator">=</span> <span class="token function">addEligibleSelections</span><span class="token punctuation">(</span>minOp<span class="token punctuation">,</span> skipIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> minOp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Task-6-Join-Selection-Pass-i-gt-1"><a href="#Task-6-Join-Selection-Pass-i-gt-1" class="headerlink" title="Task 6: Join Selection (Pass i > 1)"></a>Task 6: Join Selection (Pass i &gt; 1)</h4><p>此阶段要进行join操作，由于使用的是左深树，因此本题中使用prevMap，以及pass1Map存储表与对应操作的映射。</p><p>prevMap&lt;Set&lt;String&gt;, QueryOperator&gt;：存储上一轮pass的join结果，字符串集合用于存储已经被拼接在一起的表。QueryOperator存储最后一次操作的操作符。</p><p>pass1Map&lt;Set&lt;String&gt;, QueryOperator&gt;：存储第一轮读取表的结果，集合中只有一个表名，操作符代表读取这张表的操作符。</p><p>解题思路：</p><p>针对prevMap中的每个表集合，如果包含某个join操作需要用到的表，且该join操作的另一张表尚未被拼接进来，便寻找本次join开销最小的算法，并加入结果集合中。</p><p>注意如果是左表还没有被join的情况，则在调用minCostJoinType时要交换左右表参数，避免违背左深树原则。(debug 4小时的血泪教训)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">QueryOperator</span><span class="token punctuation">&gt;</span></span> <span class="token function">minCostJoins</span><span class="token punctuation">(</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">QueryOperator</span><span class="token punctuation">&gt;</span></span> prevMap<span class="token punctuation">,</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">QueryOperator</span><span class="token punctuation">&gt;</span></span> pass1Map<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">QueryOperator</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// pass1Map存储的是一张单一的表和它的遍历方式</span>    <span class="token comment">// 遍历已经做过join操作的表，即左深树的左边结点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> tables <span class="token operator">:</span> prevMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 遍历join谓词</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">JoinPredicate</span> joinPredicate <span class="token operator">:</span> joinPredicates<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">String</span> leftColumn <span class="token operator">=</span> joinPredicate<span class="token punctuation">.</span>leftColumn<span class="token punctuation">;</span>            <span class="token class-name">String</span> leftTable <span class="token operator">=</span> joinPredicate<span class="token punctuation">.</span>leftTable<span class="token punctuation">;</span>            <span class="token class-name">String</span> rightColumn <span class="token operator">=</span> joinPredicate<span class="token punctuation">.</span>rightColumn<span class="token punctuation">;</span>            <span class="token class-name">String</span> rightTable <span class="token operator">=</span> joinPredicate<span class="token punctuation">.</span>rightTable<span class="token punctuation">;</span>            <span class="token class-name">QueryOperator</span> leftOp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name">QueryOperator</span> rightOp <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>tables<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">QueryOperator</span> op <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token comment">// 如果右表为还没有被join的表，则将其从pass1Map中提取出来</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tables<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>leftTable<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>tables<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>rightTable<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                leftOp <span class="token operator">=</span> prevMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tables<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> rTables <span class="token operator">:</span> pass1Map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>rTables<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>rightTable<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        rightOp <span class="token operator">=</span> pass1Map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rTables<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rightTable<span class="token punctuation">)</span><span class="token punctuation">;</span>                op <span class="token operator">=</span> <span class="token function">minCostJoinType</span><span class="token punctuation">(</span>leftOp<span class="token punctuation">,</span> rightOp<span class="token punctuation">,</span> leftColumn<span class="token punctuation">,</span> rightColumn<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tables<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>leftTable<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> tables<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>rightTable<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                rightOp <span class="token operator">=</span> prevMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tables<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> lTables <span class="token operator">:</span> pass1Map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>lTables<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>leftTable<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        leftOp <span class="token operator">=</span> pass1Map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>lTables<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>leftTable<span class="token punctuation">)</span><span class="token punctuation">;</span>                op <span class="token operator">=</span> <span class="token function">minCostJoinType</span><span class="token punctuation">(</span>rightOp<span class="token punctuation">,</span> leftOp<span class="token punctuation">,</span> rightColumn<span class="token punctuation">,</span> leftColumn<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">//                QueryOperator op = minCostJoinType(leftOp, rightOp, leftColumn, rightColumn);</span>            <span class="token comment">//                System.out.println(op.toString());</span>            <span class="token keyword">int</span> oldCost <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">QueryOperator</span> oldOp <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>                oldCost <span class="token operator">=</span> oldOp<span class="token punctuation">.</span><span class="token function">estimateIOCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>op<span class="token punctuation">.</span><span class="token function">estimateIOCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> oldCost<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>set<span class="token punctuation">,</span> op<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Task-7-Optimal-Plan-Selection"><a href="#Task-7-Optimal-Plan-Selection" class="headerlink" title="Task 7: Optimal Plan Selection"></a>Task 7: Optimal Plan Selection</h4><p>外部驱动方法实现</p><p>首先获取读取数据页的最快速方法，接着循环调用Join，直到结果集中只剩下一个元素。</p><p>本题dp思想的体现：每一轮Pass，都会计算出拼接<code>i</code>张表需要的最小IO开销，因此在Pass i+1 时，只需要求解出进行本次join最小的开销即可。例如：在Pass 2中求出 t1,t2,t3 | t1,t2,t4的最小开销，则在Pass 3时会计算Pass 2中的两种情况，从哪一种可以用更低的开销实现四表拼接。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Record</span><span class="token punctuation">&gt;</span></span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>transaction<span class="token punctuation">.</span><span class="token function">setAliasMap</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>aliases<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">QueryOperator</span><span class="token punctuation">&gt;</span></span> pass1Map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> tableName <span class="token operator">:</span> tableNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">QueryOperator</span> op <span class="token operator">=</span> <span class="token function">minCostSingleAccess</span><span class="token punctuation">(</span>tableName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> tables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tableName<span class="token punctuation">)</span><span class="token punctuation">;</span>        pass1Map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tables<span class="token punctuation">,</span> op<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">QueryOperator</span><span class="token punctuation">&gt;</span></span> prevMap <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>pass1Map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>prevMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        prevMap <span class="token operator">=</span> <span class="token function">minCostJoins</span><span class="token punctuation">(</span>prevMap<span class="token punctuation">,</span> pass1Map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// Set the final operator to the lowest cost operator from the last</span>    <span class="token comment">// pass, add group by, project, sort and limit operators, and return an</span>    <span class="token comment">// iterator over the final operator.</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>finalOperator <span class="token operator">=</span> <span class="token function">minCostOperator</span><span class="token punctuation">(</span>prevMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addGroupBy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addProject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> finalOperator<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h2><h3 id="Queuing"><a href="#Queuing" class="headerlink" title="Queuing"></a>Queuing</h3><h4 id="Task1：LockType"><a href="#Task1：LockType" class="headerlink" title="Task1：LockType"></a>Task1：LockType</h4><p>首先要实现数据库对各种锁类型的支持，需要实现的方法非常简单。<br>首先是判断两种锁类型是否兼容。有手就行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">compatible</span><span class="token punctuation">(</span><span class="token class-name">LockType</span> a<span class="token punctuation">,</span> <span class="token class-name">LockType</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> b <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"null lock type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL <span class="token operator">||</span> b <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token class-name">LockType<span class="token punctuation">.</span>X</span> <span class="token operator">||</span> b <span class="token operator">==</span> <span class="token class-name">LockType<span class="token punctuation">.</span>X</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>SIX <span class="token operator">||</span> b <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>SIX<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">!=</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token class-name">LockType<span class="token punctuation">.</span>S</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>IX<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>IX <span class="token operator">&amp;&amp;</span> b <span class="token operator">==</span> <span class="token class-name">LockType<span class="token punctuation">.</span>S</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后要实现 判断某一种锁是否能被另一把锁替代 的方法,也非常简单</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">substitutable</span><span class="token punctuation">(</span><span class="token class-name">LockType</span> substitute<span class="token punctuation">,</span> <span class="token class-name">LockType</span> required<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>required <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> substitute <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"null lock type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// TODO(proj4_part1): implement</span><span class="token keyword">if</span> <span class="token punctuation">(</span>required <span class="token operator">==</span> substitute<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>required <span class="token operator">==</span> <span class="token class-name">LockType<span class="token punctuation">.</span>X</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>required <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>SIX <span class="token operator">&amp;&amp;</span> <span class="token class-name">LockType<span class="token punctuation">.</span>X</span> <span class="token operator">!=</span> substitute<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>required <span class="token operator">==</span> <span class="token class-name">LockType<span class="token punctuation">.</span>S</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>SIX <span class="token operator">!=</span> substitute <span class="token operator">&amp;&amp;</span> <span class="token class-name">LockType<span class="token punctuation">.</span>X</span> <span class="token operator">!=</span> substitute<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>required <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>IX <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>substitute <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>IS <span class="token operator">||</span> substitute <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>required <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>IS <span class="token operator">&amp;&amp;</span> substitute <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后实现 判断某一把锁是否可以作为另一把锁的父级锁<br>先获取对各类锁来说最基本的父级锁。然后调用上一问实现的方法，判断提供的<code>parentLockType</code>是否为基本的父级锁类型，而基本类型的替代类型也可以返回true。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">canBeParentLock</span><span class="token punctuation">(</span><span class="token class-name">LockType</span> parentLockType<span class="token punctuation">,</span> <span class="token class-name">LockType</span> childLockType<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>parentLockType <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> childLockType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"null lock type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token function">substitutable</span><span class="token punctuation">(</span>parentLockType<span class="token punctuation">,</span> <span class="token function">parentLock</span><span class="token punctuation">(</span>childLockType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment">// 提供的辅助方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">LockType</span> <span class="token function">parentLock</span><span class="token punctuation">(</span><span class="token class-name">LockType</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"null lock type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token class-name">S</span><span class="token operator">:</span> <span class="token keyword">return</span> IS<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token class-name">X</span><span class="token operator">:</span> <span class="token keyword">return</span> IX<span class="token punctuation">;</span>      <span class="token keyword">case</span> IS<span class="token operator">:</span> <span class="token keyword">return</span> IS<span class="token punctuation">;</span>      <span class="token keyword">case</span> IX<span class="token operator">:</span> <span class="token keyword">return</span> IX<span class="token punctuation">;</span>      <span class="token keyword">case</span> SIX<span class="token operator">:</span> <span class="token keyword">return</span> IX<span class="token punctuation">;</span>      <span class="token keyword">case</span> NL<span class="token operator">:</span> <span class="token keyword">return</span> NL<span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"bad lock type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Task-2-LockManager"><a href="#Task-2-LockManager" class="headerlink" title="Task 2: LockManager"></a>Task 2: LockManager</h4><p>本题中主要实现以下方法<code>acquireAndRelease()</code>, <code>acquire()</code>, <code>release()</code>, <code>promote()</code><br><code>LockManager</code>负责管理所有的锁对象，以及各种资源的分配。该级别负责排队逻辑，根据需要阻塞/解除阻塞事务，并且判断事务是否具有某个锁的来源。</p><p>在实现LockManager的主要方法之前，先实现资源管理类的有关方法。</p><p>首先是检查当前事务向该资源添加的锁是否兼容。有手就行。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkCompatible</span><span class="token punctuation">(</span><span class="token class-name">LockType</span> lockType<span class="token punctuation">,</span> <span class="token keyword">long</span> except<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Lock</span> lock <span class="token operator">:</span> locks<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span>transactionNum <span class="token operator">==</span> except<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">LockType</span><span class="token punctuation">.</span><span class="token function">compatible</span><span class="token punctuation">(</span>lock<span class="token punctuation">.</span>lockType<span class="token punctuation">,</span> lockType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来是向该资源上锁，或是修改锁的类型。<br>实现思路：遍历当前资源中的锁，如果有事务编号和插入锁一致的，就代表该事务原本就持有涉及该资源的锁（由于每个事务最多给一个资源上一把锁，因此这里我们可以用事务编号来查找当前事务是否持有该资源的锁）。如果已经持有锁，那么就修改锁的类型之后返回。否则就进行插入操作。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">grantOrUpdateLock</span><span class="token punctuation">(</span><span class="token class-name">Lock</span> lock<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 如果这把锁对应的事务已经在该资源上有了锁，就进行更新</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Lock</span> existLock <span class="token operator">:</span> locks<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>existLock<span class="token punctuation">.</span>transactionNum<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>lock<span class="token punctuation">.</span>transactionNum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>existLock<span class="token punctuation">.</span>lockType <span class="token operator">=</span> lock<span class="token punctuation">.</span>lockType<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 否则就是新建锁，但由于该事务可能是头回加入，所以要进行额外的处理</span>locks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>transactionLocks<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>lock<span class="token punctuation">.</span>transactionNum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>transactionLocks<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>lock<span class="token punctuation">.</span>transactionNum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Lock</span><span class="token punctuation">&gt;</span></span> tLocks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tLocks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>transactionLocks<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>lock<span class="token punctuation">.</span>transactionNum<span class="token punctuation">,</span> tLocks<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将被阻塞的锁请求添加到阻塞队列中。需要注意的只有一点，在将请求添加到队列之后，要让涉及的事务做好阻塞准备（题目要求）。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addToQueue</span><span class="token punctuation">(</span><span class="token class-name">LockRequest</span> request<span class="token punctuation">,</span> <span class="token keyword">boolean</span> addFront<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>addFront<span class="token punctuation">)</span> <span class="token punctuation">{</span>waitingQueue<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>waitingQueue<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>request<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span><span class="token function">prepareBlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着实现阻塞队列释放的方法<br>实现思路：不断获取下一条请求，直至阻塞队列为空或者需要的锁仍然无法被获取。对于可以实现的请求，将需要的锁授予对应的事务，并解除事务的阻塞状态。如果该请求中还包含要释放的锁，则在此处调用对应的释放方法。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LockRequest</span><span class="token punctuation">&gt;</span></span> requests <span class="token operator">=</span> waitingQueue<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>requests<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">LockRequest</span> req <span class="token operator">=</span> requests<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkCompatible</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>lockType<span class="token punctuation">,</span> req<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span><span class="token function">getTransNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">LockType</span><span class="token punctuation">.</span><span class="token function">substitutable</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>lock<span class="token punctuation">.</span>lockType<span class="token punctuation">,</span> <span class="token function">getTransactionLockType</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span><span class="token function">getTransNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">grantOrUpdateLock</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>releasedLocks <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>req<span class="token punctuation">.</span>releasedLocks<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Lock</span> releasedLock <span class="token operator">:</span> req<span class="token punctuation">.</span>releasedLocks<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">ResourceEntry</span> resourceEntry <span class="token operator">=</span> <span class="token function">getResourceEntry</span><span class="token punctuation">(</span>releasedLock<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>resourceEntry<span class="token punctuation">.</span><span class="token function">releaseLock</span><span class="token punctuation">(</span>releasedLock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>waitingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>req<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span><span class="token function">unblock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>释放锁的方法。将锁从当前资源以及指定事务的锁集合中移除，如果事务已经不再持有锁，就将该事务从锁记录中移除，避免OOM。然后释放队列中的请求。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">releaseLock</span><span class="token punctuation">(</span><span class="token class-name">Lock</span> lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>locks<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span>transactionLocks<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>lock<span class="token punctuation">.</span>transactionNum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 如果事务内已经没有锁，就释放空间防止OOM</span><span class="token keyword">if</span> <span class="token punctuation">(</span>transactionLocks<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>lock<span class="token punctuation">.</span>transactionNum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>transactionLocks<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>lock<span class="token punctuation">.</span>transactionNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">processQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取指定资源中指定事务的锁类型。非常简单。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">LockType</span> <span class="token function">getTransactionLockType</span><span class="token punctuation">(</span><span class="token keyword">long</span> transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Lock</span> lock <span class="token operator">:</span> locks<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span>transactionNum<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> lock<span class="token punctuation">.</span>lockType<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有了以上基础，后面的实现就比较简单了，4个方法的实现同质化比较严重。<br><code>acquireAndRelease()</code>实现，用同步代码块包裹涉及锁请求的操作，避免并发请求锁带来问题。<br>先进行异常状态的处理，如果要获取的锁类型和当前已经持有的相同则抛出异常，避免处理无用请求。接着，如果要释放的锁根本不存在，则抛出异常，期间可以收集一会儿要释放的锁，存储到集合中。<br>异常处理完毕后，检查锁的兼容性，如果不兼容，则代表当前请求需要被阻塞，修改标记变量，将请求添加到队列头部（高优先级操作），该请求中应当额外包含当锁被请求到时，要释放的锁列表。如果不需要阻塞，则直接授予事务对应的锁，并释放指定的锁。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">acquireAndRelease</span><span class="token punctuation">(</span><span class="token class-name">TransactionContext</span> transaction<span class="token punctuation">,</span> <span class="token class-name">ResourceName</span> name<span class="token punctuation">,</span>                                  <span class="token class-name">LockType</span> lockType<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResourceName</span><span class="token punctuation">&gt;</span></span> releaseNames<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">DuplicateLockRequestException</span><span class="token punctuation">,</span> <span class="token class-name">NoLockHeldException</span> <span class="token punctuation">{</span><span class="token keyword">boolean</span> shouldBlock <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">LockType</span> exist <span class="token operator">=</span> <span class="token function">getLockType</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ResourceEntry</span> resourceEntry <span class="token operator">=</span> <span class="token function">getResourceEntry</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>exist <span class="token operator">==</span> lockType<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DuplicateLockRequestException</span><span class="token punctuation">(</span><span class="token string">"duplicate request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Lock</span><span class="token punctuation">&gt;</span></span> releaseLocks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> noLock <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ResourceName</span> releaseName <span class="token operator">:</span> releaseNames<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">LockType</span> type <span class="token operator">=</span> <span class="token function">getLockType</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> releaseName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">)</span> <span class="token punctuation">{</span>noLock <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>releaseLocks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Lock</span><span class="token punctuation">(</span>releaseName<span class="token punctuation">,</span> type<span class="token punctuation">,</span> transaction<span class="token punctuation">.</span><span class="token function">getTransNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>noLock<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoLockHeldException</span><span class="token punctuation">(</span><span class="token string">"no lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Lock</span> newLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lock</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> lockType<span class="token punctuation">,</span> transaction<span class="token punctuation">.</span><span class="token function">getTransNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>resourceEntry<span class="token punctuation">.</span><span class="token function">checkCompatible</span><span class="token punctuation">(</span>lockType<span class="token punctuation">,</span> transaction<span class="token punctuation">.</span><span class="token function">getTransNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>shouldBlock <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token class-name">LockRequest</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LockRequest</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> newLock<span class="token punctuation">,</span> releaseLocks<span class="token punctuation">)</span><span class="token punctuation">;</span>resourceEntry<span class="token punctuation">.</span><span class="token function">addToQueue</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>resourceEntry<span class="token punctuation">.</span><span class="token function">grantOrUpdateLock</span><span class="token punctuation">(</span>newLock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Lock</span> releaseLock <span class="token operator">:</span> releaseLocks<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">getResourceEntry</span><span class="token punctuation">(</span>releaseLock<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">releaseLock</span><span class="token punctuation">(</span>releaseLock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>shouldBlock<span class="token punctuation">)</span> <span class="token punctuation">{</span>transaction<span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>acquire</code>的实现和<code>acquireAndRelease</code>没有太大区别，仅仅只是不包含释放锁的列表，以及阻塞时将请求插在队尾。不过由于该方法的优先级不高，请求插入在队尾，因此除了锁不兼容，当阻塞队列中有内容时也会被阻塞。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token class-name">TransactionContext</span> transaction<span class="token punctuation">,</span> <span class="token class-name">ResourceName</span> name<span class="token punctuation">,</span>                      <span class="token class-name">LockType</span> lockType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DuplicateLockRequestException</span> <span class="token punctuation">{</span>      <span class="token keyword">boolean</span> shouldBlock <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">LockType</span> exist <span class="token operator">=</span> <span class="token function">getLockType</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">ResourceEntry</span> resourceEntry <span class="token operator">=</span> <span class="token function">getResourceEntry</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>exist <span class="token operator">==</span> lockType<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DuplicateLockRequestException</span><span class="token punctuation">(</span><span class="token string">"duplicate request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token class-name">Lock</span> newLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lock</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> lockType<span class="token punctuation">,</span> transaction<span class="token punctuation">.</span><span class="token function">getTransNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>resourceEntry<span class="token punctuation">.</span><span class="token function">checkCompatible</span><span class="token punctuation">(</span>lockType<span class="token punctuation">,</span> transaction<span class="token punctuation">.</span><span class="token function">getTransNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token operator">||</span> <span class="token operator">!</span>resourceEntry<span class="token punctuation">.</span>waitingQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              shouldBlock <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>              <span class="token class-name">LockRequest</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LockRequest</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> newLock<span class="token punctuation">)</span><span class="token punctuation">;</span>              resourceEntry<span class="token punctuation">.</span><span class="token function">addToQueue</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              resourceEntry<span class="token punctuation">.</span><span class="token function">grantOrUpdateLock</span><span class="token punctuation">(</span>newLock<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldBlock<span class="token punctuation">)</span> <span class="token punctuation">{</span>          transaction<span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>release</code>方法的实现非常简单，没什么好说的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token class-name">TransactionContext</span> transaction<span class="token punctuation">,</span> <span class="token class-name">ResourceName</span> name<span class="token punctuation">)</span>          <span class="token keyword">throws</span> <span class="token class-name">NoLockHeldException</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">LockType</span> exist <span class="token operator">=</span> <span class="token function">getLockType</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>exist <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoLockHeldException</span><span class="token punctuation">(</span><span class="token string">"no lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token class-name">ResourceEntry</span> resourceEntry <span class="token operator">=</span> <span class="token function">getResourceEntry</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>          resourceEntry<span class="token punctuation">.</span><span class="token function">releaseLock</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Lock</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> exist<span class="token punctuation">,</span> transaction<span class="token punctuation">.</span><span class="token function">getTransNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>promote</code>方法用于更新锁的类型，属于高优先级操作，阻塞时将请求添加到队首，处理异常时要额外处理锁类型非法的情况，即当新的所类型不是原来锁类型的加强版时，抛出异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">promote</span><span class="token punctuation">(</span><span class="token class-name">TransactionContext</span> transaction<span class="token punctuation">,</span> <span class="token class-name">ResourceName</span> name<span class="token punctuation">,</span>                      <span class="token class-name">LockType</span> newLockType<span class="token punctuation">)</span>          <span class="token keyword">throws</span> <span class="token class-name">DuplicateLockRequestException</span><span class="token punctuation">,</span> <span class="token class-name">NoLockHeldException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidLockException</span> <span class="token punctuation">{</span>       <span class="token keyword">boolean</span> shouldBlock <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">LockType</span> exist <span class="token operator">=</span> <span class="token function">getLockType</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">ResourceEntry</span> resourceEntry <span class="token operator">=</span> <span class="token function">getResourceEntry</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>exist <span class="token operator">==</span> newLockType<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DuplicateLockRequestException</span><span class="token punctuation">(</span><span class="token string">"duplicate request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>exist <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoLockHeldException</span><span class="token punctuation">(</span><span class="token string">"no lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">LockType</span><span class="token punctuation">.</span><span class="token function">substitutable</span><span class="token punctuation">(</span>newLockType<span class="token punctuation">,</span> exist<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidLockException</span><span class="token punctuation">(</span><span class="token string">"invalid lock type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token class-name">Lock</span> newLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Lock</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> newLockType<span class="token punctuation">,</span> transaction<span class="token punctuation">.</span><span class="token function">getTransNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>resourceEntry<span class="token punctuation">.</span><span class="token function">checkCompatible</span><span class="token punctuation">(</span>newLockType<span class="token punctuation">,</span> transaction<span class="token punctuation">.</span><span class="token function">getTransNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              shouldBlock <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>              <span class="token class-name">LockRequest</span> req <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LockRequest</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> newLock<span class="token punctuation">)</span><span class="token punctuation">;</span>              resourceEntry<span class="token punctuation">.</span><span class="token function">addToQueue</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              resourceEntry<span class="token punctuation">.</span><span class="token function">grantOrUpdateLock</span><span class="token punctuation">(</span>newLock<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldBlock<span class="token punctuation">)</span> <span class="token punctuation">{</span>          transaction<span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Multigranularity"><a href="#Multigranularity" class="headerlink" title="Multigranularity"></a>Multigranularity</h3><h4 id="Task-3-LockContext"><a href="#Task-3-LockContext" class="headerlink" title="Task 3: LockContext"></a>Task 3: LockContext</h4><p>本题中要实现LockContext的有关方法，它在本数据库架构中负责对指定的某一资源进行操作，也就是树状结构中的结点。<br>接下来我们要实现<code>acquire()</code>, <code>promote()</code>, <code>release()</code>, <code>escalte()</code>, <code>getExplicitLockType()</code>, <code>getEffectiveLockType()</code></p><p>在实现涉及锁操作的方法前，先实现有关的获取锁类型的方法会更高效一些。</p><p><code>getExplicitLockType()</code>就是获取当前context中，对应事务的锁类型，可以直接调用之前在LockManager中实现的方法实现。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">LockType</span> <span class="token function">getExplicitLockType</span><span class="token punctuation">(</span><span class="token class-name">TransactionContext</span> transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>transaction <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">;</span>      <span class="token keyword">return</span> lockman<span class="token punctuation">.</span><span class="token function">getLockType</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>getEffectiveLockType()</code>首先会获取当前上下文中对应事务的锁类型，操作和<code>getExplicitLockType()</code>无异。如果当前上下文中没有锁，就开始考虑受到父节点影响的，隐式的锁类型(例如父节点获取了SIX锁，则相当于子节点都隐式地获取了S锁)，需要注意的是，意向锁并不会隐式传递给子节点。<br>需要额外处理的就是SIX锁与意向锁。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">LockType</span> <span class="token function">getEffectiveLockType</span><span class="token punctuation">(</span><span class="token class-name">TransactionContext</span> transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>transaction <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">;</span>      <span class="token class-name">LockType</span> lockType <span class="token operator">=</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">;</span>      <span class="token class-name">LockContext</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token keyword">do</span> <span class="token punctuation">{</span>          lockType <span class="token operator">=</span> lockman<span class="token punctuation">.</span><span class="token function">getLockType</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>lockType <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>SIX<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token class-name">LockType<span class="token punctuation">.</span>S</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>lockType<span class="token punctuation">.</span><span class="token function">isIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              lockType <span class="token operator">=</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">;</span>          <span class="token punctuation">}</span>          ctx <span class="token operator">=</span> ctx<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>ctx <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> lockType <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> lockType<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>hasSIXAncestor()</code>会判断当前上下文的祖先结点是否持有SIX锁，实现与<code>getEffectiveLockType()</code>仅在循环中的判断。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">hasSIXAncestor</span><span class="token punctuation">(</span><span class="token class-name">TransactionContext</span> transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">LockType</span> lockType <span class="token operator">=</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">;</span>      <span class="token class-name">LockContext</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token keyword">do</span> <span class="token punctuation">{</span>          lockType <span class="token operator">=</span> lockman<span class="token punctuation">.</span><span class="token function">getLockType</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>lockType <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>SIX<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          ctx <span class="token operator">=</span> ctx<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>ctx <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> lockType <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现完锁类型获取方法后，我们再实现操作子结点锁数量的方法。由于锁的一部分操作需要子结点锁数量的记录，因此必须确保相关操作后，对应的数量都能实时更新。<br>因为数据库的层级结构为树状结构，所以很容易能想到要使用递归来处理。递归的终止条件为到达根节点，期间将每一层结点记录的子结点锁数量修改成指定的值。注意在添加时，事务的锁信息可能还未曾被context记录过，因此使用<code>getOrDefault()</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">increaseChildLockNum</span><span class="token punctuation">(</span><span class="token class-name">TransactionContext</span> transaction<span class="token punctuation">,</span> <span class="token class-name">LockContext</span> parent<span class="token punctuation">,</span> <span class="token keyword">int</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token class-name">Integer</span> num <span class="token operator">=</span> parent<span class="token punctuation">.</span>numChildLocks<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>transaction<span class="token punctuation">.</span><span class="token function">getTransNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      num <span class="token operator">+=</span> delta<span class="token punctuation">;</span>      parent<span class="token punctuation">.</span>numChildLocks<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>transaction<span class="token punctuation">.</span><span class="token function">getTransNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">increaseChildLockNum</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> parent<span class="token punctuation">.</span>parent<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">decreaseChildLockNum</span><span class="token punctuation">(</span><span class="token class-name">TransactionContext</span> transaction<span class="token punctuation">,</span> <span class="token class-name">LockContext</span> parent<span class="token punctuation">,</span> <span class="token keyword">int</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token class-name">Integer</span> num <span class="token operator">=</span> parent<span class="token punctuation">.</span>numChildLocks<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>transaction<span class="token punctuation">.</span><span class="token function">getTransNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>      num <span class="token operator">-=</span> delta<span class="token punctuation">;</span>      parent<span class="token punctuation">.</span>numChildLocks<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>transaction<span class="token punctuation">.</span><span class="token function">getTransNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">decreaseChildLockNum</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> parent<span class="token punctuation">.</span>parent<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有了以上辅助方法，可以开始实现一部分锁操作方法。<br><code>acquire()</code>要处理的异常有：</p><ol><li>只读资源被尝试上锁</li><li>重复请求同类型锁</li><li>祖先已持有SIX锁，仍旧尝试请求S锁或IS锁，带来冗余。</li><li>获取的新锁无法将已有的锁作为前置，例如，无法从IS锁获取到X锁。<br>前3种非常好处理，最后一种要使用之前在LockType实现的<code>canBeParentLock()</code>方法来判断新锁能否将旧锁作为前置，注意要剔除没有锁的情况，无锁肯定不满足成为任意一把锁的父级锁的条件，但能作为任何一把锁的前置。初次之外，由于<code>getEffectiveLockType()</code>方法会将意向锁处理为无锁，因此需要再添加一个帮助方法，它会获取离自己最近的一把锁作为影响锁。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">LockType</span> <span class="token function">acquireEffectiveLockType</span><span class="token punctuation">(</span><span class="token class-name">TransactionContext</span> transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>transaction <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">;</span>      <span class="token class-name">LockType</span> lockType <span class="token operator">=</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">;</span>      <span class="token class-name">LockContext</span> ctx <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token keyword">do</span> <span class="token punctuation">{</span>          lockType <span class="token operator">=</span> lockman<span class="token punctuation">.</span><span class="token function">getLockType</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> ctx<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>          ctx <span class="token operator">=</span> ctx<span class="token punctuation">.</span>parent<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>ctx <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> lockType <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> lockType<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token class-name">TransactionContext</span> transaction<span class="token punctuation">,</span> <span class="token class-name">LockType</span> lockType<span class="token punctuation">)</span>          <span class="token keyword">throws</span> <span class="token class-name">InvalidLockException</span><span class="token punctuation">,</span> <span class="token class-name">DuplicateLockRequestException</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>readonly<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"the context is readonly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token class-name">LockType</span> existLock <span class="token operator">=</span> <span class="token function">acquireEffectiveLockType</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>existLock<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>lockType <span class="token operator">==</span> <span class="token class-name">LockType<span class="token punctuation">.</span>S</span> <span class="token operator">||</span> lockType <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>IS<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">hasSIXAncestor</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidLockException</span><span class="token punctuation">(</span><span class="token string">"invalid request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>existLock <span class="token operator">!=</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">LockType</span><span class="token punctuation">.</span><span class="token function">canBeParentLock</span><span class="token punctuation">(</span>existLock<span class="token punctuation">,</span> lockType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidLockException</span><span class="token punctuation">(</span><span class="token string">"invalid lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      lockman<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> name<span class="token punctuation">,</span> lockType<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">increaseChildLockNum</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>release()</code>会释放指定事务在当前资源持有的锁，他要处理的异常有：</p><ol><li>要释放的锁不存在</li><li>子结点还有锁没有被释放    在多粒度锁协议中，每次锁定都是直接锁定一条路径，因此如果要释放锁，则当前结点所能到达的子结点都不能持有锁。</li><li>只读异常</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token class-name">TransactionContext</span> transaction<span class="token punctuation">)</span>            <span class="token keyword">throws</span> <span class="token class-name">NoLockHeldException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidLockException</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>readonly<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"readonly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">LockType</span> curExist <span class="token operator">=</span> <span class="token function">getExplicitLockType</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>curExist <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoLockHeldException</span><span class="token punctuation">(</span><span class="token string">"no lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>numChildLocks<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>transaction<span class="token punctuation">.</span><span class="token function">getTransNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidLockException</span><span class="token punctuation">(</span><span class="token string">"invalid"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>lockman<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">decreaseChildLockNum</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> parent<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>promotion()</code>方法可以将当前事务在资源中持有的锁进行更新，需要注意的是，如果目标是SIX锁，则必须将当前结点的子结点锁持有的S锁和IS锁全部释放，因此我们先实现一个辅助方法来获取持有S锁和IS锁的所有子结点。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResourceName</span><span class="token punctuation">&gt;</span></span> <span class="token function">sisDescendants</span><span class="token punctuation">(</span><span class="token class-name">TransactionContext</span> transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResourceName</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Lock</span><span class="token punctuation">&gt;</span></span> locks <span class="token operator">=</span> lockman<span class="token punctuation">.</span><span class="token function">getLocks</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Lock</span> lock <span class="token operator">:</span> locks<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span>lockType <span class="token operator">==</span> <span class="token class-name">LockType<span class="token punctuation">.</span>S</span> <span class="token operator">||</span> lock<span class="token punctuation">.</span>lockType <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>IS<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">isDescendantOf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lock<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> names<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来我们就可以开始实现<code>promotion()</code>方法了，他要处理的异常有：</p><ol><li>只读异常</li><li>重复请求异常</li><li>锁不存在异常</li><li>请求的锁不是原锁的强化版，用LockType的<code>substituable()</code>判断<br>如果目标是SIX锁，就先获取持有S锁和IS锁的所有子结点，然后将他们全部释放，注意此时<code>decreaseChildLockNum()</code>传入的不是父节点而是自身，因为删除操作并非针对当前资源，而是它的子结点。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">promote</span><span class="token punctuation">(</span><span class="token class-name">TransactionContext</span> transaction<span class="token punctuation">,</span> <span class="token class-name">LockType</span> newLockType<span class="token punctuation">)</span>          <span class="token keyword">throws</span> <span class="token class-name">DuplicateLockRequestException</span><span class="token punctuation">,</span> <span class="token class-name">NoLockHeldException</span><span class="token punctuation">,</span> <span class="token class-name">InvalidLockException</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>readonly<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"readonly"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token class-name">LockType</span> existLock <span class="token operator">=</span> <span class="token function">getExplicitLockType</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>existLock <span class="token operator">==</span> newLockType<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DuplicateLockRequestException</span><span class="token punctuation">(</span><span class="token string">"duplicate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>existLock <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoLockHeldException</span><span class="token punctuation">(</span><span class="token string">"no lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">LockType</span><span class="token punctuation">.</span><span class="token function">substitutable</span><span class="token punctuation">(</span>newLockType<span class="token punctuation">,</span> existLock<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidLockException</span><span class="token punctuation">(</span><span class="token string">"invalid lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newLockType <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>SIX<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResourceName</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> <span class="token function">sisDescendants</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ResourceName</span> resourceName <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>              lockman<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> resourceName<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token function">decreaseChildLockNum</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> names<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      lockman<span class="token punctuation">.</span><span class="token function">promote</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> name<span class="token punctuation">,</span> newLockType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>最后就是<code>escalate()</code>方法，它会将某个事务在指定资源中所有的锁都提升到指定的粒度，从此以下的锁全部释放。因此我们需要实现一个辅助方法来获取所有持有锁的子结点。<br>基本逻辑和<code>sisDescendants</code>类似</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResourceName</span><span class="token punctuation">&gt;</span></span> <span class="token function">allChildrenNames</span><span class="token punctuation">(</span><span class="token class-name">TransactionContext</span> transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResourceName</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Lock</span><span class="token punctuation">&gt;</span></span> locks <span class="token operator">=</span> lockman<span class="token punctuation">.</span><span class="token function">getLocks</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Lock</span> lock <span class="token operator">:</span> locks<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>lock<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">isDescendantOf</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>              names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>lock<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> names<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>escalate在本题中只会将某一粒度的锁提升为S锁或X锁，IS-&gt;S, IX/SIX-&gt;X。这里可以使用之前实现的LockManager的<code>acquireAndRelease()</code>，这样就无需再一遍遍调用<code>release()</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">escalate</span><span class="token punctuation">(</span><span class="token class-name">TransactionContext</span> transaction<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoLockHeldException</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>readonly<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"unsupported"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token class-name">LockType</span> existLockType <span class="token operator">=</span> <span class="token function">getExplicitLockType</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>existLockType <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoLockHeldException</span><span class="token punctuation">(</span><span class="token string">"no lock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResourceName</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> <span class="token function">allChildrenNames</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">decreaseChildLockNum</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> names<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>existLockType <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>IS<span class="token punctuation">)</span> <span class="token punctuation">{</span>          lockman<span class="token punctuation">.</span><span class="token function">acquireAndRelease</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token class-name">LockType<span class="token punctuation">.</span>S</span><span class="token punctuation">,</span> names<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>existLockType <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>IX <span class="token operator">||</span> existLockType <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>SIX<span class="token punctuation">)</span> <span class="token punctuation">{</span>          lockman<span class="token punctuation">.</span><span class="token function">acquireAndRelease</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token class-name">LockType<span class="token punctuation">.</span>X</span><span class="token punctuation">,</span> names<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Task-4-LockUtil"><a href="#Task-4-LockUtil" class="headerlink" title="Task 4: LockUtil"></a>Task 4: LockUtil</h4><p>拥有了以上基础，我们就可以着手将请求锁的方法封装为一个工具类。该工具类需要具备如下功能：</p><ol><li>永远只在已有锁的基础上，做最小程度的升级来满足新的要求。</li><li>只能升级锁，不能降级。</li><li>如果父级结点不满足新锁的前置条件，则为父级结点请求需要的前置锁。</li></ol><p>因此我们可以将本题划分为两个部分：</p><ol><li>确保所有的父级结点持有的锁都满足了前置条件。</li><li>根据现有的锁，最小幅度地提升锁的粒度来满足条件。</li></ol><p>我们可以将碰到的情况分为如下几种：</p><ol><li>现有的锁已经满足了请求锁的要求，函数不做任何处理。</li><li>现有的锁为IX锁，请求锁为S锁，由于本方法不能让锁的粒度降低，但又要满足新的要求，所以此时分配SIX锁。</li><li>当前的锁为意向锁，继续请求锁必然意味着粒度提高，不再是意向锁(特殊情况就是第2种情况)，此时需要子结点放弃持有的锁，然后升级。</li><li>其余情况，如果没有当前结点没有锁，就请求新锁，已有锁就升级。</li></ol><p>分析完毕之后，先开始实现本题的第一部分，确保所有的父级结点都满足条件。鉴于粒度结构属于树状结构，因此使用递归来实现。<br>递归的终止条件设定为遍历到达根节点，或者当前结点的条件已经满足要求，否则就请求需要的锁并继续递归访问父节点。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ensureAncestorLock</span><span class="token punctuation">(</span><span class="token class-name">LockContext</span> parent<span class="token punctuation">,</span> <span class="token class-name">LockType</span> requestType<span class="token punctuation">,</span> <span class="token class-name">TransactionContext</span> transaction<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> requestType <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token class-name">LockType</span> effectiveLockType <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getEffectiveLockType</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LockType</span> explicitLockType <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">getExplicitLockType</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">LockType</span><span class="token punctuation">.</span><span class="token function">substitutable</span><span class="token punctuation">(</span>explicitLockType<span class="token punctuation">,</span> requestType<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span><span class="token function">substitutable</span><span class="token punctuation">(</span>effectiveLockType<span class="token punctuation">,</span> requestType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token class-name">LockContext</span> grandContext <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">parentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">LockType</span> grandLock <span class="token operator">=</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span><span class="token function">parentLock</span><span class="token punctuation">(</span>requestType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ensureAncestorLock</span><span class="token punctuation">(</span>grandContext<span class="token punctuation">,</span> grandLock<span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>explicitLockType <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">)</span> <span class="token punctuation">{</span>parent<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> requestType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>parent<span class="token punctuation">.</span><span class="token function">promote</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> requestType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就可以轻松实现<code>ensureSufficientLockHeld()</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">ensureSufficientLockHeld</span><span class="token punctuation">(</span><span class="token class-name">LockContext</span> lockContext<span class="token punctuation">,</span> <span class="token class-name">LockType</span> requestType<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// requestType must be S, X, or NL  </span>    <span class="token keyword">assert</span> <span class="token punctuation">(</span>requestType <span class="token operator">==</span> <span class="token class-name">LockType<span class="token punctuation">.</span>S</span> <span class="token operator">||</span> requestType <span class="token operator">==</span> <span class="token class-name">LockType<span class="token punctuation">.</span>X</span> <span class="token operator">||</span> requestType <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Do nothing if the transaction or lockContext is null  </span>    <span class="token class-name">TransactionContext</span> transaction <span class="token operator">=</span> <span class="token class-name">TransactionContext</span><span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>transaction <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> lockContext <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token comment">// You may find these variables useful  </span>    <span class="token class-name">LockContext</span> parentContext <span class="token operator">=</span> lockContext<span class="token punctuation">.</span><span class="token function">parentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">LockType</span> effectiveLockType <span class="token operator">=</span> lockContext<span class="token punctuation">.</span><span class="token function">getEffectiveLockType</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">LockType</span> explicitLockType <span class="token operator">=</span> lockContext<span class="token punctuation">.</span><span class="token function">getExplicitLockType</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">LockType</span><span class="token punctuation">.</span><span class="token function">substitutable</span><span class="token punctuation">(</span>explicitLockType<span class="token punctuation">,</span> requestType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token comment">// 如果当前隐式的锁类型已经满足需要，就不做任何操作  </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">LockType</span><span class="token punctuation">.</span><span class="token function">substitutable</span><span class="token punctuation">(</span>effectiveLockType<span class="token punctuation">,</span> requestType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token comment">// 确保父级已经获取了前置锁  </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentContext <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">LockType</span> parentLock <span class="token operator">=</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span><span class="token function">parentLock</span><span class="token punctuation">(</span>requestType<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">ensureAncestorLock</span><span class="token punctuation">(</span>parentContext<span class="token punctuation">,</span> parentLock<span class="token punctuation">,</span> transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>explicitLockType <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>IX <span class="token operator">&amp;&amp;</span> requestType <span class="token operator">==</span> <span class="token class-name">LockType<span class="token punctuation">.</span>S</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          lockContext<span class="token punctuation">.</span><span class="token function">promote</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>SIX<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>explicitLockType<span class="token punctuation">.</span><span class="token function">isIntent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          lockContext<span class="token punctuation">.</span><span class="token function">escalate</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>explicitLockType <span class="token operator">==</span> <span class="token class-name">LockType</span><span class="token punctuation">.</span>NL<span class="token punctuation">)</span> <span class="token punctuation">{</span>          lockContext<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> requestType<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          lockContext<span class="token punctuation">.</span><span class="token function">promote</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> requestType<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>       <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Task5非常简单，就不多赘述了。</p><h2 id="Recovery"><a href="#Recovery" class="headerlink" title="Recovery"></a>Recovery</h2><h3 id="Forward-Processing"><a href="#Forward-Processing" class="headerlink" title="Forward Processing"></a>Forward Processing</h3><h4 id="Task-1：Transaction-Status"><a href="#Task-1：Transaction-Status" class="headerlink" title="Task 1：Transaction Status"></a>Task 1：Transaction Status</h4><p>本题要实现事务状态的转变，要实现的方法为<code>commit()</code>, <code>abort()</code>, <code>end()</code><br>需要注意的点有：</p><ol><li>commit方法在返回结果前，要将对应的日志刷入磁盘来保证数据的持久性。</li><li>end方法在面对已经abort了的事务时，要将该事务做的所有操作回滚。</li></ol><p>commit和abort实现方法类似，都是先获取事务的最后一条日志编号，然后根据他生成新的日志，最后修改事务状态，以及事务对应的最后一条记录编号</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token keyword">long</span> transNum<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">TransactionTableEntry</span> transactionTableEntry <span class="token operator">=</span> transactionTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">long</span> lastLSN <span class="token operator">=</span> transactionTableEntry<span class="token punctuation">.</span>lastLSN<span class="token punctuation">;</span><span class="token keyword">long</span> curLSN <span class="token operator">=</span> logManager<span class="token punctuation">.</span><span class="token function">appendToLog</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CommitTransactionLogRecord</span><span class="token punctuation">(</span>transNum<span class="token punctuation">,</span> lastLSN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>logManager<span class="token punctuation">.</span><span class="token function">flushToLSN</span><span class="token punctuation">(</span>curLSN<span class="token punctuation">)</span><span class="token punctuation">;</span>transactionTableEntry<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">Transaction<span class="token punctuation">.</span>Status</span><span class="token punctuation">.</span>COMMITTING<span class="token punctuation">)</span><span class="token punctuation">;</span>transactionTableEntry<span class="token punctuation">.</span>lastLSN <span class="token operator">=</span> curLSN<span class="token punctuation">;</span><span class="token keyword">return</span> curLSN<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">abort</span><span class="token punctuation">(</span><span class="token keyword">long</span> transNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">TransactionTableEntry</span> transactionTableEntry <span class="token operator">=</span> transactionTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">long</span> lastLSN <span class="token operator">=</span> transactionTableEntry<span class="token punctuation">.</span>lastLSN<span class="token punctuation">;</span>      <span class="token keyword">long</span> abortLSN <span class="token operator">=</span> logManager<span class="token punctuation">.</span><span class="token function">appendToLog</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AbortTransactionLogRecord</span><span class="token punctuation">(</span>transNum<span class="token punctuation">,</span> lastLSN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      transactionTableEntry<span class="token punctuation">.</span>lastLSN <span class="token operator">=</span> abortLSN<span class="token punctuation">;</span>      transactionTableEntry<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">Transaction<span class="token punctuation">.</span>Status</span><span class="token punctuation">.</span>ABORTING<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> abortLSN<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>end方法相较以上两者，多了回滚的处理。首先需要找出回滚到那一条日志编号，显然对于一个被抛弃的事务来说，他所做的所有操作都要被回滚，因此可以从最后一条记录开始一步一步往回，直到没有前一条日志。在回滚结束后，添加End日志并将该事务从事务表中移除。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token keyword">long</span> transNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">TransactionTableEntry</span> transactionTableEntry <span class="token operator">=</span> transactionTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>transactionTableEntry<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Transaction<span class="token punctuation">.</span>Status</span><span class="token punctuation">.</span>ABORTING<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">LogRecord</span> logRecord <span class="token operator">=</span> logManager<span class="token punctuation">.</span><span class="token function">fetchLogRecord</span><span class="token punctuation">(</span>transactionTableEntry<span class="token punctuation">.</span>lastLSN<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>logRecord <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> logRecord<span class="token punctuation">.</span><span class="token function">getPrevLSN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">Long</span> prevLSN <span class="token operator">=</span> logRecord<span class="token punctuation">.</span><span class="token function">getPrevLSN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              logRecord <span class="token operator">=</span> logManager<span class="token punctuation">.</span><span class="token function">fetchLogRecord</span><span class="token punctuation">(</span>prevLSN<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token function">rollbackToLSN</span><span class="token punctuation">(</span>transNum<span class="token punctuation">,</span> logRecord<span class="token punctuation">.</span><span class="token function">getLSN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">long</span> lastLSN <span class="token operator">=</span> transactionTableEntry<span class="token punctuation">.</span>lastLSN<span class="token punctuation">;</span>      <span class="token class-name">EndTransactionLogRecord</span> endRecord <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EndTransactionLogRecord</span><span class="token punctuation">(</span>transNum<span class="token punctuation">,</span> lastLSN<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">long</span> l <span class="token operator">=</span> logManager<span class="token punctuation">.</span><span class="token function">appendToLog</span><span class="token punctuation">(</span>endRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>      transactionTableEntry<span class="token punctuation">.</span>lastLSN <span class="token operator">=</span> l<span class="token punctuation">;</span>      transactionTableEntry<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">Transaction<span class="token punctuation">.</span>Status</span><span class="token punctuation">.</span>COMPLETE<span class="token punctuation">)</span><span class="token punctuation">;</span>      transactionTable<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> l<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体的回滚操作步骤如下：</p><ol><li>如果当前所处的日志编号大于目标编号，则继续，否则退出</li><li>如果该条日志记录的是可undo的操作，则添加一条clr日志，并执行undo操作</li><li>向之前的日志记录移动<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rollbackToLSN</span><span class="token punctuation">(</span><span class="token keyword">long</span> transNum<span class="token punctuation">,</span> <span class="token keyword">long</span> LSN<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">TransactionTableEntry</span> transactionEntry <span class="token operator">=</span> transactionTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">LogRecord</span> lastRecord <span class="token operator">=</span> logManager<span class="token punctuation">.</span><span class="token function">fetchLogRecord</span><span class="token punctuation">(</span>transactionEntry<span class="token punctuation">.</span>lastLSN<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">long</span> lastRecordLSN <span class="token operator">=</span> lastRecord<span class="token punctuation">.</span><span class="token function">getLSN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">long</span> currentLSN <span class="token operator">=</span> lastRecord<span class="token punctuation">.</span><span class="token function">getUndoNextLSN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>lastRecordLSN<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span>currentLSN <span class="token operator">&gt;</span> LSN<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">LogRecord</span> logRecord <span class="token operator">=</span> logManager<span class="token punctuation">.</span><span class="token function">fetchLogRecord</span><span class="token punctuation">(</span>currentLSN<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>logRecord<span class="token punctuation">.</span><span class="token function">isUndoable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">// 获取clr日志  </span>            <span class="token class-name">LogRecord</span> clr <span class="token operator">=</span> logRecord<span class="token punctuation">.</span><span class="token function">undo</span><span class="token punctuation">(</span>transactionEntry<span class="token punctuation">.</span>lastLSN<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">long</span> lsn <span class="token operator">=</span> logManager<span class="token punctuation">.</span><span class="token function">appendToLog</span><span class="token punctuation">(</span>clr<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 更新entry信息  </span>            transactionEntry<span class="token punctuation">.</span>lastLSN <span class="token operator">=</span> lsn<span class="token punctuation">;</span>              <span class="token comment">// 调用redo来执行undo操作（题目要求）</span>            clr<span class="token punctuation">.</span><span class="token function">redo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> diskSpaceManager<span class="token punctuation">,</span> bufferManager<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          currentLSN <span class="token operator">=</span> logRecord<span class="token punctuation">.</span><span class="token function">getPrevLSN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="Task-2：Logging"><a href="#Task-2：Logging" class="headerlink" title="Task 2：Logging"></a>Task 2：Logging</h4><p>本题需要实现日志功能，<code>logAllocPart</code>, <code>logFreePart</code>, <code>logAllocPage</code>, <code>logFreePage</code>均由题目实现，我们需要实现<code>logPageWrite()</code>，用于记录数据页写入操作的日志。实现与abort类似，唯一要注意的是，如果dirtyPage Table中已经有了这张表的修改信息，那就不要在往里面put，因为该表记录的LSN属于首个记录对该表的修改操作的日志。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">logPageWrite</span><span class="token punctuation">(</span><span class="token keyword">long</span> transNum<span class="token punctuation">,</span> <span class="token keyword">long</span> pageNum<span class="token punctuation">,</span> <span class="token keyword">short</span> pageOffset<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> before<span class="token punctuation">,</span>                           <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> after<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">assert</span> <span class="token punctuation">(</span>before<span class="token punctuation">.</span>length <span class="token operator">==</span> after<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">assert</span> <span class="token punctuation">(</span>before<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token class-name">BufferManager</span><span class="token punctuation">.</span>EFFECTIVE_PAGE_SIZE <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">TransactionTableEntry</span> transactionTableEntry <span class="token operator">=</span> transactionTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">long</span> lastLSN <span class="token operator">=</span> transactionTableEntry<span class="token punctuation">.</span>lastLSN<span class="token punctuation">;</span>      <span class="token class-name">UpdatePageLogRecord</span> updatePageLogRecord <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdatePageLogRecord</span><span class="token punctuation">(</span>transNum<span class="token punctuation">,</span> pageNum<span class="token punctuation">,</span> lastLSN<span class="token punctuation">,</span> pageOffset<span class="token punctuation">,</span> before<span class="token punctuation">,</span> after<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">long</span> lsn <span class="token operator">=</span> logManager<span class="token punctuation">.</span><span class="token function">appendToLog</span><span class="token punctuation">(</span>updatePageLogRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>      transactionTableEntry<span class="token punctuation">.</span>lastLSN <span class="token operator">=</span> lsn<span class="token punctuation">;</span>      dirtyPageTable<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span> lsn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> lsn<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Task-3-Savepoints"><a href="#Task-3-Savepoints" class="headerlink" title="Task 3: Savepoints"></a>Task 3: Savepoints</h4><p>本题要实现根据存档点回滚，存档点有它对应的LSN，因此我们可以直接调用实现过的<code>rollBackToLSN()</code>。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rollbackToSavepoint</span><span class="token punctuation">(</span><span class="token keyword">long</span> transNum<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">TransactionTableEntry</span> transactionEntry <span class="token operator">=</span> transactionTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">assert</span> <span class="token punctuation">(</span>transactionEntry <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// All of the transaction's changes strictly after the record at LSN should be undone.  </span>    <span class="token keyword">long</span> savepointLSN <span class="token operator">=</span> transactionEntry<span class="token punctuation">.</span><span class="token function">getSavepoint</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">rollbackToLSN</span><span class="token punctuation">(</span>transNum<span class="token punctuation">,</span> savepointLSN<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Task-4-Checkpoints"><a href="#Task-4-Checkpoints" class="headerlink" title="Task 4: Checkpoints"></a>Task 4: Checkpoints</h4><p>在之前的课程中，我们了解到，数据库会周期性的记录一些模糊检查点，来提升恢复操作的效率。本题我们就是要实现检查点的功能。<br>设定检查点的要求为：如果目前脏页表和事务表的大小超过某一阈值，就将这些部分交给一个endcheckpoint管理，之后开始重新记录，直至下一个检查点达到要求。<br>实现思路：</p><ol><li>遍历脏页表，如果当前两表大小达到要求，就新建一个检查点。然后清空用于记录的临时表，重新记录。</li><li>遍历事务表，继续和上一步一样的操作。</li><li>建立最后一个检查点。<br>tips：<code>EndCheckpointLogRecord.fitsInOneRecord()</code>是用于判断当前两表大小是否符合要求的方法。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">checkpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// Create begin checkpoint log record and write to log  </span>    <span class="token class-name">LogRecord</span> beginRecord <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeginCheckpointLogRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">long</span> beginLSN <span class="token operator">=</span> logManager<span class="token punctuation">.</span><span class="token function">appendToLog</span><span class="token punctuation">(</span>beginRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> chkptDPT <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">Transaction<span class="token punctuation">.</span>Status</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> chkptTxnTable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// TODO(proj5): generate end checkpoint record(s) for DPT and transaction table  </span>    <span class="token keyword">int</span> pageNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> transactionNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> pageNum <span class="token operator">:</span> dirtyPageTable<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">Long</span> recLSN <span class="token operator">=</span> dirtyPageTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 如果再加新的一页不能满足条件，就新建一个checkpoint  </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">EndCheckpointLogRecord</span><span class="token punctuation">.</span><span class="token function">fitsInOneRecord</span><span class="token punctuation">(</span>pageNumber <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> transactionNumber<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">EndCheckpointLogRecord</span> endpoint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EndCheckpointLogRecord</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>chkptDPT<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>chkptTxnTable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              logManager<span class="token punctuation">.</span><span class="token function">appendToLog</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">flushToLSN</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">.</span><span class="token function">getLSN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              chkptDPT<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              pageNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          pageNumber <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>          chkptDPT<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">,</span> recLSN<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> transNum <span class="token operator">:</span> transactionTable<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">TransactionTableEntry</span> transactionTableEntry <span class="token operator">=</span> transactionTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">EndCheckpointLogRecord</span><span class="token punctuation">.</span><span class="token function">fitsInOneRecord</span><span class="token punctuation">(</span>pageNumber<span class="token punctuation">,</span> transactionNumber <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">EndCheckpointLogRecord</span> endpoint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EndCheckpointLogRecord</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>chkptDPT<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>chkptTxnTable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              logManager<span class="token punctuation">.</span><span class="token function">appendToLog</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">flushToLSN</span><span class="token punctuation">(</span>endpoint<span class="token punctuation">.</span><span class="token function">getLSN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              chkptDPT<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              chkptTxnTable<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              pageNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              transactionNumber <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token class-name">Transaction</span> transaction <span class="token operator">=</span> transactionTableEntry<span class="token punctuation">.</span>transaction<span class="token punctuation">;</span>          chkptTxnTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>transNum<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>transaction<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> transactionTableEntry<span class="token punctuation">.</span>lastLSN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          transactionNumber <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token comment">// Last end checkpoint record  </span>    <span class="token class-name">LogRecord</span> endRecord <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EndCheckpointLogRecord</span><span class="token punctuation">(</span>chkptDPT<span class="token punctuation">,</span> chkptTxnTable<span class="token punctuation">)</span><span class="token punctuation">;</span>      logManager<span class="token punctuation">.</span><span class="token function">appendToLog</span><span class="token punctuation">(</span>endRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Ensure checkpoint is fully flushed before updating the master record  </span>    <span class="token function">flushToLSN</span><span class="token punctuation">(</span>endRecord<span class="token punctuation">.</span><span class="token function">getLSN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Update master record  </span>    <span class="token class-name">MasterLogRecord</span> masterRecord <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MasterLogRecord</span><span class="token punctuation">(</span>beginLSN<span class="token punctuation">)</span><span class="token punctuation">;</span>      logManager<span class="token punctuation">.</span><span class="token function">rewriteMasterRecord</span><span class="token punctuation">(</span>masterRecord<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="Restart-Recovery"><a href="#Restart-Recovery" class="headerlink" title="Restart Recovery"></a>Restart Recovery</h3><h4 id="Task-5-Analysis"><a href="#Task-5-Analysis" class="headerlink" title="Task 5: Analysis"></a>Task 5: Analysis</h4><p>在恢复操作开始时，首先需要进行分析。来重建系统崩溃时的事务表和脏页表</p><ol><li>获取日志的Master record，借此来获取begincheckpoint（在初始化时，这两个对象会被一并创建）</li><li>遍历之后的所有日志，接下来讲每种日志都怎么处理。</li><li>事务操作日志：如果对应的事务没有在事务表里，就将其添加进去，然后更新事务的lastLSN</li><li>数据页操作日志：<code>UpdatePage/UndoUpdatePage</code>会修改内存中的数据页，讲其添加进脏页表，但不需要刷入磁盘。<code>FreePage/UndoAllocPage</code>会将数据持久化到磁盘，将对应的数据页从脏页表删除。<code>AllocPage/UndoFreePage</code>不需要我们处理。</li><li>事务状态日志：将对应的事务状态调为<code>COMMITTING</code>, <code>RECOVERY_ABORTING</code>, or <code>COMPLETE</code>。如果是end日志，首先要将事务清理掉(调用<code>cleanup()</code>)，然后从事务表中移除，接着将事务编号记录到<code>endedTransactions</code>集合中，最后修改事务状态。</li><li>检查点日志：对于<code>BeginCheckpoint</code>不需要任何操作。对于<code>EndCheckpoint</code>，将检查点记录的脏页表全部加入到脏页表中，即使脏页表中存在某条记录（考虑到检查点提供的信息的准确性是高于日志的）。对于事务表中的每一条事务，如果已经处于<code>endedTransactions</code>，则不用管，如果有未被记录的，就进行添加。并且，只有当检查点中的事务的lastLSN大于等于目前内存中事务的lastLSN时才修改内存中的日志编号。最后，如果检查点中事务状态优先于内存中事务状态，则进行修改。</li><li>最后遍历一遍当前的事务表，将处于<code>COMMITING</code>状态的事务结束，处于<code>RUNNING</code>状态的调整为<code>RECOVERY_ABORTING</code>。要注意操作的先后顺序。</li></ol><p>定义的用于判断事务状态优先级的方法。遵循：</p><ul><li>running -&gt; committing -&gt; complete</li><li>running -&gt; aborting -&gt; complete<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 判断状态1是否比状态2领先 */</span>  <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">judgeAdvance</span><span class="token punctuation">(</span><span class="token class-name">Transaction<span class="token punctuation">.</span>Status</span> type1<span class="token punctuation">,</span> <span class="token class-name">Transaction<span class="token punctuation">.</span>Status</span> type2<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>type1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Transaction<span class="token punctuation">.</span>Status</span><span class="token punctuation">.</span>RUNNING<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>type1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Transaction<span class="token punctuation">.</span>Status</span><span class="token punctuation">.</span>ABORTING<span class="token punctuation">)</span> <span class="token operator">||</span> type1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Transaction<span class="token punctuation">.</span>Status</span><span class="token punctuation">.</span>COMMITTING<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>type2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Transaction<span class="token punctuation">.</span>Status</span><span class="token punctuation">.</span>RUNNING<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>          <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>type1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Transaction<span class="token punctuation">.</span>Status</span><span class="token punctuation">.</span>COMPLETE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">restartAnalysis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// Read master record  </span>    <span class="token class-name">LogRecord</span> record <span class="token operator">=</span> logManager<span class="token punctuation">.</span><span class="token function">fetchLogRecord</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// Type checking  </span>    <span class="token keyword">assert</span> <span class="token punctuation">(</span><span class="token keyword">record</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> record<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">LogType</span><span class="token punctuation">.</span>MASTER<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">MasterLogRecord</span> masterRecord <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MasterLogRecord</span><span class="token punctuation">)</span> record<span class="token punctuation">;</span>      <span class="token comment">// Get start checkpoint LSN  </span>    <span class="token keyword">long</span> LSN <span class="token operator">=</span> masterRecord<span class="token punctuation">.</span>lastCheckpointLSN<span class="token punctuation">;</span>      <span class="token comment">// Set of transactions that have completed  </span>    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> endedTransactions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// TODO(proj5): implement  </span>    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogRecord</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> logManager<span class="token punctuation">.</span><span class="token function">scanFrom</span><span class="token punctuation">(</span>LSN<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">LogRecord</span> logRecord <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 如果这是一次事务操作  </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logRecord<span class="token punctuation">.</span><span class="token function">getTransNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">Long</span> transNum <span class="token operator">=</span> logRecord<span class="token punctuation">.</span><span class="token function">getTransNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 如果是一个新事务，就将其添加到事务表里  </span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>transactionTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token class-name">Transaction</span> transaction <span class="token operator">=</span> newTransaction<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token function">startTransaction</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token comment">// 更新事务的LSN  </span>            <span class="token class-name">TransactionTableEntry</span> tableEntry <span class="token operator">=</span> transactionTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">;</span>              tableEntry<span class="token punctuation">.</span>lastLSN <span class="token operator">=</span> logRecord<span class="token punctuation">.</span><span class="token function">getLSN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment">// 如果是数据页操作  </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logRecord<span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">LogType</span> type <span class="token operator">=</span> logRecord<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 对于更新涉及写入的更新操作，将该页加入脏页表中  </span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">LogType</span><span class="token punctuation">.</span>UPDATE_PAGE<span class="token punctuation">)</span> <span class="token operator">||</span> type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">LogType</span><span class="token punctuation">.</span>UNDO_UPDATE_PAGE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token function">dirtyPage</span><span class="token punctuation">(</span>logRecord<span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> logRecord<span class="token punctuation">.</span><span class="token function">getLSN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token comment">// 对于内存管理，先将更改写入磁盘，再从脏页表中移除  </span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">LogType</span><span class="token punctuation">.</span>FREE_PAGE<span class="token punctuation">)</span> <span class="token operator">||</span> type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">LogType</span><span class="token punctuation">.</span>UNDO_ALLOC_PAGE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token function">pageFlushHook</span><span class="token punctuation">(</span>logRecord<span class="token punctuation">.</span><span class="token function">getLSN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  dirtyPageTable<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>logRecord<span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>              <span class="token comment">// 其余操作不需要管理  </span>        <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logRecord<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">LogType</span><span class="token punctuation">.</span>COMMIT_TRANSACTION<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">Long</span> transNum <span class="token operator">=</span> logRecord<span class="token punctuation">.</span><span class="token function">getTransNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">TransactionTableEntry</span> tableEntry <span class="token operator">=</span> transactionTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">;</span>              tableEntry<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">Transaction<span class="token punctuation">.</span>Status</span><span class="token punctuation">.</span>COMMITTING<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logRecord<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">LogType</span><span class="token punctuation">.</span>ABORT_TRANSACTION<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">Long</span> transNum <span class="token operator">=</span> logRecord<span class="token punctuation">.</span><span class="token function">getTransNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">TransactionTableEntry</span> tableEntry <span class="token operator">=</span> transactionTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">;</span>              tableEntry<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">Transaction<span class="token punctuation">.</span>Status</span><span class="token punctuation">.</span>RECOVERY_ABORTING<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>            <span class="token comment">// 如果是结束事务的日志，则需要先清除事务，从事务表移除，添加到endedTransactions,最后修改状态  </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logRecord<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">LogType</span><span class="token punctuation">.</span>END_TRANSACTION<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">Long</span> transNum <span class="token operator">=</span> logRecord<span class="token punctuation">.</span><span class="token function">getTransNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">TransactionTableEntry</span> tableEntry <span class="token operator">=</span> transactionTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">;</span>              tableEntry<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span><span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              transactionTable<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">;</span>              endedTransactions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">;</span>              tableEntry<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">Transaction<span class="token punctuation">.</span>Status</span><span class="token punctuation">.</span>COMPLETE<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logRecord<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">LogType</span><span class="token punctuation">.</span>END_CHECKPOINT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">// 对于检查点脏页表的数据，将其全部加入  </span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> dpt <span class="token operator">=</span> logRecord<span class="token punctuation">.</span><span class="token function">getDirtyPageTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              dirtyPageTable<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>dpt<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">Transaction<span class="token punctuation">.</span>Status</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> tTable <span class="token operator">=</span> logRecord<span class="token punctuation">.</span><span class="token function">getTransactionTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 如果检查点的事务表中有事务不在恢复事务表中，就将其添加  </span>            <span class="token comment">// 更新事务表的LSN  </span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> transNum <span class="token operator">:</span> tTable<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>endedTransactions<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>transactionTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token function">startTransaction</span><span class="token punctuation">(</span>newTransaction<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Transaction<span class="token punctuation">.</span>Status</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> pair <span class="token operator">=</span> tTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token class-name">TransactionTableEntry</span> tableEntry <span class="token operator">=</span> transactionTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token class-name">Long</span> lsn <span class="token operator">=</span> pair<span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span> <span class="token punctuation">(</span>lsn <span class="token operator">&gt;=</span> tableEntry<span class="token punctuation">.</span>lastLSN<span class="token punctuation">)</span> <span class="token punctuation">{</span>                      tableEntry<span class="token punctuation">.</span>lastLSN <span class="token operator">=</span> lsn<span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                  <span class="token comment">// 如果存档点中的事务状态领先，则要进行修改  </span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">judgeAdvance</span><span class="token punctuation">(</span>pair<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tableEntry<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token comment">// 如果是aborting则需要修改为recovery_abort  </span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>pair<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Transaction<span class="token punctuation">.</span>Status</span><span class="token punctuation">.</span>ABORTING<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                          tableEntry<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">Transaction<span class="token punctuation">.</span>Status</span><span class="token punctuation">.</span>RECOVERY_ABORTING<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                          tableEntry<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>pair<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> transNum <span class="token operator">:</span> transactionTable<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">TransactionTableEntry</span> tableEntry <span class="token operator">=</span> transactionTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Transaction</span> transaction <span class="token operator">=</span> tableEntry<span class="token punctuation">.</span>transaction<span class="token punctuation">;</span>          <span class="token comment">// 这里cleanup必须在end前调用，因为end会修改状态，导致cleanup报错  </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>transaction<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Transaction<span class="token punctuation">.</span>Status</span><span class="token punctuation">.</span>COMMITTING<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              transaction<span class="token punctuation">.</span><span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">end</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment">// 这里要注意以下顺序，abort()会将事务修改为abort状态，但我们这时候需要的是RECOVERY_ABORTING  </span>        <span class="token comment">// 因此abort方法要在前面。不过日志也理应在事务操作之前添加  </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>transaction<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Transaction<span class="token punctuation">.</span>Status</span><span class="token punctuation">.</span>RUNNING<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token function">abort</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">;</span>              transaction<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token class-name">Transaction<span class="token punctuation">.</span>Status</span><span class="token punctuation">.</span>RECOVERY_ABORTING<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Task-6-Redo"><a href="#Task-6-Redo" class="headerlink" title="Task 6: Redo"></a>Task 6: Redo</h4><p>这一步进行redo操作，使得事务原本做出的修改全部生效。而进行redo的操作要满足以下条件之一：</p><ol><li>是与分区有关的日志记录(AllocPart, UndoAllocPart, FreePart, UndoFreePart)。</li><li>分配页面的记录(AllocPage, UndoFreePage)</li><li>修改数据页的记录(UpdatePage, UndoUpdatePage, UndoAllocPage, FreePage)，并且满足：对应的数据页处于脏页表，记录的LSN大于等于脏页表中的recLSN，数据页记录的LSN小于记录的LSN。<br>由于redo是从前往后进行的，并且只涉及写入操作（等于只操作脏页表），因此我们先要获取脏页表中最小的LSN。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 从脏页表中获取recLSN最小的值 */</span>  <span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">getLowestRecLSN</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> dirtyPageTable<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">restartRedo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// TODO(proj5): implement  </span>    <span class="token keyword">long</span> lowestRecLSN <span class="token operator">=</span> <span class="token function">getLowestRecLSN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LogRecord</span><span class="token punctuation">&gt;</span></span> iterator <span class="token operator">=</span> logManager<span class="token punctuation">.</span><span class="token function">scanFrom</span><span class="token punctuation">(</span>lowestRecLSN<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">LogRecord</span> logRecord <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">LogType</span> type <span class="token operator">=</span> logRecord<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">LogType</span><span class="token punctuation">.</span>ALLOC_PART<span class="token punctuation">)</span>                  <span class="token operator">||</span> type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">LogType</span><span class="token punctuation">.</span>FREE_PART<span class="token punctuation">)</span>                  <span class="token operator">||</span> type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">LogType</span><span class="token punctuation">.</span>UNDO_FREE_PART<span class="token punctuation">)</span>                  <span class="token operator">||</span> type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">LogType</span><span class="token punctuation">.</span>UNDO_ALLOC_PART<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              logRecord<span class="token punctuation">.</span><span class="token function">redo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> diskSpaceManager<span class="token punctuation">,</span> bufferManager<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">LogType</span><span class="token punctuation">.</span>ALLOC_PAGE<span class="token punctuation">)</span>                  <span class="token operator">||</span> type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">LogType</span><span class="token punctuation">.</span>UNDO_FREE_PAGE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              logRecord<span class="token punctuation">.</span><span class="token function">redo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> diskSpaceManager<span class="token punctuation">,</span> bufferManager<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">LogType</span><span class="token punctuation">.</span>UPDATE_PAGE<span class="token punctuation">)</span>                  <span class="token operator">||</span> type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">LogType</span><span class="token punctuation">.</span>UNDO_UPDATE_PAGE<span class="token punctuation">)</span>                  <span class="token operator">||</span> type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">LogType</span><span class="token punctuation">.</span>FREE_PAGE<span class="token punctuation">)</span>                  <span class="token operator">||</span> type<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">LogType</span><span class="token punctuation">.</span>UNDO_ALLOC_PAGE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">Long</span> pageNum <span class="token operator">=</span> logRecord<span class="token punctuation">.</span><span class="token function">getPageNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 指定的数据页在脏页表中，并且日志的LSN大于等于表中的recLSN  </span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dirtyPageTable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">)</span>                      <span class="token operator">&amp;&amp;</span> logRecord<span class="token punctuation">.</span><span class="token function">getLSN</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> dirtyPageTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pageNum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  <span class="token class-name">Page</span> page <span class="token operator">=</span> bufferManager<span class="token punctuation">.</span><span class="token function">fetchPage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DummyLockContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pageNum<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">try</span> <span class="token punctuation">{</span>                      <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span><span class="token function">getPageLSN</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> logRecord<span class="token punctuation">.</span><span class="token function">getLSN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                          logRecord<span class="token punctuation">.</span><span class="token function">redo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> diskSpaceManager<span class="token punctuation">,</span> bufferManager<span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token punctuation">}</span>                  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                      page<span class="token punctuation">.</span><span class="token function">unpin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Task-7-Undo"><a href="#Task-7-Undo" class="headerlink" title="Task 7: Undo"></a>Task 7: Undo</h4><p>这一部分要将被抛弃的事务做出的修改撤销。为了避免一个一个撤销事务操作带来的随机细碎的IO消耗(没撤销一个事务都要重新遍历一遍日志)。我们用优先队列存储各事务接下来的日志编号，使用一次遍历撤销所有事务。<br>循环撤销事务步骤如下：</p><ol><li>如果该操作可以撤销，就进行撤销并且添加CLR日志。</li><li>如果该日志有undoNextLSN就添加改编号到队列，否则添加当前日志的prevLSN。</li><li>如果新的LSN编号为0，就结束该事务。<br>这里我们先要获取所有事务的最终日志编号，并将其与事务捆绑，放到大顶堆中。<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 获取abort状态的事务编号与lastLSN */</span>  <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getAbortedTransactionLastLSN</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> transNum <span class="token operator">:</span> transactionTable<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">Transaction</span> transaction <span class="token operator">=</span> transactionTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">.</span>transaction<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>transaction<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Transaction<span class="token punctuation">.</span>Status</span><span class="token punctuation">.</span>RECOVERY_ABORTING<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>transNum<span class="token punctuation">,</span> transactionTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">.</span>lastLSN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> ret<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">restartUndo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment">// TODO(proj5): implement  </span>    <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Pair</span><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> a<span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      pq<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token function">getAbortedTransactionLastLSN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> pair <span class="token operator">=</span> pq<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Long</span> transNum <span class="token operator">=</span> pair<span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">Long</span> lastLSN <span class="token operator">=</span> pair<span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">LogRecord</span> logRecord <span class="token operator">=</span> logManager<span class="token punctuation">.</span><span class="token function">fetchLogRecord</span><span class="token punctuation">(</span>lastLSN<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">TransactionTableEntry</span> tableEntry <span class="token operator">=</span> transactionTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>logRecord<span class="token punctuation">.</span><span class="token function">isUndoable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token class-name">LogRecord</span> CLR <span class="token operator">=</span> logRecord<span class="token punctuation">.</span><span class="token function">undo</span><span class="token punctuation">(</span>tableEntry<span class="token punctuation">.</span>lastLSN<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">long</span> lsn <span class="token operator">=</span> logManager<span class="token punctuation">.</span><span class="token function">appendToLog</span><span class="token punctuation">(</span>CLR<span class="token punctuation">)</span><span class="token punctuation">;</span>              tableEntry<span class="token punctuation">.</span>lastLSN <span class="token operator">=</span> lsn<span class="token punctuation">;</span>              CLR<span class="token punctuation">.</span><span class="token function">redo</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> diskSpaceManager<span class="token punctuation">,</span> bufferManager<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">long</span> newLSN<span class="token punctuation">;</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>logRecord<span class="token punctuation">.</span><span class="token function">getUndoNextLSN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              newLSN <span class="token operator">=</span> logRecord<span class="token punctuation">.</span><span class="token function">getUndoNextLSN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>              newLSN <span class="token operator">=</span> logRecord<span class="token punctuation">.</span><span class="token function">getPrevLSN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>newLSN <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              tableEntry<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span><span class="token function">cleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">end</span><span class="token punctuation">(</span>transNum<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">continue</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          pq<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>transNum<span class="token punctuation">,</span> newLSN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目实现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Remake | CS50 AI入门笔记</title>
      <link href="/2022/07/02/AI/"/>
      <url>/2022/07/02/AI/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction-to-AI"><a href="#Introduction-to-AI" class="headerlink" title="Introduction  to  AI"></a>Introduction  to  AI</h1><span id="more"></span><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ol><li><p>actions</p><p>在某一状态下可以作出的选择</p><p>ACTION(s) 返回在状态s下可以采取的行动集合。</p></li><li><p>transition model</p><p>针对某个状态采取某个动作后产生的结果</p><p>RESULT(s, action)返回由当前状态采取某行动后生成的新模型。</p></li><li><p>state space</p><p>从初始状态开始经过一系列行为可能产生的状态。</p></li></ol><h2 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h2><p>search problems contain</p><ol><li>initial state</li><li>actions</li><li>transition model</li><li>goal test 测试给定的状态是否为目标状态</li><li>path cost function 代价计算</li></ol><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>是一种记录当前状态信息的数据结构，其中包含：</p><ol><li>当前状态描述</li><li>父状态</li><li>由父状态转移到当前状态采取的行动</li><li>到达当前状态的消耗</li></ol><h3 id="MiniMax"><a href="#MiniMax" class="headerlink" title="MiniMax"></a>MiniMax</h3><p>进行二元博弈时，做最坏的打算，尽最大的努力。</p><p>博弈结果用分数来表示，A胜加分，B胜减分。一方尽可能的使分数增大，一方尽可能的使分数减少。</p><p>由于任何一方在做决策时都会受到另一方之前所作决策的影响。例如A要在B尽可能降低了分数的情况下，作出最大程度提高分数的决策。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">MAX_VALUE</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 若当前状态对局已结束，则返回对局结果</span>    <span class="token keyword">if</span> TERMINAL<span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> UTILITY<span class="token punctuation">(</span>state<span class="token punctuation">)</span>    <span class="token comment"># 初始化当前分数为负无穷</span>    v <span class="token operator">=</span> <span class="token operator">-</span>INFINITY    <span class="token comment"># 尝试所有可以由当前状态派生出的状态，计算对手在派生状态中采取的降低分数的决策。选取所有派生中仍旧能带来最大收益的状态。</span>    <span class="token keyword">for</span> action <span class="token keyword">in</span> ACTIONS<span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">:</span>        v <span class="token operator">=</span> MAX<span class="token punctuation">(</span>v<span class="token punctuation">,</span> MIN_VALUE<span class="token punctuation">(</span>RESULT<span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如此递归的求解可能的状态，效率并不高，因此可以做一定的剪枝操作，例如当派生状态1的最小收益为4时，若派生状态2已经确定其最小值小于4（孙子状态有收益值已经小于4了，则对手采取操作后该派生的最大收益必定不可能大于4）。此时可以直接忽略该状态。</p><p>Limit Minimax</p><p>限制minimax的求解次数，例如限制搜索树的深度，每一步决策只尝试计算之后X步的可能状态。同时添加一个估计函数，判断达成目标的可能性。</p><h2 id="Knowledge"><a href="#Knowledge" class="headerlink" title="Knowledge"></a>Knowledge</h2><p>model:负责对所有可能的逻辑语句作出判断</p><p>knowledge base: 计算机初始情况下已知正误的逻辑语句集合</p><p>model check：依据已有的知识来推断给定的语句是否成立。罗列所有的可能性，判断何时前置条件与查询结果均成立。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">model_check</span><span class="token punctuation">(</span>knowledge<span class="token punctuation">,</span> qeury<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">check_all</span><span class="token punctuation">(</span>knowledge<span class="token punctuation">,</span> query<span class="token punctuation">,</span> symbols<span class="token punctuation">,</span> model<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># all of the symbols have been assigned</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> symbols<span class="token punctuation">:</span>            <span class="token comment"># if this model is compatiable with knowledge</span>            <span class="token comment"># return whether query is compatiable with model</span>            <span class="token keyword">if</span> knowledge<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> query<span class="token punctuation">.</span>evaluate<span class="token punctuation">(</span>model<span class="token punctuation">)</span>            <span class="token comment"># else this model is nonsense to us</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            remaining <span class="token operator">=</span> symbols<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># pop a symbol to assign</span>            p <span class="token operator">=</span> remaining<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 分两种情况讨论，当前条件为真或当前条件为假</span>            model_true <span class="token operator">=</span> model<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>            model_true<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>            model_false <span class="token operator">=</span> model<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>            model_false<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>            <span class="token comment"># 如果两种情况无法同时为真，就代表还有其他条件影响结果，此时不能得出结论。但若同时为真，就代表无论其余条件是什么，目前已有知识已经足够作出判断</span>            <span class="token keyword">return</span> check_all<span class="token punctuation">(</span>knowledge<span class="token punctuation">,</span> query<span class="token punctuation">,</span> remaining<span class="token punctuation">,</span> model_true<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> chekc_all<span class="token punctuation">(</span>knowledge<span class="token punctuation">,</span> query<span class="token punctuation">,</span> remaining<span class="token punctuation">,</span> model_false<span class="token punctuation">)</span>        symbols <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">.</span>union<span class="token punctuation">(</span>knowledge<span class="token punctuation">,</span> query<span class="token punctuation">)</span>    check_all<span class="token punctuation">(</span>knowledge<span class="token punctuation">,</span> query<span class="token punctuation">,</span> symbols<span class="token punctuation">,</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Probability"><a href="#Probability" class="headerlink" title="Probability"></a>Probability</h2><blockquote><p>unconditional probability</p></blockquote><p>在没有任何前提条件的情况下作出判断</p><blockquote><p>conditional probability</p></blockquote><p>基于某些前提，判断某件事发生的可能性。</p><p>符号表示P(a | b)，在b发生的前提下，a发生的可能性。</p><blockquote><p>random variable</p></blockquote><p>象征所有可能出现的情况。</p><blockquote><p>independence</p></blockquote><p>某事件的发生不会影响其他事件发生的可能性。</p><p>即某两个事件相互之间没有关联。</p><h3 id="贝叶斯公式"><a href="#贝叶斯公式" class="headerlink" title="贝叶斯公式"></a>贝叶斯公式</h3><p>P(b | a) = P(a | b) * P(b) / P(a)</p><p>可以通过该公式，可以推算出一些难以观测的情况的发生概率</p><p>已知在某未知原因下某件有明显影响事件的发生概率，就可以推算出在该明显影响下，对应的未知原因发生的概率。</p><p>例如，每一份疾病报告的正确性难以观测，但在疾病发生的前提下，对应报告的正确率容易采集，这样就可以推算出一份报告检测出疾病的概率。</p><h3 id="贝叶斯网络"><a href="#贝叶斯网络" class="headerlink" title="贝叶斯网络"></a>贝叶斯网络</h3><p>用于表示random variables之间依赖关系的数据结构。</p><h4 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h4><ol><li><p>有向图</p></li><li><p>每一个节点象征一个随即变量</p></li><li><p>从X指向Y的箭头表示X是Y的父节点</p></li><li><p>每一个节点都有可能性分布 P(X | Parent(X))</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/AIbyese%20network.png" alt="byese network"></p></li></ol><h4 id="推论操作"><a href="#推论操作" class="headerlink" title="推论操作"></a>推论操作</h4><ol><li>枚举</li></ol><ul><li>Query X：需要计算概率分布的变量</li><li>Evidence variables E：已知的事件e的变量</li><li>Hidden variable Y：不是以上二者的变量</li></ul><p>$$<br>P(X|e) = αP(X,e)=α\sum_yP(X,e,y)<br>$$</p><ol start="2"><li><p>样本</p><p>生成一定数量的样本，在样本中筛选出符合条件的样本用于计算概率。</p><p>例如，若要求推断火车准点的概率，则查看火车准点在样本中的占比。若有前提条件，则先筛选出满足前提的样本，然后根据这些样本推断概率。</p><p>优化：由于样本生成没有规律，若某个前提条件发生的可能性很小，那么就会导致大量的算力被浪费在生成无用的样本上。</p><p>此时可以采取可能性加权的方式进行优化。</p><p>在获取样本时，固定前提条件必然满足，之后计算在该样本的所有前置条件中，要求的前提条件满足的可能性，可能性越高，权重越大。</p><p>例如：前提条件是火车准点，则在生成一个样本后，根据样本中的天气情况以及道路维护状态计算火车准点的可能性，依此为样本赋予权重。</p></li></ol><h3 id="Markov-model"><a href="#Markov-model" class="headerlink" title="Markov model"></a>Markov model</h3><p>用于模拟伪随机变化系统的随即模型，假设当前的状态只与依赖有限的过去的状态。</p><h4 id="Markov-chain"><a href="#Markov-chain" class="headerlink" title="Markov chain"></a>Markov chain</h4><p>一个随机变量序列，其中每一个变量的分布都遵循Markov假设。</p><h4 id="Hidden-Markov-model"><a href="#Hidden-Markov-model" class="headerlink" title="Hidden Markov model"></a>Hidden Markov model</h4><p>也是一条Markov链，但其中的状态很难被直接且准确地观测到。但一些可观测到的事件可以帮助推断出隐藏的状况。例如：街上的人都带着雨伞 -&gt; 今天下雨。</p><table><thead><tr><th>Task</th><th>Definition</th></tr></thead><tbody><tr><td>filtering</td><td>根据目前已知的观测结果，计算当前状况的概率分布。</td></tr><tr><td>prediction</td><td>根据目前已知的观测结果，计算未来状况的概率分布。</td></tr><tr><td>smoothing</td><td>根据目前已知的观测结果，计算过去状况的概率分布。</td></tr><tr><td>most likely explanation</td><td>根据目前已知的观测结果，计算最可能的状态序列。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Remake </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人工智能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/2022/06/30/MySQL/"/>
      <url>/2022/06/30/MySQL/</url>
      
        <content type="html"><![CDATA[<p>MySQL 简易笔记</p><span id="more"></span><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="SQL语句的分类"><a href="#SQL语句的分类" class="headerlink" title="SQL语句的分类"></a>SQL语句的分类</h2><p>1.DQL:数据查询语言（所有带有select的语句）<br>2.DML:数据操作语言（insert，delete，update）<strong>操作表中的数据</strong><br>3.DDL:数据定义语言(create, drop, alter) <strong>操作表的结构</strong><br>4.TCL:事物控制语言(事务提交 commit 事务回滚 rollback)<br>5.DCL:数据控制语言(授权 grant 撤销授权 revoke)</p><h2 id="常用命令-大小写不敏感"><a href="#常用命令-大小写不敏感" class="headerlink" title="常用命令(大小写不敏感)"></a>常用命令(大小写不敏感)</h2><p>连接到Mysql服务的指令：mysql -h 主机名 -P 端口 -u 用户名 -p密码(没有空格)<br>若没有-h，默认是本机，若没有-P，默认是3306<br>1.登录:mysql -uroot -p<br>2.退出:exit<br>3.查看mysql中有哪些数据库:show databases;<br>4.使用数据库 use (dataname)<br>5.创建数据库 create database (dataname) [character set (编码格式) collate(校对规则)]<br>若没有指定编码格式，校对规则，则默认与数据库的编码格式和校对规则相同。<br>6.查看当前库有什么表: show tables;<br>7.查看创建特定表时用到的MySQL语句：show create database (dataname);<br>8.查看表列相关信息：show columns from (dataname) = describe (dataname)<br>9.删除数据库：drop database (dataname);<br>10.备份数据库：mysqldump -u root -p -B 数据库0 数据库1 … 数据库n &gt; 备份文件存放路径 (在dos下执行) <strong>(备份实际上就是创建该库所要用的SQL语句)</strong> (-B表明要备份的是一个数据库)<br>11.备份表：mysqldump -u root -p  数据库 表1 表2 … &gt; 备份文件存放路径 (在dos下执行)<br>11.恢复数据库：source 备份文件路径<br>12.创建表：create table [tablename] (field1 datatype, field2 datatype…) character set… collate… engine…<br>13.修改表<br>    添加列 alter table tablename add column datatype [default expr]<br>    修改列 alter table tablename modify column datatype [default expr]<br>    删除列 alter table tablename drop column<br>    修改表名 rename table 表名 to 新表名<br>    修改表字符集 alter table tablename character set 字符集<br>    修改列名 alter table tablename change prename newname datatype [default expr]<br>14.删除表：drop table tablename</p><h3 id="insert操作"><a href="#insert操作" class="headerlink" title="insert操作"></a>insert操作</h3><p>insert into tablename (要插入数据的字段) values(),(),()…<br>若是给所有字段添加数据，可以不写前面的字段名称<br>默认值的使用：当不给某个字段值时，如果有默认值就会添加默认值，否则报错。</p><h3 id="update操作"><a href="#update操作" class="headerlink" title="update操作"></a>update操作</h3><p>update tablename set xxx = xx, aaa = aa,… [where key = X] 若没有where语句，则修改该列所有数据</p><h3 id="delete操作"><a href="#delete操作" class="headerlink" title="delete操作"></a>delete操作</h3><p>delete from tablename [where xxx = xx] 若没有where，整张表都会被删</p><h3 id="select操作"><a href="#select操作" class="headerlink" title="select操作"></a>select操作</h3><p>select [distinct] * / {column1, column2…} from tablename  distinct可起到去重作用<br>select可以配合表达式操作 select expression… from tablename<br>eg:select (a + b + c) from tablename (a,b,c均为列)<br>取别名 select column/expression as xxx …. from tablename</p><p>**列与列之间用“，”分隔，若以空格分隔，则默认后者是前者的别名。</p><h4 id="在where子句中常用的运算符"><a href="#在where子句中常用的运算符" class="headerlink" title="在where子句中常用的运算符"></a>在where子句中常用的运算符</h4><p>比较运算符: </p><ul><li>&gt; &lt; &lt;= &gt;= = &lt; &gt; != </li><li>between…and…</li><li>in(set)</li><li>like… / not like… 模糊查询<br>like操作符（模糊）： %表示0到多个字符  _:表示单个字符 </li><li>is null<br>逻辑运算符:<br>and, or, not</li></ul><h4 id="order-by排序查找结果"><a href="#order-by排序查找结果" class="headerlink" title="order by排序查找结果"></a>order by排序查找结果</h4><p>select column1, column2, … from tablename order by coloumn asc/desc [, column2 asc/desc …]<br>默认升序，且该子句应位于select语句的结尾</p><h4 id="group-by-having"><a href="#group-by-having" class="headerlink" title="group by, having"></a>group by, having</h4><p>group by用于对查询的结果分组统计  先分组然后在组内统计。<br>having子句用于限制分组显示结果  类似于where的效果。</p><h3 id="加密和系统函数"><a href="#加密和系统函数" class="headerlink" title="加密和系统函数"></a>加密和系统函数</h3><ul><li>user() 查询当前用户</li><li>database() 查询数据库名称</li><li>md5(str) 加密</li></ul><h3 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h3><p>if(expr1, expr2, expr3) 若expr1为真，则执行expr2否则执行expr3，在if语句中，null才被判定为假<br>ifnull(expr1, expr2) 若expr1不为null，则返回expr1，否则执行expr2<br>select case when expr1 then expr2 when expr3 then expr4 … else exprN 若expr1为真，则执行expr2，若expr3成立，则执行expr4 … 否则执行exprN（只会返回一个值）</p><h2 id="表的理解"><a href="#表的理解" class="headerlink" title="表的理解"></a>表的理解</h2><p><strong>数据库中最基本的单元是表</strong><br>数据库中是以表格的形式表示数据的</p><p>行(row):数据/记录<br>列(col):字段(属性：字段名，数据类型，约束等)</p><h3 id="mysql表查询-–-增强"><a href="#mysql表查询-–-增强" class="headerlink" title="mysql表查询 – 增强"></a>mysql表查询 – 增强</h3><p>基本语法：select … limit start, rows;   表示从<em>start+1</em>行开始取，取出rows行<br>语法顺序：group by…  having…  order by…  limit…</p><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><p>默认情况下对两个表进行查询时，采用笛卡尔积：<br>从第一张表中取出一行与第二张表中的每一行结合，返回记录数=表1行数*表2行数<br>因此需要使用where子句对提取出来的数据进行筛选</p><h3 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h3><p>特点：把同一张表当作两张表使用   但在使用中要给两张表取不同的名字<br>应用场景：需要的数据在同一张表中但不在同一行中<br>select x from [databasename] as a, [databasename] as b where…</p><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>子查询是指嵌入在其他sql语句中的select语句，也叫嵌套语句</p><ul><li><p>单行子查询<br>单行子查询是指只返回一行数据的子查询语句</p></li><li><p>多行子查询<br>多行子查询指返回多行数据的子查询 <em>使用关键字in</em></p></li></ul><p>格式：select * from emp where salarys = (select salarys from emp where name = ‘pcx’)</p><p><strong>子查询的结果可以作为一张临时表使用</strong></p><h3 id="all和any"><a href="#all和any" class="headerlink" title="all和any"></a>all和any</h3><p>all表示达成全部条件，any表示达成某一条件。</p><h3 id="表复制"><a href="#表复制" class="headerlink" title="表复制:"></a>表复制:</h3><p>insert into table1 select (数据列名) from table2 (复制数据)<br>create table [tablename] like [table2] (拷贝表结构)</p><h3 id="合并查询"><a href="#合并查询" class="headerlink" title="合并查询"></a>合并查询</h3><p>关键字:union<br>使用场景：</p><ul><li>在单个查询中从不同的表返回类似结构的数据</li><li>对单个表执行多个查询，要求返回单张表<br>union all 不去重  union 去重</li></ul><h3 id="外部链接"><a href="#外部链接" class="headerlink" title="外部链接"></a>外部链接</h3><p>使用场景：在将一个表中的行与另一个表中的行相关联，需要包含没有关联行的那部分行时<br>关键字：left outer join / right outer join    on<br>语法: select xxx from [table1] left/right outer join [table2] on 条件</p><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><h4 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h4><p>主键<em>不能重复</em>并且<em>不能为null</em><br>一张表最多只能有一个主键，但可以是复合主键<br>主键指定方式：</p><ul><li>在字段名后指定</li><li>在表定义的最后指定</li></ul><h4 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h4><p>表示该列中的值都是唯一的</p><h4 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h4><p>将从表的某字段与主表的某字段绑定<br>语法：表定义的最后 foreign key(从表字段) references 主表名(主表字段)<br><em>主表中的字段必须是主键或有unique约束</em></p><p>细节：<br>1.类型为innodb的表才支持外键<br>2.外键字段的类型要和关联字段的类型一致<br>3.外键字段的值必须要在关联字段中出现过或者为null<br>4.一旦建立主外键关系，数据就不能随意删除<br>（只有当从表中关联的外键全部被删除时，关联字段才允许被删除）</p><h4 id="自增长"><a href="#自增长" class="headerlink" title="自增长"></a>自增长</h4><p>设置为自增长的列在每一次添加一条记录时自动增量<br>语法 column datatype […] auto_increment<br>自增长默认从1开始，也可使用语句 alter table tablename auto_increment = x;来修改起始值</p><ul><li>只有一列数据可以使用自增长</li><li>被设为自增长的列必须能被索引。</li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>语法：<br>create [unique] index 索引名 on 表名(对应字段)<br>alter table 表名 add index 索引名(对应字段)<br>添加主键索引: alter table 表名 add primary key(列名)<br>删除索引:drop index 索引名 on 表名<br>删除主键索引:alter table 表名 drop primary key</p><p>原理：<br>程序会根据索引字段建立一棵二叉搜索树（也有可能用的别的数据结构）<br>若没有索引则会进行全表扫描<br>劣势：</p><ul><li>内存空间消耗</li><li>对增删改语句的效率造成影响（数据结构必须做出对应调整）</li></ul><p>索引的类型：</p><ul><li>主键索引，主键自动为主索引</li><li>唯一索引 unique</li><li>普通索引 index</li><li>全文索引 fulltext  Mysql自带的全文索引使用不多</li></ul><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>事务处理：管理必须<strong>成批执行</strong>的MySQL操作<br>术语：<br>事务：一组SQL语句<br>回退：撤销指定的SQL语句<br>提交：将未存储的SQL语句结果写入数据库表<br>保留点：事务处理中设置的临时占位符，可以对它发布回退</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>start transaction 开始事务<br>savepoint 保留点名  设置保留点<br>rollback [to 保留点名] 回滚（默认回滚到初始状态）<br>commit 提交修改</p><p>注意：每一次回退都会将路径上的保留点全部删除</p><h4 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h4><p>隔离：多个连接开启各自事务操作数据库中数据时，数据库所做的保证各个连接获取数据的准确性的操作</p><p>脏读：当前连接在事务进行中时可以读取到其他连接事务中还未提交的操作<br>不可重复读：当前连接在事务进行中时可以读取到其他连接的修改操作<br>幻读：当前连接在事务可以读取到其他连接的增添或删除操作<br>    在一个事务的两次查询中数据笔数不一致，例如有一个事务查询了几列(Row)数据，而另一个事务却在此时插入了新的几列数据，先前的事务在接下来的查询中，就会发现有几列数据是它先前所没有的。</p><p>隔离级别：</p><ul><li>读未提交(read uncommitted) 可能发生脏读、不可重复读、幻读</li><li>读已提交(read committed) 可能发生不可重复读、幻读</li><li>可重复读(repeatable read) 可能发生幻读（但在Mysql中被解决）  不上锁</li><li>可串行化(serializable) 安全  上锁</li></ul><p>锁：当程序检测到有连接在对数据库进行操作时，会终止其他连接对数据库进行操作</p><p>查看当前隔离级别：select @@transaction_isolation<br>查看系统当前隔离级别：select @@global.transaction_isolation<br>设置当前会话隔离级别：set session transaction isolation level [目标隔离级别]<br>设置系统隔离级别：set global transaction isolation level [目标隔离级别]</p><p>acid特性：</p><ul><li>原子性：事务中的操作要么都发生，要么都不发生</li><li>一致性：事务必须使数据库从一个一致性状态变换到另一个一致性状态</li><li>隔离性：数据库为每一个用户开启的事务不能被其他事务的操作数据干扰，多个并发事务之间要相互隔离</li><li>持久性：一个事务一旦提交，他对数据库中的数据的改变就是永久性的，</li></ul><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><h3 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h3><p>不支持事务，也不支持外键，但访问速度快，对事务完整性没有要求（适用于只需要CRUD的情况）</p><h3 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h3><p>提供了具有提交、回滚和崩溃恢复能力的事务安全，但处理效率稍差一些，且要占据更多的磁盘空间来保留数据和索引</p><h3 id="MEMORY"><a href="#MEMORY" class="headerlink" title="MEMORY"></a>MEMORY</h3><p>使用<strong>存在内存中的内容</strong>来创建表。默认使用Hash索引，因此有极高的访问速度。</p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图是根据基表创建的一张<strong>虚拟表</strong><br>创建视图只会创建一个表结构，并将基表中的数据<strong>映射</strong>到视图中（可以理解为视图中存储着基表数据的引用）<br>不管对视图还是基表进行修改，都会对另一方造成影响 </p><p>视图的使用</p><ul><li>创建：create view 视图名 as select column1, … from 基表</li><li>修改：alter view 视图名 as select column1, … from 基表</li><li>删除：drop view 视图名1，视图名2</li></ul><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>创建用户：create user ‘用户名‘@’ip地址’ identified by ‘密码’<br>修改密码：alter user ‘用户名‘@’ip地址’ identified by ‘密码’<br>删除用户：drop user ‘用户名‘@’ip地址’ </p><h3 id="用户权限管理"><a href="#用户权限管理" class="headerlink" title="用户权限管理"></a>用户权限管理</h3><p>赋予权限： grant 权限列表 on 库.对象 to ‘用户名‘@’ip地址’ [identified by ‘密码’]<br>回收权限：revoke 权限列表 on 库.对象 from ‘用户名‘@’ip地址’ [identified by ‘密码’]</p><p>注意：</p><ul><li>在创建用户时如果不指定Host，则为%，表示可以从任意IP登录该用户</li><li>指定host时，192.168.0.%表示192.168.0.*</li><li>在删除用户时，若host不是%，则需要明确指定IP</li></ul><h2 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h2><p>decimal (M,D) M表示该数总位数, D表示小数点后位数 【默认情况下M是10，D是0】</p><h3 id="数学相关函数"><a href="#数学相关函数" class="headerlink" title="数学相关函数"></a>数学相关函数</h3><p>ABS(num) 绝对值<br>BIN(decimal_number) 十进制转二进制<br>ceiling(num) 向上取整<br>conv(num, from_base, to_base) 进制转换<br>floor(num) 向下取整<br>format(num, decimal_places) 保留小数位数<br>hex (decimalnumber) 转十六进制<br>least (num1, num2, …) 最小值<br>mod(num, denominator) 求余<br>rand([seed]) 随机数 范围为 0 &lt;= v &lt;= 10</p><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>char 固定长度字符串，最大255<strong>字符</strong><br>varchar <strong>可变</strong>长度字符串 最大65532<strong>字节</strong>(有3个字节被用于记录大小)<br>字符串使用细节：<br>char(4),varchar(4) 此时的4表示<strong>字符数</strong>，不区分字母与汉字，其占用空间大小视编码格式决定<br>char(4)是<strong>定长</strong><br>varchar(4)是<strong>变长</strong>，其占用空间可伸缩，而varchar本身需要1-3个字节来存放长度大小<br>若数据定长，推荐使用char，re：char的查询速度更快。<br>若varchar不够用，则可使用mediumtext或longtext</p><h4 id="字符串相关函数"><a href="#字符串相关函数" class="headerlink" title="字符串相关函数"></a>字符串相关函数</h4><p>** 字符串起始下标为1**</p><ul><li>charset(str) 返回字符字符集</li><li>concat(str1, …) 连接字符串</li><li>instr(string, substring) 返回substring在string中出现的位置，若没有则返回0</li><li>ucase(string) 转换成大写</li><li>lcase(string) 转换成小写</li><li>left(string, length) 从string中的左边起取length个字符</li><li>length(string) string长度</li><li>replace(str, search_str, replace_str) 在str中用replace_str替换search_str</li><li>strcmp(string1, string2) 逐字符比较两子串大小</li><li>substring(str, position [, length]) 从str的position位置开始，取length个字符</li><li>ltrim(string) rtrim(string) trim 去除前端/后端/前后端空格。</li></ul><h3 id="日期类型"><a href="#日期类型" class="headerlink" title="日期类型"></a>日期类型</h3><p>date 年月日<br>datetime 年月日时分秒<br>timestamp 时间戳 （在insert和update时自动更新）配置代码 timestamp xxx not null default current_timestamp update current_timestamp</p><h4 id="时间日期函数"><a href="#时间日期函数" class="headerlink" title="时间日期函数"></a>时间日期函数</h4><p>current_date() 当前日期<br>current_time() 当前时间<br>current_timestamp() 当前时间数<br>date(datetime) 返回datetime日期部分<br>date_add(date, interval d_value d_type) 在date上加上日期或时间<br>date_sub(date. interval d_value d_type) 在date上减去日期或时间<br>datediff(date1, date2) 两个日期差（结果是天） 日期需要年月日时分秒<br>timediff(date1, date2) 两个时间差（多少小时多少分钟多少秒）<br>now() 当前时间<br>unix_timestamp()返回1970-1-1 00:00:00至今的秒数<br>last_day(date)返回传入日期所在月份的最后一天</p><p>*日期类型可以用大于小于号比较，但要将日期用单引号括起来</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2022/06/30/Linux/"/>
      <url>/2022/06/30/Linux/</url>
      
        <content type="html"><![CDATA[<p>Linux基本知识及Shell基础用法</p><span id="more"></span><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p>实质:内核<br>应用场景:**服务器领域(最强的领域)**，桌面开发，嵌入式<br>特性:免费稳定高效<br>主要发行版:ubuntu, CentOS, RedHat</p><p><strong>Linux中一切皆文件</strong><br>隐藏文件以 . 打头</p><h2 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h2><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/d0c50-linux2bfile2bsystem2bhierarchy.jpg" alt="目录结构"></p><ol><li><p>/bin [<strong>常用</strong>] (/usr/bin, /usr/local/bin)<br>存放经常使用的命令</p></li><li><p>/sbin (/usr/sbin, /usr/local/sbin)<br>存放系统管理员使用的系统管理程序</p></li><li><p>/home <strong>[常用]</strong><br>存放<strong>普通用户</strong>的主目录，在Linux中每个用户都有一个自己的目录。</p></li><li><p>/root <strong>[常用]</strong><br>该目录为系统管理员，也称作超级权限者的用户主目录。</p></li><li><p>/lib </p><p>系统开机所需要最基本的动态连接共享库。</p></li><li><p>/etc <strong>[常用]</strong><br>所有的系统管理所需要的配置文件和子目录</p></li><li><p>/usr <strong>[常用]</strong><br>存放用户的应用程序和文件。</p></li><li><p>/boot <strong>[常用]</strong><br>存放的是启动Linux的核心文件，包括一些连接文件以及镜像文件。</p></li><li><p>/dev<br>类似于设备管理器， 把所有的硬件用文件的形式存储。</p></li><li><p>/media <strong>[常用]</strong><br>Linux系统会自动识别一些设备，当识别后，Linux会把识别的设备挂载到这个目录下。</p></li><li><p>/mnt <strong>[常用]</strong><br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂在/mnt/上</p></li><li><p>/opt</p><p>是给主机额外安装软件所存放的目录(尽量将安装软件存放到这)。</p></li><li><p>/usr/local <strong>[常用]</strong><br>给主机额外安装软件的目录，一般源码安装的软件在这。</p></li></ol><h2 id="vi和vim"><a href="#vi和vim" class="headerlink" title="vi和vim"></a>vi和vim</h2><p>vi：Linux中内置的文本编辑器<br>vim：具有程序编辑的能力，可以看作是vi的增强版本，类似vscode</p><h3 id="vi和vim常用的三种模式"><a href="#vi和vim常用的三种模式" class="headerlink" title="vi和vim常用的三种模式"></a>vi和vim常用的三种模式</h3><p>正常模式：<br>默认模式，可以移动光标，删除字符或删除整行类处理档案内容，也可以复制粘贴<br>包含操作：<br>(n)yy 拷贝当前开始n行<br>p:粘贴<br>(n)dd 删除当前开始n行<br>G:到最末行<br>gg:到首行<br>u:撤回上一步操作<br>行号 shift g:定位到对应行号</p><p>插入模式：<br>按i进入编辑模式<br>命令行模式：<br>按:或/进入<br>包含操作：<br>wq(保存并推出)，q(退出)，q!(强制退出)<br>查找内容：命令行下 /关键字 回车， 输入n查找一个<br>设置行号：set nu 取消行号:set nonu<br>通过提供相关指令，完成读取，存盘，替换，离开vim，显示行号等动作。</p><h2 id="文件基本属性"><a href="#文件基本属性" class="headerlink" title="文件基本属性"></a>文件基本属性</h2><p>chown(change owner):修改所属用户与组</p><p>chmod(change mode):修改用户的权限</p><h4 id="file-type"><a href="#file-type" class="headerlink" title="file type"></a>file type</h4><ul><li>d:目录</li><li>-:文件</li><li>l:链接文档</li><li>b:装置文件里面的可供储存的接口设备</li><li>c:表示装装置文件里面的穿行端口设备</li></ul><h3 id="文件属主和属组"><a href="#文件属主和属组" class="headerlink" title="文件属主和属组"></a>文件属主和属组</h3><p>对于文件来说，都有一个特定的所有者。</p><p>同时，在Linux中，用户是按组分类的，一个用户属于一个或多个组</p><p>文件所有者以外的用户又可分为文件所有者的同组用户和其他用户</p><h3 id="更改文件属性"><a href="#更改文件属性" class="headerlink" title="更改文件属性"></a>更改文件属性</h3><ol><li><p>chgrp</p><p>更改文件属组</p><p>语法：chgrp [-R] 属组名  文件名</p><p>-R:递归更改文件属组</p></li><li><p>chown</p><p>更改文件属主，也可以同时更改文件属组</p><p>语法：chown [-R] 属主名[:属组名] 文件名</p></li><li><p>chmod</p><p>更改文件九个属性(owner/group/others的rwx权限)</p><p>各权限的权值：</p><p>​r:4</p><p>​w:2</p><p>​x:1</p><p>语法：chmod [-R] xyz 文件或目录</p></li></ol><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h4 id="硬连接"><a href="#硬连接" class="headerlink" title="硬连接"></a>硬连接</h4><p>硬链接指通过索引节点[文件的编号]来进行连接，可以理解为他们直接指向指定的数据。若有多个硬连接指向同一个文件，则删除其中一个并不会造成影响。</p><p>意义：允许一个文件拥有多个有效路径名，可以避免误删重要文件。只有当所有的硬链接均被删除后，文件的数据块及目录才会被释放（有点类似Java对类的管理）</p><h4 id="软连接"><a href="#软连接" class="headerlink" title="软连接"></a>软连接</h4><p>又称符号链接，该文件实际上是个文本文件，其中包含了另一文件的位置信息（类似于指针），可以理解为Windows中的快捷方式。删除符号链接不会对源文件造成影响，删除源文件会导致符号链接指向一个无效连接。</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p>ln [-s] src des  将desc连接到src上 </p><p>-s:创建连接</p><h2 id="文件目录指令"><a href="#文件目录指令" class="headerlink" title="文件目录指令"></a>文件目录指令</h2><p>绝对路径：由根目录**/**写起</p><p>相对路径：不是由/写起</p><p>功能描述：显示当前工作目录的绝对路径</p><ul><li><p>pwd指令</p><p>显示当前所在目录</p><p>常用选项：</p><p>-P:显示出确实的路径，而非使用连结路径</p></li><li><p>ls指令<br>基本语法：ls  [选项] [目录或是文件]<br>常用选项：<br>-a：显示当前目录所有的文件和目录，包括隐藏的。<br>-l：以列表的方式显示信息，包含文件的属性与权限等等数据。<br>-h：更人性化的显示（一般与l合用）<br>-d：长数据串列输出，包含文件的属性与权限等等数据</p></li><li><p>cd指令<br>基本语法：cd [参数] （功能描述：切换到指定目录）<br>理解：绝对路径和相对路径<br>cd ~ 或者cd：回到自己的家目录<br>cd .. 回到目前目录的上一级目录</p></li><li><p>mkdir指令</p><p>创建目录</p><p>mkdir 目录 （默认只能创建一级<strong>目录</strong>）</p><p>常用选项：</p><p>-m 配置权限</p><p>-p  递归创建文件夹</p></li><li><p>rmdir指令<br>rmdir [指令] 要删除的<strong>空目录</strong><br>rmdir删除的是<strong>空目录</strong>，若目录下有内容时无法删除<br>如果要删除非空目录，需要使用 rm -rf 要删除的目录。</p><p>常用选项：</p><p>-p：从该目录起，一次删除多级空目录</p></li><li><p>touch指令<br>创建空文件<br>touch 文件名称</p></li><li><p>cp指令<br>拷贝文件到指定目录<br>基本语法：cp [选项] source(原文件路径) dest(目标路径)<br>常用选项：</p><ul><li><p>-r 递归复制整个文件夹</p></li><li><p>-f 若目标档已存在且无法开启，则移除后再尝试一次</p></li><li><p>-p 连同文件的属性一起复制过去</p></li></ul><p>强制覆盖指令 \cp</p></li><li><p>rm指令<br>移除文件或目录<br>基本语法：rm [选项] 要删除的文件或目录<br>常用选项：<br>-r：递归删除整个文件夹<br>-f：强制删除不提示</p></li><li><p>mv指令<br>移动或重命名文件<br>mv source destination<br>若两个文件处于用以文件夹下，且为同一类型，则表示重命名，否则表示移动</p></li><li><p>cat指令<br>查看文件内容 <strong>只能浏览文件而不能修改文件</strong><br>基本语法：<br>cat [选项] 要查看的文件<br>常用选项：-n 显示行号</p></li><li><p>echo指令<br>输出内容到控制台<br>基本语法：echo [选项]  [输出内容]<br>eg:输出环境变量：echo $PATH</p></li><li><p>head指令<br>用于显示文件的开头部分内容，默认情况下head指令显示文件的前10行内容<br>基本语法：<br>head 文件<br>head -n x 文件（查看文件头x行内容）</p></li><li><p>.tail 指令<br>用于显示文件的开头部分内容，默认情况下tail指令显示文件的最后10行内容<br>基本语法：<br>tail 文件<br>tail -n x 文件（查看文件尾x行内容）<br>tail -f 实时追踪文件的更新</p></li><li><p>&gt;指令和&gt;&gt;指令<br>&gt; 覆写， &gt;&gt; 追加</p></li></ul><p><strong>软连接：存放了链接其他文件的路劲，相当于快捷方式</strong><br>创建软连接： ln -s [原文件或目录]  [软连接所处目录]</p><p>history<br>查看已经执行过的历史命令，也可以执行历史命令<br>基本语法：<br>history 显示所有历史命令<br>history x 显示最近使用过的10个命令<br>!x 执行历史编号为x的命令</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>帮助指令：<br>man 获得帮助信息<br>基本语法：man[命令或配置文件]（功能描述：获得帮助信息）</p><p>help指令 获得shell内置命令的帮助信息<br>基本语法:help 命令</p><h2 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h2><h3 id="用户登录和注销"><a href="#用户登录和注销" class="headerlink" title="用户登录和注销"></a>用户登录和注销</h3><p>切换用户 su - 用户名<br>注销用户 logout** (在运行级别3下有效)**</p><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><p>useradd 用户名 添加一个用户并在/home/中创建一个同名文件夹<br>useradd -d 文件路径 用户名 在指定路径中创建用户文件夹</p><p>常用选项：</p><ul><li>-c comment   指定一段注释性描述</li><li>-g 用户组   指定用户所属的用户组</li><li>-G 用户组…   指定用户所属的附加组</li><li>-s Shell文件  指定用户的登录Shell</li></ul><h3 id="指定-x2F-修改密码"><a href="#指定-x2F-修改密码" class="headerlink" title="指定/修改密码"></a>指定/修改密码</h3><p>passwd 用户名 (若不指定用户名默认修改当前用户密码)</p><h3 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h3><p>删除用户但保留home中的文件夹 userdel 用户名<br>彻底删除 userdel -r 用户名</p><h3 id="查询用户信息"><a href="#查询用户信息" class="headerlink" title="查询用户信息"></a>查询用户信息</h3><p>id 用户名<br>whoami 查看<strong>登录用户</strong></p><h3 id="角色组"><a href="#角色组" class="headerlink" title="角色组"></a>角色组</h3><p>系统可以对有共性/权限的用户进行统一管理。</p><p>添加组 groupadd 组名<br>删除组 groupdel 组名<br>往组中添加用户 useradd -g 用户组 用户名（若没有指定组，则默认会生成一个与用户同名的组，然后将用户放进去）<br>修改用户组别：usermod -g 用户组 用户名</p><h3 id="用户和组相关文件"><a href="#用户和组相关文件" class="headerlink" title="用户和组相关文件"></a>用户和组相关文件</h3><p>/etc/passwd 文件<br>用户的配置文件，记录用户的各种信息<br>每行的含义：用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</p><p>/etc/shadow 文件<br>口令的配置文件<br>每行的含义：登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</p><p>/etc/group 文件<br>组的配置文件，记录Linux包含的组的信息<br>每行含义：组名:口令:组标识号:组内用户列表</p><h2 id="搜索查找指令"><a href="#搜索查找指令" class="headerlink" title="搜索查找指令"></a>搜索查找指令</h2><ul><li><p>find指令</p><ul><li>从指定目录向下递归遍历各个子目录，将满足条件的文件或目录显示在终端</li><li>基本语法：find [搜索范围] [选项]</li><li>选项说明：<ul><li><ol><li>-name&lt;文件名&gt; 按照指定的文件名格式查找文件</li></ol></li><li><ol start="2"><li>-user &lt;用户名&gt; 查找属于指定用户名所有文件</li></ol></li><li><ol start="3"><li>-size &lt;文件大小&gt;(单位：k,M,G) 按照指定的文件大小查找文件</li></ol></li></ul></li></ul></li><li><p>locate指令</p><ul><li>locate指令可以快速定位文件路径。locate会利用<strong>事先建立的系统中所有文件名称及路径的locate数据库实现快速定位给定的文件</strong>(不包含/tmp文件夹)。该指令**无需遍历整个系统文件 **，查询速度较快，但必须定期更新数据库。</li><li>基本语法：locate 搜索文件             updatedb更新数据库</li></ul></li><li><p>grep指令</p><ul><li>grep过滤查找</li><li>基本语法： grep [选项] 查找内容 源文件</li><li>常用选项：-n 显示匹配及行号  -j 忽略字母大小写</li></ul></li><li><p>**管道符号 | **</p><ul><li>表示将前一个命令的处理结果传递给后面的命令处理。</li></ul></li></ul><h2 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h2><p>0：关机<br>1：单用户【找回丢失密码】<br>2：多用户状态没有网络服务<br>3：多用户状态有网络服务<br>4：系统未使用保留给用户（没什么用）<br>5：图形界面<br>6：系统重启</p><p>调整运行级别：init [0123456]<br>查看当前运行级别：systemctl get-default<br>调整默认运行级别：systemctl set-default TARGET.target<br>multi-user.target:多用户级别<br>graphical.target:图形化级别</p><h2 id="磁盘管理（待补全）"><a href="#磁盘管理（待补全）" class="headerlink" title="磁盘管理（待补全）"></a>磁盘管理（待补全）</h2><p>df</p><p>列出文件系统的整体磁盘使用量</p><table><thead><tr><th>选项参数</th><th>功能</th></tr></thead><tbody><tr><td>-a</td><td>列出所有的文件系统</td></tr><tr><td>-k</td><td>以KBytes的容量显示各文件系统</td></tr><tr><td>-m</td><td>以MBytes的容量显示各文件系统</td></tr><tr><td>-h</td><td>以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示</td></tr><tr><td>-T</td><td>显示文件系统类型</td></tr><tr><td>-i</td><td>不用硬盘容量，而以inode的数量来表示</td></tr></tbody></table><p>du</p><p>查询指定目录的磁盘占用情况</p><table><thead><tr><th>选项参数</th><th>功能</th></tr></thead><tbody><tr><td>-a</td><td>列出所有的文件系统</td></tr><tr><td>-k</td><td>以KBytes的容量显示各文件系统</td></tr><tr><td>-m</td><td>以MBytes的容量显示各文件系统</td></tr><tr><td>-h</td><td>以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示</td></tr><tr><td>-s</td><td>列出总量而已，而不列出每个各别的目录占用容量</td></tr><tr><td>-S</td><td>不包括子目录下的总计</td></tr></tbody></table><h2 id="任务调度-Crond"><a href="#任务调度-Crond" class="headerlink" title="任务调度 Crond"></a>任务调度 Crond</h2><h3 id="Crontab"><a href="#Crontab" class="headerlink" title="Crontab"></a>Crontab</h3><p>定时执行某项任务</p><p> 语法：crontab [-u user] {-l | -r | -e}</p><p>-u user  设定指定user的时程表</p><table><thead><tr><th>常用选项</th><th>功能</th></tr></thead><tbody><tr><td>-e</td><td>执行文字编辑器来设定时程表，内定的文字编辑器是 VI，如果你想用别的文字编辑器，则请先设定 VISUAL 环境变数来指定使用那个文字编辑器(比如说 setenv VISUAL joe)</td></tr><tr><td>-r</td><td>删除目前的时程表</td></tr><tr><td>-l</td><td>列出目前的时程表</td></tr></tbody></table><p>时间格式：</p><pre class="line-numbers language-none"><code class="language-none">f1 f2 f3 f4 f5 program<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执行的程序。</li><li>当 f1 为 * 时表示每分钟都要执行 program，f2 为 * 时表示每小时都要执行程序，其馀类推</li><li>当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其馀类推</li><li>当 f1 为 */n 时表示每 n 分钟个时间间隔执行一次，f2 为 */n 表示每 n 小时个时间间隔执行一次，其馀类推</li><li>当 f1 为 a, b, c,… 时表示第 a, b, c,… 分钟要执行，f2 为 a, b, c,… 时表示第 a, b, c…个小时要执行，其馀类推</li></ul><p>重启Crond服务</p><p>service crond restart</p><h3 id="at"><a href="#at" class="headerlink" title="at"></a>at</h3><p>at命令是一次性定时计划任务，at的守护进程atd会以后台模式运行，检查作业队列来进行</p><p>默认情况下，atd守护进程每60秒检查作业队列，有作业时，会检查作业运行时间，如果时间于当前时间匹配，则运行此作业</p><p>语法：at [选项] [时间]</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-m</td><td>当 at 工作完成后，无论命令是否输出，都用 E-mail 通知执行 at 命令的用户。</td></tr><tr><td>-c 工作标识号</td><td>显示该 at 工作的实际内容。</td></tr><tr><td>-t 时间</td><td>在指定时间提交工作并执行，时间格式为 [[CC]YY]MMDDhhmm。</td></tr><tr><td>-d</td><td>删除某个工作，需要提供相应的工作标识号（ID），同 atrm 命令的作用相同。</td></tr><tr><td>-l</td><td>列出当前所有等待运行的工作，和 atq 命令具有相同的额作用。</td></tr><tr><td>-f 脚本文件</td><td>指定所要提交的脚本文件。</td></tr></tbody></table><p>时间格式</p><table><thead><tr><th>格式</th><th>用法</th></tr></thead><tbody><tr><td>HH:MM</td><td>比如 04:00 AM。如果时间已过，则它会在第二天的同一时间执行。</td></tr><tr><td>Midnight（midnight）</td><td>代表 12:00 AM（也就是 00:00）。</td></tr><tr><td>Noon（noon）</td><td>代表 12:00 PM（相当于 12:00）。</td></tr><tr><td>Teatime（teatime）</td><td>代表 4:00 PM（相当于 16:00）。</td></tr><tr><td>英文月名 日期 年份</td><td>比如 January 15 2018 表示 2018 年 1 月 15 号，年份可有可无。</td></tr><tr><td>MMDDYY、MM/DD/YY、MM.DD.YY</td><td>比如 011518 表示 2018 年 1 月 15 号。</td></tr><tr><td>now+时间</td><td>以 minutes、hours、days 或 weeks 为单位，例如 now+5 days 表示命令在 5 天之后的此时此刻执行。</td></tr></tbody></table><p>eg：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~J<span class="token comment"># at 02:00 2013-07-26</span>at<span class="token operator">&gt;</span> /bin/syncat<span class="token operator">&gt;</span> /sbin/shutdown -h nowat<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>EOT<span class="token operator">&gt;</span>job <span class="token number">9</span> at <span class="token number">2013</span>-07-26 02:00<span class="token comment">#在指定的时间关机。在一个at任务中是可以执行多个系统命令的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>atq:查看当前等待运行的job</p><p>atrm [工作号] 删除指定的job</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Remake | git</title>
      <link href="/2022/06/30/git/"/>
      <url>/2022/06/30/git/</url>
      
        <content type="html"><![CDATA[<p>git极简指南</p><span id="more"></span><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="1-处理数据的方式"><a href="#1-处理数据的方式" class="headerlink" title="1. 处理数据的方式"></a>1. 处理数据的方式</h2><p>记录当前项目快照，而非像其他版本管理工具一样记录更改。</p><p>对于在没有改动的文件，会让其指向之前版本的对应文件。</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/gitdealdata.png" alt="dealdata"></p><blockquote><p>git中数据的三种状态</p></blockquote><p>modified : 文件内容被修改，但还未被添加到暂存区</p><p>staged : 文件修改被提交到暂存区，下个版本会体现该修改</p><p>committed : 修改被提交到本地仓库</p><blockquote><p>git 存储数据的结构</p></blockquote><p>Git 用 tree 来表示每一份项目快照。对于没有修改的文件，git不会重复存储。</p><p>git会保留每一个文件的所有版本</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/gitobject%20graph.png" alt="object graph"></p><h2 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2. 基本用法"></a>2. 基本用法</h2><blockquote><p>git clone <em>URI-of-remote-repo</em> [<em>project-name</em>]</p></blockquote><p>克隆远程仓库到本地</p><blockquote><p>git init</p></blockquote><p>初始化本地仓库</p><p>–initial-branch 初始化分支</p><p>–bare 创建一个裸仓库（纯git目录，无法进行添加文件等操作，一般用于服务器）</p><p>–template 通过模板来构建自定义目录</p><blockquote><p>git diff</p></blockquote><p>查看修改的内容(不包含在暂存区的修改)</p><p>–staged 包含在暂存区的修改</p><blockquote><p>git show [id : filename]</p></blockquote><p>显示历史版本/指定版本信息，同时显示文件被修改的具体内容。</p><p>类似于 git log -p</p><blockquote><p>git status</p></blockquote><p>查看当前版本的详细情况</p><blockquote><p>git stash</p></blockquote><p>将当前修改保存，并恢复到修改之前的状态</p><p>git stash list 查看当前保存的修改</p><p>git stash pop 弹出保存的修改，并于后来进行的修改合并</p><blockquote><p>git pull</p></blockquote><p>获取远程仓库的修改，并将其与本地仓库最新版本合并</p><blockquote><p>git merge</p></blockquote><p>合并修改</p><p>若出现合并冲突，使用<code>git status</code>查看冲突文件并手动处理</p><p>解决冲突后要将文件重新提交到本地仓库</p><p>–continue 继续合并  –abort 抛弃本次合并</p><blockquote><p>git reset</p></blockquote><p>取消文件的暂存状态</p><p>git reset HEAD filename</p><blockquote><p>git restore</p></blockquote><p>git restore filename 丢弃工作区更改</p><p>git restore –staged filename 取消暂存</p><blockquote><p>git fetch</p></blockquote><p> 拉取远程某些分支的最新代码，不会执行merge操作</p><blockquote><p>git remote</p></blockquote><p>配置远程仓库</p><p>git remote add 远程仓库名 [url]</p><p>git remote set-url –add –push 远程仓库名 [url]  修改指定远程仓库的push目的地</p><blockquote><p>git gc</p></blockquote><p>删除一些不必要的object并进行压缩</p><p>git reflog expire –expire=now –all 取消操作记录日志</p><p>git gc –prune=now 让gc处理当前时间点前的object</p><blockquote><p>密钥配置</p></blockquote><p>ssh-keygen -t ed25519(加密算法) -C [email]</p><h2 id="3-原理介绍"><a href="#3-原理介绍" class="headerlink" title="3.原理介绍"></a>3.原理介绍</h2><h3 id="3-1-Objects"><a href="#3-1-Objects" class="headerlink" title="3.1 Objects"></a>3.1 Objects</h3><p>commit, tree, blob在git中统称为Object</p><p>blob：存储文件内容</p><p>Tree：存储文件目录信息</p><p>commit：存储提交信息，一个commit可以对应唯一的一个版本代码</p><h3 id="3-2-Refs"><a href="#3-2-Refs" class="headerlink" title="3.2 Refs"></a>3.2 Refs</h3><p>refs的内容就是对应的commit ID</p><p>refs/head前缀表示的是分支</p><h3 id="3-3历史版本"><a href="#3-3历史版本" class="headerlink" title="3.3历史版本"></a>3.3历史版本</h3><p>commit中有parent字段，可通过串联获取历史版本</p><blockquote><p>修改历史版本</p></blockquote><p>git commit –amend</p><p>修改上一次提交的message，只会新增一个commit object，相关的tree ,parent都不变</p><p>git fsck –lost-found查找悬空的commit（没有refs指向他）</p><h3 id="3-4-代码合并"><a href="#3-4-代码合并" class="headerlink" title="3.4 代码合并"></a>3.4 代码合并</h3><blockquote><p>Fast-Forward</p></blockquote><p>不会产生一个merge节点，合并后保持线性历史，如果目标分支有更新，则要通过rebase操作更新源分支</p><p>git merge 分支名 –ff-only</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/gitfast-forward.png" alt="fast-forward"></p><blockquote><p>Three way forward</p></blockquote><p>三方合并，会产生一个merge节点。</p><p>git merge –no-ff</p>]]></content>
      
      
      <categories>
          
          <category> Remake </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++</title>
      <link href="/2022/06/30/Cpp/"/>
      <url>/2022/06/30/Cpp/</url>
      
        <content type="html"><![CDATA[<p>C++极简笔记</p><span id="more"></span><h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><blockquote><p>ostream</p></blockquote><p>只能使用<code>&lt;&lt;</code>运算符</p><p><strong>将任何类型的数据转换成字符串并传输给流</strong></p><blockquote><p>istream</p></blockquote><p>只能使用<code>&gt;&gt;</code>运算符</p><p><strong>将流中的字符串转换成对应的数据类型</strong></p><blockquote><p>cin</p></blockquote><p>每一次读取数据只会读取到下一个空白符为止。所有没有被读走的数据会保留在缓冲区。</p><blockquote><p>4种表示流状态的的bit</p></blockquote><p>Good bit : 准备好读写</p><p>Fail bit : 之前的操作失败，之后的所有bit都被冻结</p><p>EOF bit :  之前的bit已经到达文件尾部</p><p>Bad bit : 外部错误，无法从外部数据源读取数据到缓冲区，通常无法恢复</p><h2 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h2><blockquote><p>vector</p></blockquote><p>若直接使用下标访问，会将数组超限错误静默处理。建议使用at()方法。</p><blockquote><p>deque</p></blockquote><p>头插速度更加快，但是访问元素速度相对较慢。</p><blockquote><p>map/set</p></blockquote><p>数据按照键排序存储（排序方式自定义），在迭代访问一系列元素时速度较快</p><blockquote><p>unordered_map/unordered_set</p></blockquote><p>数据无序存储，访问单个元素时较快。</p><blockquote><p>multimap</p></blockquote><p>一个键可以对应多个值</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">unordered_multimap&lt;string,int&gt; map;    map.insert({"cxc", 1});    map.insert({"cxc", 10});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>iterator</p></blockquote><p>分类：</p><ul><li>输入/输出迭代器</li><li>Forward iterator : 同时具备写入与读取的功能</li><li>Bidirectional iterator : 具有以上所有功能，且既可以向前也可以向后移动，接受<code>--</code>运算符</li><li>Random Access iterator : 具有以上所有功能，且可对迭代器任意加减某个数。</li></ul><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>struct 就是一个特殊的类，但是他的所有属性都是公开的。</p><h4 id="修饰词"><a href="#修饰词" class="headerlink" title="修饰词"></a>修饰词</h4><blockquote><p>private</p></blockquote><p>通常包含所有的类属性。并且用户不能直接访问或修改被<code>private</code> 修饰的内容。</p><blockquote><p>public</p></blockquote><p>可以被用户直接访问。通常定义了一系列与私有内容实现交互的内容。</p><p>tips:C++中的this是指向当前对象的一个指针，不是引用。</p><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><ol><li>default construction: the construction takes no parameters</li><li>copy construction: use an object to construct another construction as the copy</li></ol><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; vec{} // default constructionvector&lt;int&gt; vec{1,2,3} // regular construction<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>做深拷贝时要注意，若拷贝对象中存储的是指针类型，则应深拷贝指针指向的对象而非指针本身。直接调用STL库中的拷贝构造只会深拷贝存储的对象。</p><p>copy assignment: <em>删除旧的对象</em>，将其变量名用于另一个变量的拷贝。首先确保<code>另一个变量</code>不是自己本身。</p><p>tips: </p><ul><li><p>拷贝构造器，拷贝赋值，析构函数要么全用默认，要么全部自定义。</p></li><li><p>应显示指明子类的构造函数，默认会使用基类的构造函数。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Drink {    private:    std::string _flavor    public:Drink() = default; // 显式指明默认构造器    Drink(std::string flavor) : _flavor(flavor) {}}class Tea : public Drink {    public:    Tea() = default;    Tea(string flavor) : Drink(flavor) {} // invoke base constructor}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>若构造器使用explicit修饰，则该构造器不能对参数作隐式的类型转换，也不能用拷贝初始化。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">explicit HashMap(size_t bucket_count, const H&amp; hash = H());<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于声明了noexcept的函数，编译器会对其进行优化，但此类函数一旦抛出异常，就会终止程序。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void func() noexcept<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Initializer_list constructor</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">myvector(const myvector&lt;T&gt;&amp; other) : t_size(other.t_size), length(other.length) {        datas = new T[length];        for (int i = 0; i &lt; t_size; i++) {            datas[i] = other.datas[i];        }    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="折构函数"><a href="#折构函数" class="headerlink" title="折构函数"></a>折构函数</h4><p>删除单个对象关键字：delete</p><p>删除数组关键字：delete []</p><p>折构函数声明：ClassName::~ClassName()</p><p>折构函数不必显示调用，在离开作用域时会被自动调用。</p><p><strong>若一个类要被继承，则必须将其析构函数设置为虚函数</strong></p><h4 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h4><p>允许类外的对象访问类内的私有对象</p><p>初始化列表</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">private:int logicalSize;StringVector::StringVector() : logicalSize(0) {}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>语法</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class A {    public:    virtual void make() = 0; // The class implementing A must define this method};// 此处的public代表B中所有由A继承来的方法与属性的访问限制照旧class B : public A { // B implement A    ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于一个接口，其只能包含纯虚函数。</p><p>对于非虚成员，所有的在父类中与子类成员同名的成员都会被隐藏。</p><p>只有声明为虚函数的方法会被动态绑定到子类上，其余方法一概到编译类型中去寻找。</p><blockquote><p>concept (only C++20)</p></blockquote><p>concept是一个在编译期间进行判定的断言，属于接口的一类</p><p>对模板类的类型参数进行一定的约束。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">template &lt;typename It, typename Type&gt;requires Input_Iterator&lt;It&gt; &amp;&amp; Iterator_of&lt;It&gt; &amp;&amp; Equality_comparable&lt;Value_type&lt;It&gt;, Type&gt;int count(It it, Type val){    ...}template &lt;typename It, typename Type&gt;concept DerivedFrom = Input_Iterator&lt;It&gt; &amp;&amp; Iterator_of&lt;It&gt; &amp;&amp; Equality_comparable&lt;Value_type&lt;It&gt;, Type&gt;template &lt;class D, class B&gt;int count(It it, Type val) requires DerivedFrom&lt;D, B&gt;{    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Lambada"><a href="#Lambada" class="headerlink" title="Lambada"></a>Lambada</h2><p>语法：</p><p>[capture clause] (parameter) -&gt; returnType {function body}</p><p>capture clause:give access to outside variables</p><p>stable_partition()</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">BidirectionalIterator stable_partition (BidirectionalIterator first,                                        BidirectionalIterator last,                                        UnaryPredicate pred);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>将集合中的元素分成两组，一组符合pred要求，一组不符合，并且不改变各元素相对位置。</p><p>tips：如果调用非STL内置的方法对容器进行操作，该方法只能操作容器内容，但容器大小不会动态变化。</p><h2 id="Const"><a href="#Const" class="headerlink" title="Const"></a>Const</h2><p> 被const修饰的变量不可被修改，包括该变量中的内容。同时若一个函数的参数为const，则在该函数调用的所有函数中都必须满足const，(即不能将一个const参数传递给非const参数)。</p><blockquote><p> const on objects</p></blockquote><p>只允许调用const function 并且将所有的public成员当作被const修饰</p><blockquote><p>const on functions</p></blockquote><p>保证这个函数不会调用除const functions之外的函数，并且不允许修改任何非静态，非可变的成员</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void fun() const;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>const pointer</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// read from right to left// const iterator 类似于常量指针int * const p; // constant pointer to a non-const intconst int * p; // non-const pointer to a const int// const_iterator 类似于指针常量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tips：一个被const修饰的对象同样不能调用非const方法，因此建议在实现一个类的时候，同时实现const和非const两个版本。</p><h2 id="lvalue-and-rvalue"><a href="#lvalue-and-rvalue" class="headerlink" title="lvalue and rvalue"></a>lvalue and rvalue</h2><p>lvalue:被变量名(地址)标识的表达式，可以用<code>&amp;</code>取到地址</p><p>rvalue:临时变量，无法用&amp;取到地址， 无法被保存。</p><p>右值只出现在寄存器中，而在堆栈中没有空间。</p><p><code>&amp;</code>为左值引用，只能绑定左值</p><p><code>&amp;&amp;</code>为右值引用，只能绑定右值</p><p>tips:</p><ul><li>被const修饰的左值引用可以绑定右值。 re：非const修饰的左值引用可以修改指向对象的内容，但右值明显是不可以被修改的。</li><li>右值引用绑定右值，但右值引用本身是个左值。</li></ul><h2 id="RAII"><a href="#RAII" class="headerlink" title="RAII"></a>RAII</h2><p>使用new申请的存储空间位于堆中，若在指向它的指针消失前，其存储空间没有被释放，则其永远在堆中占有那部分空间，但无法被访问到，造成内存泄漏。</p><p>在程序中需要被手动释放的资源</p><table><thead><tr><th></th><th>Acquire</th><th>Release</th></tr></thead><tbody><tr><td>Heap memory</td><td>new</td><td>delete</td></tr><tr><td>Files</td><td>open</td><td>close</td></tr><tr><td>Locks</td><td>try_clock</td><td>unlock</td></tr><tr><td>Sockets</td><td>socket</td><td>close</td></tr></tbody></table><p>tips: 我们无法保证当异常抛出时，delete会被正常执行。因此需要妥善处理异常，避免内存泄漏。</p><blockquote><p>RAII</p></blockquote><p>在构造器中获取所有资源</p><p>在析构函数中释放所有资源</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">// you don't need to invoke closeifstream input("xxx.txt");// you must invoke closeifstream input();input.open("xxx.txt");input.close();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SmartPointer"><a href="#SmartPointer" class="headerlink" title="SmartPointer"></a>SmartPointer</h2><blockquote><p>std::unique_pointer</p></blockquote><p>唯一指向某一块内存资源，并在指针超出作用域时删除对象。</p><p>因此该指针不允许拷贝。</p><blockquote><p>std::shared_pointer</p></blockquote><p>内存资源可以被多个指针指向，在最后一个指向的指针消失时，摧毁对象。</p><p>相关构造器 (用这个)</p><p>make_XXX<class>(args)</class></p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>当要进行多线程时，使用原子数据类型</p><p>相关库</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/C%2B%2B20220630105430.png"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字节青训整合笔记</title>
      <link href="/2022/06/30/coroutine/"/>
      <url>/2022/06/30/coroutine/</url>
      
        <content type="html"><![CDATA[<p>啥都听不懂的青训营 摸鱼笔记</p><span id="more"></span><h1 id="Go语言基本特质"><a href="#Go语言基本特质" class="headerlink" title="Go语言基本特质"></a>Go语言基本特质</h1><h2 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h2><p>协程：用户态，轻量级线程，栈MB级别</p><p>线程：内核态，线程中可以运行多个协程，栈KB级别</p><h3 id="协程主要通信方式"><a href="#协程主要通信方式" class="headerlink" title="协程主要通信方式"></a>协程主要通信方式</h3><p>通过通信共享内存，类似生产者消费者模型</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/coroutine2022-05-08%2019-45-09%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="协程通信"></p><blockquote><p>Channel 通道</p></blockquote><p>make(chan 元素类型, [缓冲大小])</p><p>无缓冲通道又称为同步通道</p><p>适当的缓冲大小可以弥补生产者消费者执行速度不均衡的问题 </p><blockquote><p>同步</p></blockquote><p>​可使用lock,WaitGroup实现同步。</p><h2 id="Go的依赖管理"><a href="#Go的依赖管理" class="headerlink" title="Go的依赖管理"></a>Go的依赖管理</h2><h3 id="1-GoPath"><a href="#1-GoPath" class="headerlink" title="1. GoPath"></a>1. GoPath</h3><blockquote><p>结构</p></blockquote><ul><li><p>bin: 项目编译的二进制文件</p></li><li><p>pkg: 项目编译的中间产物，加速编译</p></li><li><p>src: 项目源码</p><p>项目代码直接依赖于src下的源码</p><p>缺陷：无法处理项目代码依赖不同版本的情况</p></li></ul><h3 id="2-GoVendor"><a href="#2-GoVendor" class="headerlink" title="2. GoVendor"></a>2. GoVendor</h3><p>项目目录下新增vendor文件，所有依赖包副本形式放在$ProjectRoot/vendor</p><p>依赖寻址：有先到vendor下，再到GoPath下</p><p>问题：</p><ul><li>无法控制依赖版本</li><li>更新项目又可能出现依赖冲突，导致编译出错。</li><li>本质：仍旧依赖的是源码，无法通过版本分辨</li></ul><h3 id="3-Go-Module"><a href="#3-Go-Module" class="headerlink" title="3. Go Module"></a>3. Go Module</h3><p>通过go.mod文件进行版本管理</p><blockquote><p>依赖管理三要素</p></blockquote><pre><code> 1. 配置文件，描述依赖   go.mod 1. 中心仓库管理依赖库       Proxy 1. 本地工具                         go get/mod</code></pre><p>对于所需要的不同版本的依赖，go会采取最低兼容版本算法。</p><blockquote><p>依赖分发-Proxy</p></blockquote><p>在源站与目标之间加一层代理，代理缓存源站中的依赖</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/coroutine2022-05-08%2020-34-11%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/coroutine2022-05-08%2020-34-35%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><h3 id="1-规则"><a href="#1-规则" class="headerlink" title="1. 规则"></a>1. 规则</h3><p>所有测试文件以_test.go结尾</p><p>函数命名：func Testxx(*testing.T)</p><p>初始化逻辑放到TestMain中</p><h3 id="2-mock"><a href="#2-mock" class="headerlink" title="2. mock"></a>2. mock</h3><p>模仿真实对象行为的模拟对象</p><p>mock模拟的不是测试对象而是<strong>测试对象的依赖</strong></p><p>Why？</p><ul><li>(1)提高 A 的测试覆盖率。A 依赖 B，本质上依赖的是 B 的返回结果，也就是说 B 的返回结果会影响 A 的行为。通过 mock B 我们可以构造各种正常和异常的来自 B 的返回结果，从而更充分测试 A 的行为。</li><li>(2)避免 B 的因素从而对 A 产生影响。依赖真实的 B 去测试 A 可能有很多问题：B 的开发没有完成时无法测试 A;B 有阻塞性bug 时无法测试 A;B 的依赖 C 有阻塞性 bug 时无法测试 A;</li><li>(3)提高 A 的测试效率。B 的真实行为可能很慢，而 B 的模拟行为是非常快的，因此可以加快 A 的测试执行速度。</li></ul><h1 id="高性能Go语言发行版优化与落地实践"><a href="#高性能Go语言发行版优化与落地实践" class="headerlink" title="高性能Go语言发行版优化与落地实践"></a>高性能Go语言发行版优化与落地实践</h1><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><blockquote><p>业务层优化</p></blockquote><ul><li>针对特定场景，具体问题，具体分析</li><li>容易获得较大性能收益</li></ul><blockquote><p>语言运行时优化</p></blockquote><ul><li>解决更通用的性能问题</li><li>考虑更多场景</li><li>tradeoffs</li></ul><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h3 id="自动内存管理"><a href="#自动内存管理" class="headerlink" title="自动内存管理"></a>自动内存管理</h3><p>由程序语言的运行时系统回收动态内存</p><ul><li>避免手动内存管理，专注于业务逻辑</li><li>保证内存使用的正确性和安全性</li></ul><blockquote><p> 三个任务</p></blockquote><ul><li>为新对象分配空间</li><li>找到存活对象</li><li>回收死亡对象的内存空间</li></ul><blockquote><p>相关概念</p></blockquote><ul><li>Mutator:业务线程，分配新对象，修改对象指向关系</li><li>Collector:GC线程，找到存活对象，回收死亡对象的内存空间</li><li>Serial GC: 只有一个Collector，每次进行GC操作时需要暂停程序</li><li>Parallel GC: 支持多个Collector同时回收GC算法</li><li>Concurrent GC:业务代码与垃圾回收同时执行（Collector必须感知对象指向关系的改变）</li></ul><h3 id="追踪垃圾回收"><a href="#追踪垃圾回收" class="headerlink" title="追踪垃圾回收"></a>追踪垃圾回收</h3><p>对象被回收的条件：指针指向关系不可达的对象</p><p>标记根对象：静态变量，全局变量，常量，线程栈等（所有在程序运行时永远存活的对象）</p><p>标记：找到可达对象</p><p>清理：所有不可达对象（根据对象的生命周期，使用不同的标记和清理策略）</p><ul><li>将存活对象复制到另外的内存空间</li><li>将死亡对象的内存标记为“可分配”</li><li>移动并整理存活对象</li></ul><h3 id="分代GC"><a href="#分代GC" class="headerlink" title="分代GC"></a>分代GC</h3><p>Intution:很多对象在分配出来后很快就不再使用了</p><p>每个对象的年龄：经历过GC的次数</p><p>不同年龄的对象处于heap的不同区域</p><ol><li><p>年轻代</p><p>常规的对象分配</p><p>由于存活对象很少，可以直接复制到其他空间</p><p>GC吞吐率高</p></li><li><p>老年代</p><p>对象趋向于一直活着，反复复制开销大</p><p>可以采用标记对象的方法。</p></li></ol><h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>每个对象都有一个与之关联的引用数目</p><p>对象存活的条件：当且仅当引用数大于0</p><p>优点：</p><ol><li>内存管理的操作被平摊到程序执行过程中</li><li>内存管理不需要了解runtime的实现细节</li></ol><p>缺点：</p><ol><li>维护引用计数的开销较大：通过原子操作保证对引用技术操作的原子性和可见性</li><li>无法回收环形数据结构 （所有对象相互之间会引用，虽然该数据结构已经不可达，但因为其中每个对象的引用数不会降为0，所以无法被回收）</li><li>内存开销：每个对象都引入的额外内存空间存储引用数目</li><li>回收内存依然可能引发暂停</li></ol><h3 id="Balanced-GC"><a href="#Balanced-GC" class="headerlink" title="Balanced GC"></a>Balanced GC</h3><p>GAB对于Go内存管理来说是个对象</p><p>本质：将多个小对象的分配合并成一次对象的分配</p><p>利用三个指针标记内存块的起点和终点，以及下一块可用内存的地址</p><p>问题：GAB的对象分配方式会导致内存被延迟释放。例如，GAB中仅存活了1个小对象，此时GAB无法释放，但又浪费了大量内存。</p><p>解决：当GAB总大小超过一定阈值时，将GAB中存活的对象复制到另外分配的GAB中（用copying GC 的算法管理小对象）</p><h2 id="编译优化"><a href="#编译优化" class="headerlink" title="编译优化"></a>编译优化</h2><h3 id="编译器的结构"><a href="#编译器的结构" class="headerlink" title="编译器的结构"></a>编译器的结构</h3><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/high_performance2022-05-14%2022-00-44%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p><h3 id="函数内联"><a href="#函数内联" class="headerlink" title="函数内联"></a>函数内联</h3><p>将被调用函数的函数体的副本替换到调用位置，同时重写代码以反映参数的绑定</p><p>优点：</p><ol><li>消除函数调用开销，例如传递参数，保存寄存器等</li><li>将过程间分析转化为过程内分析，帮助其他优化</li></ol><p>缺点：</p><ol><li>函数体变大，(icache)不友好</li><li>编译生成的Go镜像变大</li></ol><h3 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h3><p>分析代码中指针的动态作用域，指针在何处可以被访问</p><p>思路：</p><p>从对象分配处出发，沿着控制流，观察对象的数据流</p><p>若发现指针p在当前作用域s：</p><ol><li><p>作为参数传递给其他函数</p></li><li><p>传递给全局变量</p></li><li><p>传递给其他的goroutine</p></li><li><p>传递给已逃逸的指针指向的对象</p><p>即，若该对象可以被外部函数调用，则称其逃逸出s</p></li></ol><p>优化：增加函数的内联，扩大函数边界，使得原本逃逸的对象只能作用在当前作用域。而未逃逸的对象可以在栈上分配，并且无论是分配还是回收都很快，同时也减少了在heap上的分配，减小GC负担。</p><h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><p>网络接入 —— 路由</p><p>路由不是对称的，根据当前的网络情况，响应包的路径也可能跟请求包不同</p><p>路由也不会修改IP地址，在数据包传输过程中，源IP与目的IP均不会发生变化，只会修改MAC地址，同时在发出数据包时不仅要知道目的MAC，还要知道发出的端口。</p><p>ARP请求不会跨网段发送，若目的与源不在同一网段，则会先寻找下一跳的MAC地址，利用ARP逐级跳转。</p><blockquote><p>免费ARP</p></blockquote><p>发送一个包含新IP的ARP数据包，提示所有服务器刷新ARP表</p><ul><li>当网段中新增了一台机器时，可以通过这种方式让其余机器刷新ARP表，而避免在使用时临时刷新。</li><li>当服务器有新增IP时，可以通过免费ARP检测IP冲突。</li></ul><p>PS：Mac地址不能替代IP地址 -&gt; IP地址的存在实际上就是为了解决二层协议（包括Mac）的兼容问题。</p><blockquote><p>SSL/TLS非对称加密</p></blockquote><p>将数据进行加密之后再传输，并且使用的加密算法也进行加密，接收方通过与发送方协商获知所使用的加密算法。</p><h2 id="网络提速"><a href="#网络提速" class="headerlink" title="网络提速"></a>网络提速</h2><p>对于静态资源，使用CDN缓存</p><p>对于动态API，优化网络路径</p><h3 id="网络容灾"><a href="#网络容灾" class="headerlink" title="网络容灾"></a>网络容灾</h3><p>故障发生-&gt;故障感知-&gt;自动切换-&gt;服务恢复</p><ol><li>外网容灾<br><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/high_performance2022-05-19%2020-30-07%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></li></ol><p>内部专线出现故障后，切换为外网连接</p><ol start="2"><li>降级容灾</li></ol><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/high_performance2022-05-19%2020-32-53%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png"></p><p>网址会被映射到两个机房，其中一个机房出现问题时，首先进行故障感知，然后判断机房B能否承受住那部分流量，最后才进行切换。</p><ol start="3"><li>缓存</li></ol><p>当程序故障后，就用缓存先响应用户请求</p><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><h3 id="DNS记录类型"><a href="#DNS记录类型" class="headerlink" title="DNS记录类型"></a>DNS记录类型</h3><ol><li>A/AAAA：IP指向记录，前者指向IPv4, 后者指向IPv6</li><li>CNAME：别名记录，配置值为别名或主机名，客户端根据别名继续解析以提取IP地址</li><li>TXT：文本记录，购买证书时需要</li><li>MX：邮件交换记录，用于指向邮件交换服务器</li><li>NS：解析服务器记录，用于指定哪台服务器对于该域名解析</li><li>SOA：起始授权机构记录</li></ol><h2 id="HTTP接入协议"><a href="#HTTP接入协议" class="headerlink" title="HTTP接入协议"></a>HTTP接入协议</h2><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>对称加密：使用相同的秘钥来加密传输内容，一端加密后，对端收到数据会用相同的秘钥来解密</p><p>非对称加密：如果用公钥对数据进行加密，只有用对应的私钥才能解密；如果用私钥对数据进行加密，那么只有用对应的公钥才能解密。</p><h1 id="高质量编程与性能调优"><a href="#高质量编程与性能调优" class="headerlink" title="高质量编程与性能调优"></a>高质量编程与性能调优</h1><blockquote><p>编程原则</p></blockquote><ol><li><p>简单性</p><p>消除“多余的复杂性”，以简单清晰的逻辑编写代码</p></li><li><p>可读性</p></li><li><p>生产力</p></li></ol><h2 id="编码规范"><a href="#编码规范" class="headerlink" title="编码规范"></a>编码规范</h2><p>   注释：</p><ol><li><p>注释应该解释代码作用， 适合注释公共符号</p></li><li><p>注释应该解释代码如何做的，适合注释实现过程</p></li><li><p>注释应该解释代码实现的原因，适合解释代码的外部因素，提供额外的上下文。</p></li><li><p>注释应该解释代码什么情况会出错，适合解释代码的限制条件。</p></li><li><p>公共符号始终需要注释</p><p>PS：代码是最好的注释，注释应提供代码未表达出的上下文信息。</p></li></ol><p>变量命名：</p><ol><li>简洁</li><li>缩略词全部大写，当其位于变量开头其不需要导出时，全部小写</li><li>变量与实际使用位置距离越远，需要携带的上下文信息越多</li></ol><p>函数命名：</p><ol><li>函数名不携带包名的上下文信息</li><li>简短</li><li>当名为foo的包某个函数返回类型Foo时，可以省略类型信息。</li></ol><p>包名：</p><ol><li>只由小写字母组成。不包含大写字母和下划线等字符</li><li>简短并包含一定上下文信息</li><li>不要与标准库同名</li></ol><p>控制流程：</p><ol><li>线性原理，避免嵌套</li><li>正常代码最小缩进</li></ol><h2 id="性能优化-1"><a href="#性能优化-1" class="headerlink" title="性能优化"></a>性能优化</h2><p>Go提供benchmark工具进行基准性能测试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token builtin class-name">test</span> -bench<span class="token operator">=</span>. -benchmen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="性能优化建议"><a href="#性能优化建议" class="headerlink" title="性能优化建议"></a>性能优化建议</h3><h3 id="预分配"><a href="#预分配" class="headerlink" title="预分配"></a>预分配</h3><p>尽量在make阶段确定切片/对象大小</p><p>slice进行扩容时会在已有切片基础上创建切片，不会创建新的底层数组。</p><blockquote><p>场景</p></blockquote><ol><li>原切片较大，代码在原切片基础上新建小切片</li><li>原底层数组在内存中有引用，得不到释放</li></ol><p>此时可以使用copy代替re-slice</p><h3 id="空结构体"><a href="#空结构体" class="headerlink" title="空结构体"></a>空结构体</h3><p>使用空结构体节省内存</p><p>空结构体struct{}实例不占据任何的内存空间</p><p>使用场景：</p><ul><li>节省资源</li><li>空结构体本身具备很强的语义，可以作为占位符使用</li></ul><h3 id="atomic"><a href="#atomic" class="headerlink" title="atomic"></a>atomic</h3><p>锁是通过操作系统来实现，属于系统调用</p><p>atomic操作通过硬件实现，效率更高</p><p>sync.Mutex应该用于保护一段逻辑，而不仅仅是用于保护一个变量</p><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p>架构的定义</p><ul><li>是有关软件整体结构与组件的抽象描述</li><li>用于指导软件系统各个方面的设计</li></ul><h2 id="架构的演进"><a href="#架构的演进" class="headerlink" title="架构的演进"></a>架构的演进</h2><h3 id="单机"><a href="#单机" class="headerlink" title="单机"></a>单机</h3><p>把所有功能都实现在一个进程里，并部署在一台机器上</p><p>优点：简单</p><p>缺点：能提供的服务有限，运维需要停服。</p><h3 id="单体、垂直应用-垂直切分"><a href="#单体、垂直应用-垂直切分" class="headerlink" title="单体、垂直应用 | 垂直切分"></a>单体、垂直应用 | 垂直切分</h3><p>单体架构：分布式部署</p><p>垂直应用架构：按应用垂直切分的单体</p><p>优点：水平扩容，运维不需要停服</p><p>缺点：职责太多，开发效率不高。爆炸半径大（个体出现问题，容易导致整条链停摆）</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/architecture2022-05-22%2021-51-39%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="单体架构"></p><h3 id="SOA"><a href="#SOA" class="headerlink" title="SOA"></a>SOA</h3><p>service-oriented architecture</p><ol><li>将应用的不同功能单元抽象为服务</li><li>定义服务之间的通信标准（核心要点）</li></ol><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/architecture2022-05-22%2022-07-28%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="SOA"></p><h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><p>SOA的去中心化演进方向</p><p><img src="https://raw.githubusercontent.com/FaustProMaxPX/pic_repository/main/img/architecture2022-05-22%2022-09-21%20%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="微服务"></p><p>问题：</p><ul><li>数据一致性</li><li>高可用，不同服务之间如何高效交互</li><li>治理，如何容灾</li><li>解耦 vs 运维  收益是否大于提高的运维成本</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 架构 </tag>
            
            <tag> 高性能 </tag>
            
            <tag> 高质量编程 </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="/2022/06/29/Java/"/>
      <url>/2022/06/29/Java/</url>
      
        <content type="html"><![CDATA[<p>一份关于Java基本操作的笔记</p><span id="more"></span><h1 id="Java随记"><a href="#Java随记" class="headerlink" title="Java随记"></a>Java随记</h1><h2 id="面向过程编程"><a href="#面向过程编程" class="headerlink" title="面向过程编程"></a>面向过程编程</h2><p>同一个模块或不同模块的函数能够不受限制的访问全局性数据，全局数据和函数之间缺乏联系</p><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><p>在程序中包含各种独立而又互相调用的对象的思想。将数据与对数据的操作封装到一个数据类型之中，该数据类型又可以与其他数据类型进行交互。</p><h3 id="2-优势"><a href="#2-优势" class="headerlink" title="2.优势"></a>2.优势</h3><ul><li>加大封装力度  若在程序投入使用后，部分数据结构必须改变，那么受影响的也只是对象内部的逻辑。</li><li>提升复用性</li><li>提高设计效率</li></ul><h3 id="3-类与对象"><a href="#3-类与对象" class="headerlink" title="3.类与对象"></a>3.类与对象</h3><p>Classes：定义了一件事物的抽象特点。包含了数据以及对数据的操作</p><p>Objects：类的实例</p><h3 id="4-类与类之间的关系"><a href="#4-类与类之间的关系" class="headerlink" title="4.类与类之间的关系"></a>4.类与类之间的关系</h3><ul><li>依赖关系：一个类使用或知道另一个类。是一种瞬时关系，依赖类和目标类进行简单的交互</li><li>关联关系：一个类在很长一段时间内都会与另一个类有合作关系<ul><li>关联关系的三要素：关联的方向、关联的数量、关联的属性</li></ul></li><li>继承关系</li></ul><h3 id="5-对象的创建"><a href="#5-对象的创建" class="headerlink" title="5.对象的创建"></a>5.对象的创建</h3><p>对象变量的声明：在栈中为对象变量分配一个存储地址数据的内存空间</p><p>对象的创建：在堆中分配对象所占的空间，对象变量指向该地址</p><p>对象的销毁：当程序中不存在该对象的引用时，就会销毁</p><h2 id="Java包"><a href="#Java包" class="headerlink" title="Java包"></a>Java包</h2><p>包用于组织、管理类，并且解决类命名冲突问题</p><p>若一个源文件中不加package语句，则指定为缺省包，类文件位于当前工作目录下</p><h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>三元运算符所在表达式会成为一个整体，其精度会由式中最高精度决定。</p><h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>语法: ReturnType funName(TypeName…varName)<br><strong>本质是数组</strong><br>可变参数必须在参数列表的最后一个，并且只能有一个可变参数。</p><h2 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h2><p>1.访问父类的属性但不能访问父类的私有属性：super.属性名/方法名<br>2.访问父类的的构造器：super(参数列表)</p><h2 id="动态绑定机制"><a href="#动态绑定机制" class="headerlink" title="动态绑定机制"></a>动态绑定机制</h2><p>当调用对象方法时，该方法会和该对象的<strong>内存地址/运行类型</strong>绑定<br>当调用对象属性时，<strong>没有动态绑定</strong>.</p><p><strong>类的五大成员：属性，方法，代码块，构造器，内部类</strong></p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>static代码块作用就是对类进行初始化，并且它随着<strong>类的加载</strong>而执行，并且只<strong>执行一次</strong>，而普通代码块每创建一个对象就会执行（可以理解为它和构造函数绑定）</p><p><strong>类什么时候被加载</strong><br>1.创建对象实例的时候(new)<br>2.子类被加载时，父类也会被加载。<br>3.使用静态成员时（静态属性和方法） PS:调用静态成员时不会执行普通代码块中的内容</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>定义：一个类的内部又完整的嵌套了另一个类结构，被嵌套的类称为内部类。<br>特点：可以直接访问私有属性，并且可以体现类与类之间的包含关系。</p><p><strong>内部类的构造器的第一个参数会被显示指定为外部类实例（锚定）</strong></p><p>分类：<br>1.定义在外部类局部位置上（比如方法内）：<br>1)局部内部类（有类名）<br>2)<strong>匿名内部类（没有类名）</strong><br>2.定义在外部类的成员位置上：<br>1)成员内部类（没用static修饰）<br>2)静态内部类（用static修饰）</p><p><strong>局部内部类，匿名内部类的实质是一个对象，一个局部变量，因此不能被外部其他类访问。</strong></p><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>1.可以直接访问外部类的所有成员（包含所有的）<br>2.不能被修饰符所修饰，因为他本质是一个局部变量<br>3.作用域：仅在定义它的方法与代码块中。<br>4.外部其他类不能访问局部内部类。<br>5.若外部类和局部内部类的成员重名时，采取<strong>就近原则</strong>,若要调用外部类成员则要使用<br>外部类名.this.成员 （re：对应成员并非静态变量，需要用对象来调用，此时this相当于指向该外部类的当前对象）</p><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>语法：new 类或接口(参数列表){具体实现} （若实现某个接口则不需要传入参数列表，参数列表会被传递给构造器。） PS:生成的匿名内部类的运行类型不是实现的类或接口。<br>使用环境：类或接口中的抽象方法需要被实现来使用或是要重载重写，但使用次数极少，此时使用匿名内部类可避免额外再创建一个类。</p><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><p>外部其他类访问内部类：<br>1.外部类.内部类 name = 外部类<strong>对象</strong>.new 内部类构造函数<br>2.在外部类中写一个获取内部类的方法<br>3.作用域：整个类体</p><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>1.可以访问任意静态外部类成员<br>2.外部其他类访问静态内部类：外部类.内部类 name = new 外部类.内部类构造函数 (静态内部类不需要用外部类的对象来调用，因此其构造函数可用外部类名调用)</p><h2 id="接口-纯虚基类"><a href="#接口-纯虚基类" class="headerlink" title="接口(纯虚基类)"></a>接口(纯虚基类)</h2><p>1.接口不能被实例化<br>2.接口中所有的方法是public抽象方法, 其中abstract可以省略<br>3.一个普通类实现接口，就必须将该接口中的所有方法都实现，而抽象类可以不必全部实现<br>4.接口中的属性都是final的, 且具体来说是public static final类型的  eg:int a -&gt; public static final int a 即接口中的属性通过接口名来访问。<br>5.接口只能继承其他接口，而非实现其他接口</p><h3 id="接口与继承的区别"><a href="#接口与继承的区别" class="headerlink" title="接口与继承的区别"></a>接口与继承的区别</h3><p>继承的价值主要在于：解决代码的复用性和可维护性<br>接口的价值主要在于：设计，设计好各种规范（方法），让其他类去实现这些方法，更加灵活<br><strong>继承满足的是is-a的关系，而接口满足的是like-a的关系</strong><br>接口在一定程度上实现代码解耦。</p><h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><p>关键字：enum<br>enum的代码块中包含：枚举类<strong>对象</strong>，枚举类的构造函数，方法，属性，代码块<br>其中枚举类的对象必须声明再最开始，且其中每一个对象默认被public static final修饰<br>方法compareTo()会比较两个枚举量的编号<br>方法ordinal()返回编号<br>构造器默认为私有，且只能为私有<br>会隐式继承Enum类，因此不能继承其他类。</p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>注解用于修饰解释 包、类、方法、属性、构造器、局部变量等数据信息。<br>注解不影响程序逻辑，但<strong>注解可以被编译或运行</strong>。</p><p>@Override注解：表明以下方法是被重写的，编译器编译时会去父类搜索是否有同名方法，若检测到没有该方法，则会报错。<br>作用域：方法</p><p>@Deprecated注解：表明以下内容已经过时，不推荐使用<br>作用域：方法、类、字段、包、参数等等</p><p>@SupressWarnings注解：抑制编译器警告<br>语法：@SupressWarnings({要抑制的警告})<br>作用域：方法、类、字段、包、参数等等</p><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>装箱：底层是valueOf()<br>拆箱：底层是XXXValue()</p><p>PS:valueOf()底层原理：程序会缓存一个-128-127的数组，因此在这个范围内的数不会重新创建一个对象，但对于超出该范围的数则会返回一个new的对象</p><h3 id="String类-不可修改，但复用率高"><a href="#String类-不可修改，但复用率高" class="headerlink" title="String类(不可修改，但复用率高)"></a>String类(不可修改，但复用率高)</h3><p>String类实现了Serializable(序列化), Comparable(可比较)接口。<br>字符串使用Unicode编码，每个字符占两个字节。<br><strong>String类用一个value数组存储字符序列，并且它被final修饰，即其地址不可修改</strong>。<br><strong>re:数组本身是一个地址，因此final其实修饰了一个地址，即String的value中的值可以改变，但其地址不可变。</strong></p><p>String的赋值方法:<br>String s1 = “abc” <strong>底层原理：变量s1入栈，然后去常量池中寻找是否有”abc”，若没有，则在常量池中创建，然后s1指向常量池中目标的地址。</strong><br>String s2 = new String(“abc”) <strong>底层原理：变量s2入栈，然后在堆中开辟一块空间用于维护对象，s2指向该空间，然后去寻找常量池中是否有”abc”,若有，则value直接指向它，若没有，则在常量池中先创建，然后value再指向。</strong></p><p>intern()方法：若池中已存在一个等于String对象value值（用equal比较）的对象，则返回常量池中的地址，若没有则在池中创建一个再返回。</p><p>String a = “a” + “b” 会被编译器优化为：String a = “ab”</p><p>String a = “a”; String b = “b”; String c = a + b; 先创建一个StringBuilder类，然后调用两次append() [分别把字符串a和字符串b连入SB对象]，最后返回一个字符串对象。<br>最后 a-&gt;堆中对象-&gt;池中对象</p><p><strong>String每次重新赋值都会重新开辟空间</strong><br><strong>String本身不可像数组一样访问，要用charAt进行访问。</strong><br>substring的参数为(int beginindex, int lastindex)前闭后开<br>replace对调用对象没有影响，它会返回一个新的字符串。<br>compareTo：若两字符串长度不同且在较小长度范围内相等，则返回长度差值，否则会返回第一组不相同的字符的ASCII码差值。<br>format静态方法（和printf用法类似）</p><h3 id="StringBuffer类（可增删，效率较高，线程安全）"><a href="#StringBuffer类（可增删，效率较高，线程安全）" class="headerlink" title="StringBuffer类（可增删，效率较高，线程安全）"></a>StringBuffer类（可增删，效率较高，线程安全）</h3><p>StringBuffer的直接父类是AbstractStringBuilder<br>在父类中有属性char[] value,不是final修饰的，因此该value指向一个<strong>存放在堆中</strong>的字符串<br>StringBuffer是一个final类。</p><h4 id="String-gt-StringBuffer"><a href="#String-gt-StringBuffer" class="headerlink" title="String -> StringBuffer"></a>String -&gt; StringBuffer</h4><p>1.StringBuffer strB = new StringBuffer(str);<br>2.StringBuffer strB = new StringBuffer();  strB = strB.append(str)  append)()会返回当前对象的指向</p><h3 id="StringBuilder（可增删，效率最高，线程不安全）"><a href="#StringBuilder（可增删，效率最高，线程不安全）" class="headerlink" title="StringBuilder（可增删，效率最高，线程不安全）"></a>StringBuilder（可增删，效率最高，线程不安全）</h3><p>与StringBuffer地API兼容，是它的一个简易替换，但<strong>线程不安全</strong>，在单线程情况下建议使用。</p><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p>有SimpleDateFormat类可以与其配套使用<br>SimpleDateFormat用于初始化的参数为日期的格式（字符串）<a href="https://www.runoob.com/java/java-date-time.html">日期时间的格式化代码</a><br>SimpleDateFormat中有方法format可以使日期时间按要求输出<br>parse方法可以用来将字符串转为日期格式（要与其自身格式相符合）（有异常需要处理）</p><h3 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h3><p>Calendar是一个抽象类，且其构造器是私有的，需要用getInstance来获取实例</p><h3 id="LocalDateTime-LocalDate-LocalTime"><a href="#LocalDateTime-LocalDate-LocalTime" class="headerlink" title="LocalDateTime LocalDate LocalTime"></a>LocalDateTime LocalDate LocalTime</h3><p>LocalDateTime获取年月日时分秒 LocalDate获取年月日 LocalTime获取时分秒<br>DateTimeFormatter用于对它进行格式化<br>DateTimeFormatter dtf = DateTimeFormatter.ofPattern(“格式”)</p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><p>规则 :<br>所有泛型方法都有一个类型参数声明部分，声明在方法返回类型之前<br>类型参数能被用来声明返回值类型，并且能作为泛型方法得到的实际参数占位符<br>类型参数只能代表<strong>引用类型</strong><br>在指定类型参数后可以传入该类型或其子类型，默认情况下会给Object类型</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>泛型类： class 类名 &lt;&gt;</p><ul><li>普通成员可以使用泛型（属性、方法）</li><li>使用泛型的数组不能初始化（类型不确定，开辟的空间大小未知）</li><li>静态方法中不能使用类的泛型（静态方法会跟着类的加载进行加载，而当时类的泛型尚未确定），但可以使用方法的泛型</li><li>泛型类的类型，是在创建对象时确定的</li></ul><p>泛型接口：interface 接口名 &lt;&gt;</p><ul><li>静态成员不能使用泛型</li><li>泛型接口的类型参数，在<em>继承接口</em>或<em>实现接口</em>时确定</li></ul><p>泛型方法：&lt;&gt; 返回类型 函数名()</p><ul><li>可以定义在普通类或泛型类中</li><li>泛型被调用时类型会被确定，即对应的类型参数会被绑定到对应类型，但调用结束后会取消绑定。</li></ul><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>规则:在类名后声明类型参数</p><h3 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h3><p>一般使用？代替具体的类型参数<br>类型通配符上限:<br>&lt;? extends class&gt; 泛型参数只能是class子类.<br>类型通配符下限:<br>&lt;? super class&gt; 泛型参数只能是class父类.</p><h2 id="Java集合"><a href="#Java集合" class="headerlink" title="Java集合"></a>Java集合</h2><p>主要包含两种类型的容器：<br>1.Collection 存储一个元素集合 其下有两重要子集 List Set（Collection没有直接实现子类，而是通过子接口实现）<br>2.Map 存储键/值对映射</p><p><strong>在集合中存储的均为对象的引用，因此若在插入集合后对元素进行修改可能会影响删除操作</strong><br>例如在HashSet中，若修改与计算hash值有关的对象属性，则可能会导致删除不成功，因为修改前与修改后生成的hash值不同</p><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><h4 id="Set和List"><a href="#Set和List" class="headerlink" title="Set和List"></a>Set和List</h4><p>Set接口的存储是无序的，不重复的数据。List接口实例存储的是有序的，可重复的元素<br>Set检索效率低下，删除和插入效率高，插入和删除不会引起元素位置改变<br>List和数组类似，可以动态增长，根据实际存储的数据的长度自动增长，查找效率高，插入删除效率低。</p><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><p>ArrayList底层是用<strong>数组</strong>来实现的<br>ArrayList与Vector之间的区别就是ArrayList是<strong>线程不安全</strong>的。<br>ArrayList中维护了一个Object类型的数组 transient Object[] elementData</p><h5 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h5><p>若使用无参构造器来创建，则初始化容量为0，第一个元素添加时，将容量扩展至10，此后如需再次扩容，则扩容为当前容量大小的1.5倍。<br>若使用指定容量的构造器，则之后扩容时，直接1.5倍。<br>扩容使用的是Arrays.copyOf()</p><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><p>Vector底层是 protected Object[] elementData<br>Vector<strong>线程安全</strong><br>扩容机制：<br>如果是无参，默认10，满后按2倍扩。若有参，直接按2倍扩。</p><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><p>底层实现了双向链表和双端队列<br>可以添加任意元素<br>线程不安全</p><h4 id="Java-Iterator"><a href="#Java-Iterator" class="headerlink" title="Java Iterator"></a>Java Iterator</h4><p>iterator本身不存储数据，只用于遍历集合<br>迭代器可以类比为有头结点的链表<br>迭代器it三个基本操作：next, hasNext, remove<br>it.next() 返回下一个元素（Object），并且更新迭代器的状态<br>it.hasNext()用于检测集合中是否还有元素<br>it.remove() 将迭代器返回的元素删除 remove掉的是当前指向的元素，而非next元素</p><p>获取迭代器：集合想获取一个迭代器可以使用iterator()方法</p><p><strong>增强for的底层就是迭代器。</strong></p><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><p>底层机制：<br>1.底层是HashMap <strong>用邻接表实现</strong>他的装载因子默认是0.75<br>2.添加一个元素时，先得到hash值，然后转成索引值<br>3.找到存储数据的表table，检查当前位置是否已经存放了元素<br>4.如果没有数据就直接插入，<br>   如果有数据，调用<strong>equals（调用的是当前对象的equals）</strong>比较，如果相同，则放弃添加，如果不相同就添加到最后。<br>5.若一条链表的元素个数超过TREEIFY_THRESHOLD(默认为8)，并且table的大小&gt;=MIN_TREEIFY_CAPACITY(默认为64)，就会进行树化（红黑树），若链表个数超限，而表空间充足，则优先将表扩容(每次容量都*2)。</p><p>add详细过程：<br>首先检查是否为空表，若为空表，则将其大小初始化为16<br>接着用插入对象的hashCode计算hash值（hashCode和hash值不一样）<br>然后用hash值计算得到对应的数据表中的索引<br>如果对应索引为空，则new一个Node直接插入<br><strong>如果对应索引不为空：<br>(1)若插入位置已有对象的hash于插入对象的hash相同，且满足键值相同（即对象地址）或是调用当前对象的equals方法得到true则不插入<br>(2)若p为树节点，则调用红黑树的对应方法<br>(3)进入表中对应索引的链表，依次比较（方法同情况（1）相同）在插入完成后立即判断当前结点数是否达到8，若达到则进行树化（实际上在table表元素个数到64的情况下才会真的树化）</strong><br>当结点数&gt;0.75*容量时，扩容</p><h4 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h4><p>底层维护一个<strong>数组+双向链表</strong><br>双向链表结点 Entry 内含元素：before，after，数据<br>表中元素为：head, tail, table, entrySet<br>双向链表使得LinkedHashSet具备插入顺序与遍历顺序相同的特征，每一次插入，首先会找到对应hash值的索引的首个结点，然后从该节点开始沿着双向链表一个个比较，因此相比HashSet效率偏低。总结：双向链表将原本分布在table各索引中的结点串成了一串。</p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>table:HashMap$Node[]<br>Map中的key和value可以是任何<strong>引用类型</strong>的数据，会封装到HashMap$Node(实现Entry接口)<br>Map中的key不允许重复（具体去重操作同HashSet），若插入重复key，则后插入的value会覆盖之前的，且为null的key只能有一个，且会将被覆盖的value返回。<br>Map中的value可以重复<br>Map会维护一个entrySet用于方便遍历Map中的数据，其中的Entry是Node的父类，并且提供getKey和getValue方法，<strong>存储的是表中数据的地址</strong>。<br>HashMap线程不安全。</p><h4 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h4><p>key和value都<strong>不能为null</strong><br>线程安全<br>使用方法同HashMap一样<br>底层：维护一个数组HashTable$Entry[] table 初始化大小为11<br>每次扩容将当前大小*2 + 1</p><h4 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h4><p>继承了HashTable，且实现了Map接口</p><h4 id="TreeSet（带Tree的都可以排序）"><a href="#TreeSet（带Tree的都可以排序）" class="headerlink" title="TreeSet（带Tree的都可以排序）"></a>TreeSet（带Tree的都可以排序）</h4><p>本质是二叉搜索树，其迭代器使用中序遍历<br>若用无参构造器创建TreeSet则其依旧是无序的，若要排序，需要传入一个Comparator对象<br>对<strong>键值</strong>调用比较方法（键值不可为空）<br>TreeSet的去重机制，调用构造时传入的Comparator对象进行比较，<strong>若没有传入，则会调用插入对象实现的Comparator接口，若没有实现会报错，因为在底层会尝试将传入对象转变为Comparable对象</strong></p><h4 id="Collection工具类"><a href="#Collection工具类" class="headerlink" title="Collection工具类"></a>Collection工具类</h4><p>reverse(Collection):反转集合中元素<br>shuffle(Collection):将元素随机排列<br>sort(Collection, [Comparator]):排序 默认从小到大<br>max(Collection, [Comparator])<br>min(Collection, [Comparator])<br>swap(Collection, int, int) :交换元素<br>frequency(Collection, Object):返回某元素出现次数<br>copy(Collection dest, Collection src):将src中的数据拷贝到dest中，前提是dest的大小不小于src的大小<br>replaceAll(List, Object oldVal, Object newVal)</p><h2 id="绘图技术"><a href="#绘图技术" class="headerlink" title="绘图技术"></a>绘图技术</h2><p>1.先定义一个MyPanel类，继承JPanel类（MyPanel相当于画盘，其中paint方法的参数Graphics相当于画笔，带有很多画图方法）<br>2.让用于画图的类继承JFrame（一个框架，表示Graphics画图的界面）</p><h3 id="绘图原理"><a href="#绘图原理" class="headerlink" title="绘图原理"></a>绘图原理</h3><p>Component类提供了两个和绘图相关最重要的方法<br>1.paint(Graphics g)绘制组件外观<br>2.repaint()刷新组件外观</p><p>当组件<strong>第一次在屏幕显示的时候</strong>，程序会自动地调用paint()方法<br>在以下情况，paint()也会被调用：</p><ul><li>窗口最小化，再最大化</li><li>窗口的大小发生变化</li><li>repaint函数被调用</li></ul><p>获取图片资源<br>Image image = Toolkit.getDefaultToolkit().getImage(Panel.class.getResource(“图片所在路径（要放在项目的根目录下）”))</p><h2 id="Java事件处理机制"><a href="#Java事件处理机制" class="headerlink" title="Java事件处理机制"></a>Java事件处理机制</h2><p>java事件处理是采取“委派事件模型”。当事件发生时，<em>产生事件的对象，会把此“信息”传递给“事件的监听者”处理</em>，这里所说的“信息”实际上就是java.awt.event事件库里某个类所创建的对象。</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>进程是指运行中的程序，启动一个进程后，操作系统就会为该进程分配内存空间<br>进程是指程序的<strong>一次执行过程</strong>，或是正在运行的一个程序，是动态过程<br>只有进程中的所有线程全部死亡时，进程才会死亡</p><h3 id="线程-1"><a href="#线程-1" class="headerlink" title="线程"></a>线程</h3><p>线程是由进程创建的，是进程的一个实体。<br>一个进程可以拥有多个线程。</p><p>单线程：同一个时刻，只允许进行一个线程<br>多线程：同一个时刻，允许执行多个线程</p><p>并发：同一个时刻，多个任务<strong>交替进行</strong>， 单核CPU实现的多任务就是并发<br>并行：同一个时刻，多个任务同时执行，多核CPU可以实现并行</p><p>用户线程：当线程的任务执行完成或被通知结束时结束<br>守护线程：一般是为工作线程服务，当所有的用户线程结束时，守护线程自动结束<br>常见的守护线程：垃圾回收机制<br>将一个线程设置为守护线程：调用setDaemon() </p><p>JVM在所有非守护线程退出后退出</p><h4 id="线程的礼让与插队"><a href="#线程的礼让与插队" class="headerlink" title="线程的礼让与插队"></a>线程的礼让与插队</h4><p>yield:线程礼让，让出CPU，让其他线程执行，但礼让的事件不确定，所以也不一定礼让成功（当系统认为CPU资源充足时不会礼让）<br>join:线程插队，插队的线程一旦插队成功，则肯定先执行完插入的线程所有任务</p><h4 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h4><ul><li>新建状态：使用new关键字和Thread类或其子类建立一个线程对象后，该线程对象就处于新建状态，它保持这个状态直到程序start()这个线程</li><li>就绪状态：当线程对象调用了start()方法之后，该线程就进入就绪状态，此时线程处于就绪队列中，等待JVM里线程调度器的调度 <strong>实现多线程的核心</strong></li><li>运行状态：就绪状态的线程获取CPU资源，就可以执行run()，此时它就处于运行状态，<em>它可以变为阻塞状态，就绪状态和死亡状态</em> run()只是一个普通方法</li><li>阻塞状态:<br>如果一个线程执行了sleep（睡眠）、suspend（挂起）等方法，失去所占用资源之后，该线程就从运行状态进入阻塞状态。在睡眠时间已到或获得设备资源后可以重新进入就绪状态。可以分为三种：<ul><li>等待阻塞：运行状态中的线程执行 wait() 方法，使线程进入到等待阻塞状态。</li><li>同步阻塞：线程在获取 synchronized 同步锁失败(因为同步锁被其他线程占用)。</li><li>其他阻塞：通过调用线程的 sleep() 或 join() 发出了 I/O 请求时，线程就会进入到阻塞状态。当sleep() 状态超时，join() 等待线程终止或超时，或者 I/O 处理完毕，线程重新转入就绪状态。</li></ul></li><li>死亡状态</li></ul><h4 id="用Runnable接口创建线程"><a href="#用Runnable接口创建线程" class="headerlink" title="用Runnable接口创建线程"></a>用Runnable接口创建线程</h4><p>创建一个实现了Runnable接口的类，并实现run()，然后将其作为参数调用Thread的构造函数，用创建的thread类来调用start()<br>实现Runnable接口方式更加适合多个线程共享一个资源的情况，并且避免了单继承的限制。</p><h4 id="线程常用方法"><a href="#线程常用方法" class="headerlink" title="线程常用方法"></a>线程常用方法</h4><p>setName 设置线程名称<br>getName 返回线程名称<br>setPriority 更改线程优先级<br>getPriority 获取线程的优先级<br>interrupt 中断线程</p><h4 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h4><p>用synchronized修饰需要上锁的对象，使得该对象在任意时刻只能由一个线程访问<br>锁可以简单理解为一个标记对象，当该对象处于调用状态时代表别的线程此刻不能进行相关操作<br>同步方法/代码块（非静态的）的锁可以是this，也可以是其他属性对象（要求各线程能接触到的锁是同一个对象）<br>同步方法/代码块（静态的）的锁就是对象本身</p><h4 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h4><ul><li>当前线程的同步方法、同步代码块执行结束</li><li>当前线程在同步代码块中遇到break，return</li><li>当前线程在同步代码块，同步方法中出现了未处理的Error或Exception导致异常结束</li><li>当前线程在同步代码块，同步方法中执行了线程对象的wait()方法，当前线程暂停，并释放锁</li></ul><p>注：当线程执行同步代码块或同步方法时，程序调用Thread.sleep()或yield()不会释放锁</p><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><p>并发:同时完成多个任务，无需等待当前任务完成就可以执行其他的任务。解决了程序因为外部控制导致的阻塞，例如IO。因此并发问题常见于IO密集型任务。</p><p>并行：同时完成在多个位置，完成多个任务。即让多个CPU同时执行程序的不同部分来提升效率。</p><p>并发通过对共享资源的有效控制，提升程序效率。而并行则是通过使用更多的资源，来提升效率。</p><p>trick：抽象泄露，抽象可以通过屏蔽对任务不重要的部分，让人更加容易地理解并设计程序。但抽象如果有所遗漏，即使这些细节被隐藏，也难以掩盖它带来的影响。而支持并发的语言和库似乎多少都有这个问题。</p><p>并发的使用条件</p><p>并发操作需要CPU切换上下文，这会消耗CPU一定的性能。因此，如果程序是CPU密集的，即CPU一般都处于忙碌状态，此时使用并发是没有意义的，应当确保程序开启的线程数和CPU的核心数相等。</p><p>但如果CPU会因某些原因陷入阻塞状态，那么此时使用并发绝对是值得的。</p><h3 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h3><p>公平锁：先来先服务，不考虑优先级。</p><p>非公平锁：可以根据优先级夺取资源。</p><p>可重入锁（递归锁）</p><p>当某一个线程已经获取了某个锁，那么再次获取该锁就不会被阻塞。最典型的就是在递归调用中，如果在上层调用已经获取了该锁，那么下层执行就不再需要去获取这个锁。</p><p>乐观锁：若得不到锁，就假设不会发生冲突，不加锁去完成某项操作，如果因为冲突导致失败就不断重试直至成功。</p><p>悲观锁：其他线程只能依靠阻塞来等待线程锁的释放。</p><p>lock简单用法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Ticket</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 默认构建非公平锁，若传入true则构建公平锁</span>    <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 注意不要在方法内构建锁，否则每次调用多使用不同的锁，毫无意义</span>        <span class="token comment">// lock还有一个boolean tryLock()方法，该方法会试探性地去获取锁，如果获取不到锁也不会等待，转而去执行之后的逻辑。</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 上锁代码块用try-catch包裹，避免执行出现异常导致锁无法释放</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                number<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"卖出了第"</span> <span class="token operator">+</span> number <span class="token operator">+</span> <span class="token string">"张票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>synchronized 和 lock的区别</p><ol><li>一个是关键字，一个是接口。</li><li>synchronized会自动释放锁，而lock必须手动释放，因此同步代码块必须用try-catch包裹。</li><li>synchronized无法中断等待，只能等待锁的释放，而lock可以中断等待，节省资源给其他可以执行的线程。</li><li>Lock 可以通过 trylock 来知道有没有获取锁，而 synchronized 不能获取锁的状态。</li><li>lock适合大量的代码同步问题，synchronized反之。</li></ol><blockquote><p>ReadWriteLock</p></blockquote><p>读写锁，将一把锁分为读锁和写锁两个部分。读锁允许被多个线程获得，写锁只允许被单个线程获得。</p><p>特点：读读不互斥，读写互斥，写写互斥。</p><p>适用于读多写少的情况。</p><p>example：读者写者问题(写者优先)实现</p><p>读写锁用于确保读读不互斥，其余互斥，其余两个锁，一个用于确保读者数正确修改，一个用于确保当写者到来时，之后的读者都被阻塞。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ReadAndWrite</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ReadWriteLock</span> readWriteLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Lock</span> writerPriorLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> readCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"new reader %s come\n"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writerPriorLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            readCount<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"reader %s start reading, readCount: %d\n"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> readCount<span class="token punctuation">)</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writerPriorLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//TODO: handle exception</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                        readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"new writer %s come\n"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            writerPriorLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"writer %s start writing\n"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"writer %s finish writing\n"</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//TODO: handle exception    </span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            writerPriorLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生产者消费者"><a href="#生产者消费者" class="headerlink" title="生产者消费者"></a>生产者消费者</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Data</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token comment">// 循环校验，避免锁释放时，多个线程开始操作，即防止虚假唤醒。</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                num<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        num<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>lock实现</p></blockquote><p>Condition代表涉及PV操作的情况，通过对应的锁来获取。</p><p>await()相当于P操作，signal()相当于V操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Fruit</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Condition</span> empty <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Condition</span> apple <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Condition</span> pear <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putApple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                empty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            num<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" put an apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            apple<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//TODO: handle exception</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">putPear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                empty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            num<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" put an pear"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pear<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eatApple</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                apple<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            num<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" eat an apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            empty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//TODO: handle exception</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eatPear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>num <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                pear<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>            num<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" eat a pear"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            empty<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="COW"><a href="#COW" class="headerlink" title="COW"></a>COW</h3><p>涉及java中集合的并发操作时，不能使用常见的<code>ArrayList</code>等，而要转去是使用ConcurrentXXX或是CopyOnWriteList这一类线程安全的集合类。在此简单介绍一下COW策略。</p><p>COW即写时复制，当有多个调用者同时请求一个资源的时候，这些调用者会同时获得一个指向相同资源的指针。当某个调用者要进行修改时，则会拷贝一份资源给调用者，在修改没有完成前，所有的操作都对其他调用者透明，直到操作完成并保存。</p><p>由于COW要求拷贝一份资源，因此会需要双倍内存(可以通过控制拷贝的范围来减少内存消耗)，因此更适用于读多写少的情景，同时拷贝也会带来更新延迟的问题，但其性能比使用<code>Vector</code>要高。</p><h3 id="异步通信"><a href="#异步通信" class="headerlink" title="异步通信"></a>异步通信</h3><p>Callable&lt;V&gt;接口，要求实现call()方法，V代表返回值的类型。相比于Runable，该接口多了接受返回值的功能，但如果获取返回值的代码块执行时间较长，可能会导致程序在接受返回值的部分阻塞，因此需要谨慎设置获取返回值的位置。</p><p>FutureTask&lt;V&gt;，Runable的实现类，可以用于转换Callable和Runable，使得Callable的实现类能够被放入线程中执行。此外，FutureTask内部维护一个状态变量state，记录这个是否已经开始执行。当多个线程同时执行该任务时，只会有一个线程去真正执行这个任务，其他线程会发现state显示当前任务已经在执行或执行完，直接开始等待返回值，避免大量线程进行重复操作给服务器带来的性能损耗。</p><p>典型的使用场景就是，当缓存失效时，大量的查询涌入，但不应该让他们全部都去查询数据库。此时使用FutureTask就能大大减少数据库的查询次数。</p><p>example 避免重复点赞</p><p><code>Server.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">FutureTask</span><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">thumb</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 如果没有重复任务，创建一个futuretask并执行</span>        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> task <span class="token operator">=</span> <span class="token function">createTaskIfAbsent</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">//TODO: handle exception</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">createTaskIfAbsent</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 尝试获取对应的任务</span>        <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> task <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果当前没有执行相同的任务</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 创建一个点赞任务</span>            <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> thumb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thumb</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>thumb<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 如果没有被其他线程抢先放入，则执行该任务</span>            <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> futureTask <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>futureTask <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> task<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Thumb.java</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Thumb</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Thumb</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thumb: "</span> <span class="token operator">+</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>forkjoin</p></blockquote><p>采用分治思想，将一个大型问题拆分成无数个小问题，最后将结果合并。</p><p>实现并发排序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// RecursiveAction 执行的并发操作没有返回值</span><span class="token comment">// RecursiveTask&lt;T&gt; 执行的并发操作有返回值，类型为T</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SortTask</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveAction</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> start<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> end<span class="token punctuation">;</span>    <span class="token comment">// 插排与归并转换的临界值</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> limit <span class="token operator">=</span> <span class="token number">16L</span><span class="token punctuation">;</span>    <span class="token comment">// 辅助排序的数组</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SortTask</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>nums <span class="token operator">=</span> nums<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>            <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Long</span> t <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> start<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> start<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>            tmp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> t <span class="token operator">=</span> start<span class="token punctuation">;</span> t <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">&lt;</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">insertSort</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token class-name">SortTask</span> task1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SortTask</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">SortTask</span> task2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SortTask</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> end<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">invokeAll</span><span class="token punctuation">(</span>task1<span class="token punctuation">,</span> task2<span class="token punctuation">)</span><span class="token punctuation">;</span>            task1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            task2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">merge</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Long</span> num <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token class-name">SortTask</span> sortTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SortTask</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> length<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sortTask<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sortTask<span class="token punctuation">.</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// assert sortTask.res[i] &lt; sortTask.res[i+1];</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sortTask<span class="token punctuation">.</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> sortTask<span class="token punctuation">.</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"False"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sortTask<span class="token punctuation">.</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Long</span> num <span class="token operator">=</span> sortTask<span class="token punctuation">.</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                count<span class="token operator">--</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h4><blockquote><p>countDownLatch</p></blockquote><p><code>CountDownLatch</code>，一个计数器，在计数器没有归零时，会阻塞指定的线程，等待所有工作完成。一般用于同步线程。例如工作C需要工作A,B的输入，则可以用计数器来判断当前状况是否允许执行C。Condition也可完成这类工作，但如果需要等待的对象过多，且不需要高度的精确性，使用计数器会更简单高效。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">CountDownLatch</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" finished"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    count<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>count<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"shutdown"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>CyclicBarrier</p></blockquote><p>一个同步辅助类，允许一组线程互相等待，直到达到某个公共屏障点。</p><p>其使用情景是，一组固定大小的线程，必须互相等待，而非特定的一些线程等待某些线程。</p><p>构造函数：</p><ol><li><code>CyclicBarrier(int parties)</code>，在达到指定数量的参与者时启动，并放行线程。</li><li><code>CyclicBarrier(int parties, Runnable barrierAction)</code>，在达到指定数量的参与者时，执行预定义的操作barrierAction。</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">CyclicBarrierDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">CyclicBarrier</span> barrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> num <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">"ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>            barrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BrokenBarrierException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和<code>CountDownLatch</code>相比，<code>CyclicBarrier</code>发起等待的不是需求参数的线程，而是完成任务的线程，在指定数量的线程进入等待后，就执行预设的操作，并放行这些线程。除此之外，<code>CyclicBarrier</code>是可以重用的，即每次barrier被触发后就会重置为初始状态，等待下一轮线程的到达。而<code>CountDownLatch</code>在放行之后就一直处于开放状态。</p><h4 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h4><p><code>semaphore</code>代表信号量，可以执行PV操作。</p><p>acquire()为P操作，release()为V操作，初始化传入的参数为可用资源数。若资源数不足，acquire就会被阻塞，等待其他线程释放资源。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">semaphoreDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Semaphore</span> semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> num <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">"get the resource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token string">"release the resource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>由于创建线程需要消耗系统资源，频繁的创建和销毁线程会占用大量的CPU时间，因此如果能复用线程，将会大大提高效率。</p><p>线程池就是在内部维护一组线程，在没有任务时都处于等待状态，任务到来时就将其分配给其中一个线程执行。</p><blockquote><p>使用场景</p></blockquote><p>在响应时间优先的情况下，使用线程池可以一次性地启动多个线程执行任务，达到提高响应速度的目的。并且此时会偏向与提高线程池的核心线程数大小以及最大线程数大小来尽可能创造更多的线程执行任务。阻塞队列则往往不会设置。</p><p>在吞吐量优先的情况下，此时不需要追求结果的快速返回，而是在有限的资源条件下，尽可能在单位时间完成更多的任务，此时往往需要设置队列来缓冲并发任务，线程数量也需要合理设置，避免过多线程导致大量的上下文切换，拉低吞吐量。</p><blockquote><p>构造函数</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                          <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                          <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                          <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span>                          <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span> workQueue<span class="token punctuation">,</span>                          <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span>                         <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>corePoolSize：线程池核心线程数，即常驻线程数。线程池在初始化时没有线程，当任务到来时才开始创建线程。</p><p>maximumPoolSize：最大线程数，只有当阻塞队列满时，才会创建更多的线程</p><p>keepAliveTime：非核心线程的空闲时间超过该参数时，就会被回收</p><p>unit：超时的时间单位</p><p>workQueue：用于保存任务的队列</p><p>threadFactory：创建线程的工厂类。</p><p>handler：线程池无法继续接受任务时采取的拒绝策略。</p><blockquote><p>拒绝策略</p></blockquote><ul><li>AbortPolicy：中断抛出异常</li><li>DiscardPolicy：丢弃任务，不进行任何通知</li><li>DiscardOldestPolicy：丢弃在队列中存在时间最久的任务</li><li>CallerRunsPolicy：让提交任务的线程去执行任务</li></ul><h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>接口中只有一个抽象方法的接口称为函数式接口。</p><p>和接口实现类相比，函数式接口可以直接传入静态方法而无需实例化，粒度更小，自由度更高。</p><p>四大函数式接口：</p><ol><li>Function&lt;T, R&gt;：T为入参类型，R为返回类型，一般函数的接口</li><li>Predicate&lt;T&gt;：T为入参类型，返回为布尔类型，判断传入参数是否满足某个条件</li><li>Consumer&lt;T&gt;：T为入参类型，没有返回值</li><li>Supplier&lt;T&gt;：T为返回类型，没有入参</li></ol><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>文件在程序中是以<em>流的形式</em>来操作<br>流：数据在数据源（文件）和程序（内存）之间经历的路径<br>输入流：数据从数据源（文件）到程序（内存）的路径<br>输出流：数据从程序（内存）到数据源（文件）的路径</p><p>流的分类：<br>按操作数据单位：字节流（8bit）二进制文件，字符流（按字符）文本文件<br>按数据流的流向：输入流，输出流<br>按流的角色：节点流，处理流/包装流</p><p>字节流: InputStream OutputStream<br>字符流:Reader Writer</p><p><strong>所有用到缓冲区的输出流每次写入完成后要刷新才能将数据写入</strong></p><p>PS:在不需要流之后要将其关闭，避免资源浪费。</p><h3 id="节点流和处理流"><a href="#节点流和处理流" class="headerlink" title="节点流和处理流"></a>节点流和处理流</h3><p>节点流：可以从一个<strong>特定</strong>的数据源读写数据<br>处理流：可以从<strong>任意</strong>数据源读写数据，并且自带缓冲  一般前缀为Buffered</p><p>处理流的构建：在构建时向其传入一个节点流，即可使其同时具备对应节点流与处理流带有的扩充功能。<br>关闭处理流：只需关闭外层流即可，内部的节点流会在close方法中被关闭<br><em>BufferedReader/BufferedWriter不适合处理二进制文件</em></p><p>System.in 表示标准输入 键盘<br>编译类型：InputStream<br>运行类型：BufferedInputStream</p><p>System.out 表示标准输出 显示器<br>编译类型：PrintStream<br>运行类型：PrintStream</p><h4 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h4><p>可以将读取到的字节数据经过指定编码转换成字符 InputStreamReader<br>可以将读取到的字符数据经过指定编码转换成字节 OutputStreamWriter</p><p>应用场景:</p><ul><li>源或者目的对应的设备是字节流，但是操作的却是文本数据</li><li>操作文本涉及到具体的指定编码表</li></ul><p>打印流：PrintWriter, PrintStream(只有输出没有输入)</p><h2 id="Java序列化"><a href="#Java序列化" class="headerlink" title="Java序列化"></a>Java序列化</h2><p>机制:<br>一个对象可以被表示为一个字节序列，该字节序列包括该对象的数据、有关对象的类型的信息和存储在对象中数据的类型<br>将序列化对象写入文件之后，可以从文件中读取出来，并且对它进行反序列化(读取顺序必须和存储顺序一致)<br>类ObjectInputStream和ObjectOutputStream是高层次的数据流，他们包含反序列化和序列化对象的方法。</p><p>一个类的对象要想序列化成功，必须满足两个条件:<br>1.该类必须实现java.io.Serializable接口<br>2.该类的所有属性必须是可序列化的，如果有一个属性不是可序列化的，则该属性必须注明是短暂的。</p><p>注意事项：</p><ul><li>存储与读取的顺序必须一致</li><li>static或transient修饰的属性不会被序列化</li><li>序列化对象时，要求内部的属性也实现序列化接口</li></ul><p><a href="https://www.runoob.com/java/java-serialization.html">序列化知识</a></p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h3><ul><li>定义：能够分析类能力的程序称为反射</li><li>作用：<br>1.在运行时分析类的能力<br>2.在运行时查看对象<br>3.实现通用的数组操作代码<br>4.利用Method对象</li><li>价值：在不修改源码的情况下，增加、修改功能</li><li>原理：JVM将类的字节码文件通过类加载器生成Class类对象存放在堆中（每个类只生成一个）</li></ul><h3 id="2-常用类"><a href="#2-常用类" class="headerlink" title="2.常用类"></a>2.常用类</h3><p>java.lang.reflect包中有三个类</p><ul><li><p>Field 用于描述类的域</p></li><li><p>Method 用于描述类的方法</p></li><li><p>Constructor 用于描述类的构造器</p><p>（具体内容详见java核心技术P194）</p></li></ul><p><em>私有属性，方法，构造器，不可通过对应的getXXX()获得</em></p><h4 id="2-1Class类"><a href="#2-1Class类" class="headerlink" title="2.1Class类"></a>2.1Class类</h4><p>在程序加载完类之后，会调用ClassLoader创建该类的一个Class对象，并将其存储在堆中，其中保存了该类的所有信息。<strong>（每一个类只会创建一个Class对象）</strong></p><p>同时会在方法区存储类的二进制数据</p><p><em>PS:一个Class对象实际上表示的是一个类型，而这个类型未必一定是一种类（也有可能是原始数据类型 ，eg:int.class就是一个Class类，但int不是一个类）</em></p><p>newInstance()可用于动态的创建一个类的实例,他调用<strong>默认的</strong>构造器初始化新创建的对象。</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">`eg:` `String s = "java.util.Random";``Object m = Class.forName(s).newInstance();`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>调用有参构造器</p><pre class="line-numbers language-none"><code class="language-none">Class cls = Class.getForName("Cat");Constructor constructor = cls.getConstructor(String.class);//获取构造器，参数为获取的构造器需要的参数的Class类Object o1 = constructor.newInstance("Cat");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><em>注意：在反射中都是用方法调用对象,若有返回值，则只会返回Object</em></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>反射调用优化：Field, Method, Constructor均有setAccessible(boolean)方法，设置为true可以关闭安全检查。(但会使得私有成员可以被访问)</p><h4 id="2-2获取Class类"><a href="#2-2获取Class类" class="headerlink" title="2.2获取Class类"></a>2.2获取Class类</h4><ol><li><p>已知一个类的全类名，且该类在类路径下，可通过Class.forName()获取</p><p>应用场景：多用于配置文件，读取类全路径，加载类</p><pre class="line-numbers language-none"><code class="language-none">String ClassFullPath = "com.test.Cat";Class cls = Class.forName(ClassFullPath);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>已知具体的类，通过类的class获取，最安全可靠，且程序性能最高</p><p>应用场景：参数传递</p><pre class="line-numbers language-none"><code class="language-none">class Test{}...Class class = Test.class<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>已知实例，则可直接通过getClass()方法获得。</p></li><li><p>包装类可获取TYPE属性，它的哈希值与其对应的基本数据类型的Class的hash值相同.</p></li></ol><h3 id="3-类的加载"><a href="#3-类的加载" class="headerlink" title="3.类的加载"></a>3.类的加载</h3><h4 id="3-1静态，动态加载"><a href="#3-1静态，动态加载" class="headerlink" title="3.1静态，动态加载"></a>3.1静态，动态加载</h4><ul><li>静态加载：编译时就加载相关类，依赖性较强</li><li>动态记载：运行时加载需要的类</li></ul><h4 id="3-2类的加载时机"><a href="#3-2类的加载时机" class="headerlink" title="3.2类的加载时机"></a>3.2类的加载时机</h4><ul><li>创建对象时 //静态加载</li><li>子类被加载时，父类也一并会被加载 //静态加载</li><li>调用类中的静态成员时 //静态加载</li><li>反射 //动态加载</li></ul><h4 id="3-3类加载的过程"><a href="#3-3类加载的过程" class="headerlink" title="3.3类加载的过程"></a>3.3类加载的过程</h4><ol><li><p>加载：将类的class文件读入内存，并创建一个java.lang.Class对象</p></li><li><p>连接：将类的二进制数据合并到JRE中</p><ol><li><p>验证：安全校验</p><p>​目的：确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会威胁虚拟机自身安全</p><p>​包括：文件格式验证（是否以魔数oxcafebabe开头）、元数据验证、字节码验证和符号引用验证</p><p>​PS：可以使用-Xverify:none参数来关闭大部分的类验证措施</p></li><li><p>准备：在该阶段对<strong>静态变量</strong>分配内存，并进行<strong>默认初始化</strong>（将其初始化为一个默认值，而非程序指定的值）</p><p>​  而对于<strong>静态常量</strong>则会<strong>直接赋值</strong>。</p></li><li><p>解析：JVM将常量池内的符号引用替换为直接引用的过程（可以理解为从图纸到实物的过程）</p></li></ol></li><li><p>初始化：JVM负责对类进行初始化，主要是<strong>静态成员</strong></p><p>​真正开始执行类中定义的Java程序代码，此阶段是执行&lt;clinit&gt;()方法的过程</p><p>​该方法由编译器按语句在<strong>源文件中出现的顺序</strong>，依次收集类中的所有<strong>静态变量</strong>的赋值动作和<strong>静态代码块</strong>中的语句，并进行合并。（该方法有线程锁）</p></li></ol><p>类加载后内存布局：</p><p>在<u>方法区</u>中存储类的二进制数据，并根据它在<u>堆</u>中生成一个类的Class对象</p><h4 id="3-4通过反射创建对象"><a href="#3-4通过反射创建对象" class="headerlink" title="3.4通过反射创建对象"></a>3.4通过反射创建对象</h4><p>相关方法：</p><ul><li>Class:<ul><li>getConstructor(Class&lt;?&gt;) 获取对应参数列表的public构造器</li><li>getDeclaredConstructor(Class&lt;?&gt;)获取对应参数列表的任意构造器</li></ul></li><li>Constructor:<ul><li>newInstance()创建一个实例</li><li>setAccessible()暴破（暴破后可操作私有属性）</li></ul></li></ul><h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>JDBC:提供一套<strong>统一的数据库接口</strong>由数据库厂商实现</p><h3 id="1-JDBC编写流程："><a href="#1-JDBC编写流程：" class="headerlink" title="1.JDBC编写流程："></a>1.JDBC编写流程：</h3><h5 id="1-1注册驱动：获取Driver类"><a href="#1-1注册驱动：获取Driver类" class="headerlink" title="1.1注册驱动：获取Driver类"></a>1.1注册驱动：获取Driver类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//com.mysql.cj.jdbc.Driver</span><span class="token class-name">Driver</span> driver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="1-2连接：获取Connection类"><a href="#1-2连接：获取Connection类" class="headerlink" title="1.2连接：获取Connection类"></a>1.2连接：获取Connection类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//url jdbc:mysql://ip地址:端口号/数据库名称?serverTimezone=UTC"</span><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/coursecrash?serverTimezone=UTC"</span><span class="token punctuation">;</span><span class="token comment">//登录信息</span><span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"Cxc020603"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> connect <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-3CRUD：发送SQL语句"><a href="#1-3CRUD：发送SQL语句" class="headerlink" title="1.3CRUD：发送SQL语句"></a>1.3CRUD：发送SQL语句</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into ade values('lgd', 'shen')"</span><span class="token punctuation">;</span><span class="token class-name">Statement</span> statement <span class="token operator">=</span> connect<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> row <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-4释放资源"><a href="#1-4释放资源" class="headerlink" title="1.4释放资源"></a>1.4释放资源</h5><h3 id="2-数据库连接方式"><a href="#2-数据库连接方式" class="headerlink" title="2.数据库连接方式"></a>2.数据库连接方式</h3><ul><li>注册进DriverManage，方便统一管理</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> url<span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/coursecrash?serverTimezone=UTC"</span><span class="token punctuation">;</span><span class="token class-name">String</span> user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span><span class="token class-name">String</span> passwd <span class="token operator">=</span> <span class="token string">"Cxc020603"</span><span class="token punctuation">;</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into ade values('lgd', 'shen')"</span><span class="token punctuation">;</span><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> constructor <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Driver</span> driver1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Driver</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span>driver1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//注册驱动</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> passwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Statement用于执行静态的SQL语句，并返回结果</span><span class="token class-name">Statement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回值为影响的行数</span>statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>在类加载的时候（Class.forName()）会自动注册数据库驱动,因此可以省略</p></li><li><p>mysql驱动5.1.6以上可以无需Class.forName(),从jdk1.5以后使用了jdbc4，不再需要显式调用class.forName()注册驱动而是自动调用驱动jar包下META-INF\services\java.sql.Driver文本中的类名称去注册</p></li><li><p>通过配置文件获取连接的相关信息（软编码，推荐）</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">SQLException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>    <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src\\load.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> user <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> url <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> driver <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//加载驱动类</span>    <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Statement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//String sql = "create table TestTable (name varchar(5), age int, id int AUTO_INCREMENT, primary key(id))";</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"insert into testtable values ('cxc', 18, null),"</span> <span class="token operator">+</span>            <span class="token string">"('pcx', 18, null), ('lgd', 20, null)"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> sql1 <span class="token operator">=</span> <span class="token string">"delete from testtable where id=3"</span><span class="token punctuation">;</span>    statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    statement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span>sql1<span class="token punctuation">)</span><span class="token punctuation">;</span>    statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/coursecrash?serverTimezone=UTC</span><span class="token key attr-name">user</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token key attr-name">password</span><span class="token punctuation">=</span><span class="token value attr-value">Cxc020603</span><span class="token key attr-name">driver</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>ps:properties以字符串键值对存储，不需要加双引号</p><h3 id="3-ResultSet"><a href="#3-ResultSet" class="headerlink" title="3.ResultSet"></a>3.ResultSet</h3><p>用exectueQuery(sql)处理传入的select语句后会返回一个结果集</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//previous()向上移动一行</span><span class="token comment">//相当于向下移动一行，初始状态下处于无效位置</span><span class="token keyword">while</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">//取出指定列的数据</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getXXX</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//XXX指该列的数据类型，//传入的参数可以是列的索引，也可以是列名</span>    <span class="token punctuation">}</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ResultSet中有一个rows属性，其数据类型为ArrayList,其中存储对象类数组，用于表示每一个数据</p><p><em>ResultSet与对应的连接绑定，一旦连接关闭，将无法再使用结果集</em></p><h3 id="拓展：SQL注入"><a href="#拓展：SQL注入" class="headerlink" title="拓展：SQL注入"></a>拓展：SQL注入</h3><p>Statement存在SQL注入风险</p><p>SQL注入：利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的SQL语句段或命令，恶意攻击数据库</p><p>eg：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src\\load.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> user <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> driver <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> url <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Statement</span> statement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入用户名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> user1 <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> passwd <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from admin where name = '"</span> <span class="token operator">+</span> user1 <span class="token operator">+</span> <span class="token string">"' and password = '"</span> <span class="token operator">+</span> passwd <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">String</span> sucess <span class="token operator">=</span> <span class="token string">"登陆成功"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sucess<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token class-name">String</span> fail <span class="token operator">=</span> <span class="token string">"Fail"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fail<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><pre class="line-numbers language-none"><code class="language-none">输入用户名：1'输入密码or '1'='1select * from admin where name = '1'' and password = 'or '1'='1'登陆成功Process finished with exit code 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-PreparedStatement"><a href="#4-PreparedStatement" class="headerlink" title="4.PreparedStatement"></a>4.PreparedStatement</h3><p>预处理Statement</p><p>预编译：在调用prepareStatement()时会直接将SQL语句提交给数据库编译，得到的PreparedStatement句柄是一个预编译好的SQL语句，添加参数后可直接执行。</p><p>将自身与某一sql语句绑定，sql语句中的参数用“？”作为占位符(占位符两边会自动加上引号)</p><p>因此占位符只能占位SQL语句中的普通值，绝不能占位表名，SQL关键字</p><p>调用setXXX(占位符的索引，占位符的值)方法来填充参数（参数索引从1开始）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from admin where name = ? and password = ?;"</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//此处将上方的sql语句与PreparedStatement绑定</span><span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入用户名："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> user1 <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> passwd <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>passwd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"failure"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优势：</p><ul><li>不通过字符串拼接写SQL语句</li><li>可以防止SQL注入（自动在占位符两边添加引号）</li></ul><h3 id="5-JDBC事务处理"><a href="#5-JDBC事务处理" class="headerlink" title="5.JDBC事务处理"></a>5.JDBC事务处理</h3><p>开启事务： 调用Connect对象的setCommit(false)方法</p><p><em>默认情况下自动提交</em></p><p>提交事务：调用Connect对象的commit()方法</p><p>回滚：调用Connect对象的rollback([savepoint])方法</p><h3 id="6-批处理"><a href="#6-批处理" class="headerlink" title="6.批处理"></a>6.批处理</h3><p>通常与PreparedStatement搭配使用</p><p>在连接MySQL的url中添加参数rewriteBatchedStatements=true</p><p>addBatch()将当前的sql语句添加到批处理包中</p><p>executeBatch()将包中的sql语句全部执行一遍</p><p>clearBatch()清空包</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Connection</span> connect <span class="token operator">=</span> <span class="token class-name">JDBCUtil</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token comment">//String sql = "insert into ade values (?, ?)";</span><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"delete from ade where name=?"</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    preparedStatement <span class="token operator">=</span> connect<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"cxc"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//preparedStatement.setString(2, "ohh");</span>        preparedStatement<span class="token punctuation">.</span><span class="token function">addBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    preparedStatement<span class="token punctuation">.</span><span class="token function">executeBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    preparedStatement<span class="token punctuation">.</span><span class="token function">clearBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作用：批量处理数据，减少编译次数，以及发送sql语句的网络开销</p><h3 id="7-数据库连接池"><a href="#7-数据库连接池" class="headerlink" title="7.数据库连接池"></a>7.数据库连接池</h3><h4 id="7-1传统的获取连接的方式的问题分析"><a href="#7-1传统的获取连接的方式的问题分析" class="headerlink" title="7.1传统的获取连接的方式的问题分析"></a>7.1传统的获取连接的方式的问题分析</h4><ol><li>每次向数据库建立连接都需要将Connection加载到内存中，再验证IP地址，用户名和密码，需要数据库连接时就申请一个，频繁连接会占用大量资源，造成服务器崩溃</li><li>每次连接使用完都得断开，若程序出现异常未能关闭，会导致数据库内存泄漏</li><li>不能控制创建的连接数量，若连接过多，也有可能导致内存泄漏，MySQL崩溃（没有缓冲机制）</li></ol><h4 id="7-2连接池基本介绍"><a href="#7-2连接池基本介绍" class="headerlink" title="7.2连接池基本介绍"></a>7.2连接池基本介绍</h4><ol><li>预先向缓冲池中加入一定数量的连接<strong>（已经创建好的）</strong></li><li>数据库连接池负责分配，管理和释放数据库连接，他允许应用程序<strong>重复</strong>使用一个现有的数据库连接。每次程序使用完成之后，<strong>只是连接的引用消失，但连接本身依旧存在</strong></li><li>当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列</li></ol><h4 id="7-3-c3p0连接池"><a href="#7-3-c3p0连接池" class="headerlink" title="7.3 c3p0连接池"></a>7.3 c3p0连接池</h4><ol><li>导入jar包</li></ol><p>连接方式1：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">ComboPooledDataSource</span> comboPooledDataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src\\load.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> user <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> driver <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> url <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        comboPooledDataSource<span class="token punctuation">.</span><span class="token function">setDriverClass</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>        comboPooledDataSource<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>        comboPooledDataSource<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        comboPooledDataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PropertyVetoException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    comboPooledDataSource<span class="token punctuation">.</span><span class="token function">setInitialPoolSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    comboPooledDataSource<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> comboPooledDataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>连接方式2（配置文件）：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 文件名 c3p0-config.xml 放置在src文件夹下 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>c3p0-config</span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 数据源名称 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>named-config</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mySource<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 若为default-config 则在生成管理对象时不需要传入参数 --&gt;</span>        <span class="token comment">&lt;!-- 驱动类 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>com.mysql.cj.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- url --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>jdbc:mysql://localhost:3306/coursecrash?serverTimezone=UTC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- user --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- password --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Cxc020603<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 初始化连接池中的连接数量大小 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>initialPoolSize<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 最大连接时长 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxIdleTime<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 最大连接数 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>maxPoolSize<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 最小连接数 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>minPoolSize<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>named-config</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>c3p0-config</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">connect2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token class-name">ComboPooledDataSource</span> mySource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token string">"mySource"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Connection</span> connection <span class="token operator">=</span> mySource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-4德鲁伊连接池"><a href="#7-4德鲁伊连接池" class="headerlink" title="7.4德鲁伊连接池"></a>7.4德鲁伊连接池</h4><p>导入jar包</p><p>配置文件：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 数据库连接参数</span><span class="token key attr-name">url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://localhost:3306/coursecrash?serverTimezone=UTC&amp;rewriteBatchedStatements=true</span><span class="token key attr-name">username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span><span class="token key attr-name">password</span><span class="token punctuation">=</span><span class="token value attr-value">Cxc020603</span><span class="token comment"># 驱动</span><span class="token key attr-name">driverClassName</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver</span><span class="token comment"># 连接池的参数</span><span class="token comment"># 初始虎啊连接数</span><span class="token key attr-name">initialSize</span><span class="token punctuation">=</span><span class="token value attr-value">10</span><span class="token comment">#最大连接数</span><span class="token key attr-name">maxActive</span><span class="token punctuation">=</span><span class="token value attr-value">10</span><span class="token comment">#最大等待时长</span><span class="token key attr-name">maxWait</span><span class="token punctuation">=</span><span class="token value attr-value">200</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">druid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"src\\druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Connection</span> connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-ApDBUtils"><a href="#8-ApDBUtils" class="headerlink" title="8. ApDBUtils"></a>8. ApDBUtils</h3><h4 id="8-1-POJO-简单java对象"><a href="#8-1-POJO-简单java对象" class="headerlink" title="8.1 POJO(简单java对象)"></a>8.1 POJO(简单java对象)</h4><p>创建一个java对象，用其中的属性，映射ResultSet中的各个字段</p><h4 id="8-2-DBUtils类"><a href="#8-2-DBUtils类" class="headerlink" title="8.2 DBUtils类"></a>8.2 DBUtils类</h4><ol><li>QueryRunner类：该类封装了SQL的执行方法，<em>线程安全</em>，可以实现增删改查</li><li>ResultSetHandler接口：该接口用于处理java.sql.ResultSet,将数据按要求转换为另一种形式（POJO）</li></ol><p>常用ResultSet接口实现类：</p><ul><li>ArrayHandler:把结果集中的每一行数据都转成一个数组，再存放到List中</li><li>BeanHandler:将结果集中的第一行数据封装到一个POJO中</li><li>BeanListHandler:将结果集中的每一行数据都封装到一个对应的POJO实例中</li><li>ScalarHandler:若结果中只有单个值，则用该实现类处理，若有多个值，则会返回第一列数据处理后结果。</li></ul><h4 id="8-3基本使用"><a href="#8-3基本使用" class="headerlink" title="8.3基本使用"></a>8.3基本使用</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>    <span class="token comment">//获取连接</span>    <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">DruidUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//生成QueryRunner对象</span>    <span class="token class-name">QueryRunner</span> queryRunner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//需要预编译处理的语句</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from ade where name=?"</span><span class="token punctuation">;</span>    <span class="token comment">//query方法参数，连接，sql语句，ResultSetHandler接口，sql语句中的参数</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span>POJO<span class="token punctuation">&gt;</span></span> query <span class="token operator">=</span>            queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanListHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>POJO<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"cxc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>POJO pojo <span class="token operator">:</span> query<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pojo<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token class-name">DruidUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>query底层使用preparedStatement操作sql语句，并会自动关闭Statement与ResultSet，在转换ResultSet中的数据时，会通过反射获取POJO类的属性，构造器等，然后返回一个对应的数组形式的结果集合。</p><p><em>若要传入基础数据类型，则要使用对应的包装类， 基本数据类型不能为空</em></p><h3 id="9-BasicDao"><a href="#9-BasicDao" class="headerlink" title="9.BasicDao"></a>9.BasicDao</h3><p>DAO：data access object数据访问对象</p><p>此类对象专门用于对特定类的数据进行增删改查</p><p>具体关系：</p><p>XXPOJO映射XX表中的数据</p><p>XXDAO对XX表进行CRUD</p><h3 id="10-Dao-Service-Controller"><a href="#10-Dao-Service-Controller" class="headerlink" title="10.Dao, Service, Controller"></a>10.Dao, Service, Controller</h3><p>Dao：数据访问层，对数据进行增删改查</p><p>Service：业务逻辑层，通过Dao的组合实现具体的业务逻辑</p><p>Controller：控制层，转发Service的业务处理结果，但不暴露Service层的业务逻辑</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Remake | Makefile</title>
      <link href="/2022/06/29/make/"/>
      <url>/2022/06/29/make/</url>
      
        <content type="html"><![CDATA[<p>菜狗的Remake之路 – Makefile篇</p><span id="more"></span><h1 id="Make"><a href="#Make" class="headerlink" title="Make"></a>Make</h1><h2 id="1-程序的编译与链接"><a href="#1-程序的编译与链接" class="headerlink" title="1. 程序的编译与链接"></a>1. 程序的编译与链接</h2><p>编译： 将源文件编译成中间代码文件(.o文件)</p><p>​要求语法正确，函数与变量声明正确</p><p>链接： 将大量的Object File 合成可执行文件</p><p>​头文件所在位置，当中间文件很多时，需要给中间文件打包(生成 Archive File 即.a文件) </p><h2 id="2-Makefile概述"><a href="#2-Makefile概述" class="headerlink" title="2.  Makefile概述"></a>2.  Makefile概述</h2><h3 id="2-1-Makefile规则"><a href="#2-1-Makefile规则" class="headerlink" title="2.1 Makefile规则"></a>2.1 Makefile规则</h3><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">target ...</span> <span class="token punctuation">:</span> prerequisites ...command...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>target : 要生成的目标文件/可执行文件/标签</li><li>prerequisites : 生成 target 需要的依赖文件</li><li>command : 该 target 要执行的Shell命令 (以tab开始)</li></ul><p>eg:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tes <span class="token builtin class-name">:</span> test.occ -o tes test.otest.o <span class="token builtin class-name">:</span> test.c def.hcc -c test.c.phony <span class="token builtin class-name">:</span> cleanclean <span class="token builtin class-name">:</span> <span class="token function">rm</span> test.o tes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-Makefile变量"><a href="#2-2-Makefile变量" class="headerlink" title="2.2 Makefile变量"></a>2.2 Makefile变量</h3><blockquote><p>变量定义</p></blockquote><pre class="line-numbers language-none"><code class="language-none">objects = main.o kbd.o command.o display.o \     insert.o search.o files.o utils.o     可理解为一个字符串<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>变量使用</p></blockquote><p>$(objects)</p><h3 id="2-3-Makefile自动推导"><a href="#2-3-Makefile自动推导" class="headerlink" title="2.3 Makefile自动推导"></a>2.3 Makefile自动推导</h3><p>可以自动推导文件以及文件依赖关系后面的命令</p><p>只要make看到一个 <code>.o</code> 文件，它就会自动的把 <code>.c</code> 文件加在依赖关系中，如果make找到一个 <code>whatever.o</code> ，那么 <code>whatever.c</code> 就会是 <code>whatever.o</code> 的依赖文件。并且 <code>cc -c whatever.c</code> 也会被推导出来</p><h3 id="2-4-Makefile-文件名"><a href="#2-4-Makefile-文件名" class="headerlink" title="2.4 Makefile 文件名"></a>2.4 Makefile 文件名</h3><p>make 会依次在当前目录下寻找 GNUmakefile , makefile , Makefile(建议使用)</p><p>指定make文件 : <code>make -f filename</code></p><h3 id="2-5-引用其他Makefile"><a href="#2-5-引用其他Makefile" class="headerlink" title="2.5 引用其他Makefile"></a>2.5 引用其他Makefile</h3><pre class="line-numbers language-none"><code class="language-none">include filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>make命令开始时，会找寻 <code>include</code> 所指出的其它Makefile，并把其内容安置在当前的位置。就好像C/C++的 <code>#include</code> 指令一样。如果文件都没有指定绝对路径或是相对路径的话，make会在当前目录下首先寻找，如果当前目录下没有找到，那么，make还会在下面的几个目录下找：</p><ol><li>如果make执行时，有 <code>-I</code> 或 <code>--include-dir</code> 参数，那么make就会在这个参数所指定的目录下去寻找。</li><li>如果目录 <code>&lt;prefix&gt;/include</code> （一般是： <code>/usr/local/bin</code> 或 <code>/usr/include</code> ）存在的话，make也会去找。</li></ol><h2 id="3-书写规则"><a href="#3-书写规则" class="headerlink" title="3. 书写规则"></a>3. 书写规则</h2><h3 id="3-1-文件查找"><a href="#3-1-文件查找" class="headerlink" title="3.1 文件查找"></a>3.1 文件查找</h3><p>Makefile默认在当前目录下寻找目标文件和依赖文件</p><blockquote><p>VPATH 特殊变量</p></blockquote><p>当存在<code>VPath</code>变量时，若在当前目录找不到文件，会到VPath下的路径寻找。</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">VPATH <span class="token operator">=</span> src<span class="token punctuation">:</span>../headers<span class="token comment"># 不同目录用 ':' 分割</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>vpath 关键字</p></blockquote><p>使用方法：</p><ul><li>vpath <pattern> <directories><br>为符合模式<pattern>的文件指定搜索目录<directories>。</directories></pattern></directories></pattern></li><li>vpath <pattern><br>清除符合模式<pattern>的文件的搜索目录。</pattern></pattern></li><li>vpath<br>清除所有已被设置好了的文件搜索目录。</li></ul><p>vapth使用方法中的<pattern>需要包含 <code>%</code> 字符。 <code>%</code> 的意思是匹配零或若干字符，（需引用 <code>%</code> ，使用 <code>\</code> ）例如， <code>%.h</code> 表示所有以 <code>.h</code> 结尾的文件。<pattern>指定了要搜索的文件集，而<directories>则指定了&lt; pattern&gt;的文件集的搜索的目录。例如：</directories></pattern></pattern></p><pre class="line-numbers language-none"><code class="language-none">vpath %.h ../headers<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-伪目标"><a href="#3-2-伪目标" class="headerlink" title="3.2 伪目标"></a>3.2 伪目标</h3><p>伪目标是一个标签而不是文件，所以make无法生存它的依赖关系和决定是否要执行</p><blockquote><p>显示指明为目标</p></blockquote><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token builtin-target builtin">.PHONY</span> <span class="token punctuation">:</span> clean<span class="token target symbol">clean</span> <span class="token punctuation">:</span> command<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-3-多目标"><a href="#3-3-多目标" class="headerlink" title="3.3 多目标"></a>3.3 多目标</h3><p>若多个目标同时依赖于某个文件，则可将其合并</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">bigoutput littleoutput</span> <span class="token punctuation">:</span> text.ggenerate text.g -<span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">subst</span> output,,<span class="token variable">$@</span><span class="token punctuation">)</span> &gt; <span class="token variable">$@</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上述规则等价于</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">bigoutput</span> <span class="token punctuation">:</span> text.g    generate text.g -big &gt; bigoutput<span class="token target symbol">littleoutput</span> <span class="token punctuation">:</span> text.g    generate text.g -little &gt; littleoutput<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-静态模式"><a href="#3-4-静态模式" class="headerlink" title="3.4 静态模式"></a>3.4 静态模式</h3><p>静态模式可以更加容易地定义多目标的规则</p><p>语法：</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">&lt;targets ...&gt;</span> <span class="token punctuation">:</span> &lt;target-pattern&gt; <span class="token punctuation">:</span> &lt;prereq-patterns ...&gt;    &lt;commands&gt;    ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>targets : 定义了一系列的目标文件，可以有通配符，是一个集合</p><p>target-pattern : 指明了targets的模式，也就是目标集的模式</p><p>prereq-patterns : 目标的依赖模式，它对target-pattern形成的模式再进行一次依赖目标的定义。</p><p>如果我们的<target-pattern>定义成 <code>%.o</code> ，意思是我们的<target>;集合中都是以 <code>.o</code> 结尾的，而如果我们的<prereq-patterns>定义成 <code>%.c</code> ，意思是对<target-pattern>所形成的目标集进行二次定义，其计算方法是，取<target-pattern>模式中的 <code>%</code> （也就是去掉了 <code>.o</code> 这个结尾），并为其加上 <code>.c</code> 这个结尾，形成的新集合。</target-pattern></target-pattern></prereq-patterns></target></target-pattern></p><p>eg : </p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">objects <span class="token operator">=</span> foo.o bar.o<span class="token target symbol">all</span> <span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>objects<span class="token punctuation">)</span><span class="token target symbol"><span class="token variable">$</span>(objects)</span><span class="token punctuation">:</span> %.o<span class="token punctuation">:</span> %.c<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -c <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> <span class="token variable">$&lt;</span> -o <span class="token variable">$@</span><span class="token comment"># 展开后</span><span class="token comment">#foo.o : foo.c</span><span class="token comment">#    $(CC) -c $(CFLAGS) foo.c -o foo.o</span><span class="token comment">#bar.o : bar.c</span><span class="token comment">#    $(CC) -c $(CFLAGS) bar.c -o bar.o</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指明了我们的目标从$object中获取， <code>%.o</code> 表明要所有以 <code>.o</code> 结尾的目标，也就是 <code>foo.o bar.o</code> ，也就是变量 <code>$object</code> 集合的模式，而依赖模式 <code>%.c</code> 则取模式 <code>%.o</code> 的 <code>%</code> ，也就是 <code>foo bar</code> ，并为其加下 <code>.c</code> 的后缀，于是，我们的依赖目标就是 <code>foo.c bar.c</code> 。而命令中的 <code>$&lt;</code> 和 <code>$@</code> 则是自动化变量， <code>$&lt;</code> 表示第一个依赖文件， <code>$@</code> 表示目标集</p><h3 id="3-5自动生成依赖型"><a href="#3-5自动生成依赖型" class="headerlink" title="3.5自动生成依赖型"></a>3.5自动生成依赖型</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看指定文件的依赖性</span>gcc -M main.cgcc -MM main.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>为每一个.c文件生成一个.d文件，.d文件存放.c文件的依赖性</p><p>生成.d文件的规则</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">%.d</span><span class="token punctuation">:</span> %.c    <span class="token operator">@</span>set -e<span class="token punctuation">;</span> rm -f <span class="token variable">$@;</span> \    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -MM <span class="token variable">$</span><span class="token punctuation">(</span>CPPFLAGS<span class="token punctuation">)</span> <span class="token variable">$&lt;</span> &gt; <span class="token variable">$@.$$$$;</span> \    sed <span class="token string">'s,\($*\)\.o[ :]*,\1.o $@ : ,g'</span> &lt; <span class="token variable">$@.$$$$</span> &gt; <span class="token variable">$@;</span> \    rm -f <span class="token variable">$@.$$$$</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个规则的意思是，所有的 <code>.d</code> 文件依赖于 <code>.c</code> 文件， <code>rm -f $@</code> 的意思是删除所有的目标，也就是 <code>.d</code> 文件，第二行的意思是，为每个依赖文件 <code>$&lt;</code> ，也就是 <code>.c</code> 文件生成依赖文件， <code>$@</code> 表示模式 <code>%.d</code> 文件，如果有一个C文件是name.c，那么 <code>%</code> 就是 <code>name</code> ， <code>$$$$</code> 意为一个随机编号，第二行生成的文件有可能是“name.d.12345”，第三行使用sed命令做了一个替换，关于sed命令的用法请参看相关的使用文档。第四行就是删除临时文件。</p><p>目的：</p><p>将</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">main.o</span> <span class="token punctuation">:</span> main.c defs.h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>转成：</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">main.o main.d</span> <span class="token punctuation">:</span> main.c defs.h<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使得.d文件可以自动更新</p><h2 id="4-书写命令"><a href="#4-书写命令" class="headerlink" title="4. 书写命令"></a>4. 书写命令</h2><h3 id="4-1显示命令"><a href="#4-1显示命令" class="headerlink" title="4.1显示命令"></a>4.1显示命令</h3><p>若在命令行前加<code>@</code>，则该命令不会被显示出来。</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token operator">@</span>echo <span class="token string">'Compiling'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>make -n 只显示命令，但不会执行，方便查看命令执行顺序</p><p>make -s 全面禁止命令的显示</p><h3 id="4-2命令执行"><a href="#4-2命令执行" class="headerlink" title="4.2命令执行"></a>4.2命令执行</h3><p>如果需要上一条命令的结果被应用于下一条命令，则应用<code>;</code>间隔两条命令，而不是换行</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">exec</span><span class="token punctuation">:</span>cd ~<span class="token punctuation">;</span> pwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>make -i 忽略所有错误</p><p>make -k 若某命令出错，则终止该命令，但其他命令照常执行</p><h3 id="4-3-嵌套执行make"><a href="#4-3-嵌套执行make" class="headerlink" title="4.3 嵌套执行make"></a>4.3 嵌套执行make</h3><blockquote><p>主控make</p></blockquote><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">subsystem</span><span class="token punctuation">:</span>    cd subdir &amp;&amp; <span class="token variable">$</span><span class="token punctuation">(</span>MAKE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>传递变量</p></blockquote><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token keyword">export</span> variable <span class="token comment">#传递变量</span><span class="token keyword">export</span> <span class="token comment">#传递所有变量</span><span class="token keyword">unexport</span> variable <span class="token comment">#不传递</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>有两个变量，一个是 <code>SHELL</code> ，一个是 <code>MAKEFLAGS</code> ，这两个变量不管你是否export，其总是要传递到下层 Makefile中，特别是 <code>MAKEFLAGS</code> 变量，其中包含了make的参数信息，如果我们执行“总控Makefile”时有make参数或是在上层 Makefile中定义了这个变量，那么 <code>MAKEFLAGS</code> 变量将会是这些参数，并会传递到下层Makefile中，这是一个系统级的环境变量。</p><p>但是make命令中的有几个参数并不往下传递，它们是 <code>-C</code> , <code>-f</code> , <code>-h</code>, <code>-o</code> 和 <code>-W</code></p><h3 id="4-4定义命令包"><a href="#4-4定义命令包" class="headerlink" title="4.4定义命令包"></a>4.4定义命令包</h3><p>如果Makefile中出现一些相同命令序列，那么我们可以为这些相同的命令序列定义一个变量。定义这种命令序列的语法以 <code>define</code> 开始，以 <code>endef</code> 结束</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token keyword">define</span> run-yaccyacc <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">firstword</span> <span class="token variable">$^</span><span class="token punctuation">)</span>mv y.tab.c <span class="token variable">$@</span><span class="token keyword">endef</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-变量"><a href="#5-变量" class="headerlink" title="5. 变量"></a>5. 变量</h2><h3 id="5-1-变量的基础"><a href="#5-1-变量的基础" class="headerlink" title="5.1 变量的基础"></a>5.1 变量的基础</h3><p>变量在声明时要赋初值，在使用时，在变量名前加<code>$</code>，并将变量名用()包起来。</p><p>若要使用真实的<code>$</code>，输入<code>$$</code></p><blockquote><p>变量的定义</p></blockquote><p>使用<code>:=</code>运算符来定义变量</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">x <span class="token operator">:=</span> fooy <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> barx <span class="token operator">:=</span> later<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如此，前面的变量便不能使用后面变量的值。</p><p>如果直接用<code>=</code>赋值，则前面的变量就不可以使用后面的变量（不推荐）</p><p><code>#注释符可以用来表示变量定义的终止</code></p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">nullstring <span class="token operator">:=</span>space <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span>nullstring<span class="token punctuation">)</span> <span class="token comment">#end of line</span>dir <span class="token operator">:=</span> /foo/bar    <span class="token comment"># 4 space left</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>?=</code>在变量未被赋值的情况下给他赋值，否则略过这条语句</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">foo <span class="token operator">?=</span> bar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-2-变量高级用法"><a href="#5-2-变量高级用法" class="headerlink" title="5.2 变量高级用法"></a>5.2 变量高级用法</h3><blockquote><p>变量值的替换</p></blockquote><p><code>$(var:a=b)</code>将变量var中所有以字串a<strong>结尾</strong>的‘a’替换为字串’b’。此处结尾指的是空格或结束符</p><p><code>$(var:%.c=%.d)</code>作用同上，此种通过静态模式定义。</p><blockquote><p>使用变量的变量</p></blockquote><p>Makefile中的变量类似于宏，可以用于拼接任意东西</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">x <span class="token operator">=</span> variable1variable2 <span class="token operator">:=</span> Helloy <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">subst</span> 1,2,<span class="token variable">$</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>z <span class="token operator">=</span> ya <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">first_second <span class="token operator">=</span> Helloa <span class="token operator">=</span> firstb <span class="token operator">=</span> secondall <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token variable">$a_$b</span><span class="token punctuation">)</span><span class="token comment"># $a_$b 拼接成变量名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token keyword">ifdef</span> do_sort    func <span class="token operator">:=</span> sort<span class="token keyword">else</span>    func <span class="token operator">:=</span> strip<span class="token keyword">endif</span>bar <span class="token operator">:=</span> a d b g q cfoo <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># $(func) $(bar) 分别拼接成函数名及其参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>追加变量值</p></blockquote><p><code>+=</code></p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">variable <span class="token operator">:=</span> valuevariable <span class="token operator">+=</span> more<span class="token comment">#=== 等价于 ===#</span>variable <span class="token operator">:=</span> valuevariable <span class="token operator">:=</span> <span class="token variable">$</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span> more<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>多行变量</p></blockquote><p>利用<code>define</code>关键字设置变量的值可以有换行，便于定义一系列命令。</p><p>变量的值可以包含函数、命令、文字，或是其它变量。因为命令需要以[Tab]键开头，所以如果你用define定义的命令变量中没有以 <code>Tab</code> 键开头，那么make 就不会把其认为是命令。</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token keyword">define</span> two-linesecho fooecho <span class="token variable">$</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token keyword">endef</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>override</p></blockquote><p>如果有变量是通常make的命令行参数设置的，那么Makefile中对这个变量的赋值会被忽略。如果你想在Makefile中设置这类参数的值，那么，你可以使用“override”指示符。其语法是:</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token keyword">override</span> &lt;variable&gt;<span class="token punctuation">;</span> <span class="token operator">=</span> &lt;value&gt;<span class="token punctuation">;</span><span class="token keyword">override</span> &lt;variable&gt;<span class="token punctuation">;</span> <span class="token operator">:=</span> &lt;value&gt;<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当然，你还可以追加:</p><pre class="line-numbers language-none"><code class="language-none">override &lt;variable&gt;; += &lt;more text&gt;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-3-特殊变量"><a href="#5-3-特殊变量" class="headerlink" title="5.3 特殊变量"></a>5.3 特殊变量</h3><blockquote><p>环境变量</p></blockquote><p>make运行时的系统环境变量可以在make开始运行时被载入到Makefile文件中，但是如果Makefile中已定义了这个变量，或是这个变量由make命令行带入，那么系统的环境变量的值将被覆盖。（如果make指定了“-e”参数，那么，系统环境变量将覆盖Makefile中定义的变量）</p><p>因此，如果我们在环境变量中设置了 <code>CFLAGS</code> 环境变量，那么我们就可以在所有的Makefile中使用这个变量了。这对于我们使用统一的编译参数有比较大的好处。如果Makefile中定义了CFLAGS，那么则会使用Makefile中的这个变量，如果没有定义则使用系统环境变量的值，一个共性和个性的统一，很像“全局变量”和“局部变量”的特性。</p><p>当make嵌套调用时（参见前面的“嵌套调用”章节），上层Makefile中定义的变量会以系统环境变量的方式传递到下层的Makefile 中。当然，默认情况下，只有通过命令行设置的变量会被传递。而定义在文件中的变量，如果要向下层Makefile传递，则需要使用exprot关键字来声明。（参见前面章节）</p><blockquote><p>目标变量</p></blockquote><p>为某个目标设置局部变量，其作用范围只在这条规则及其连带的规则中。</p><p>语法：</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">&lt;target ...&gt;</span> <span class="token punctuation">:</span> &lt;variable-assignment&gt;<span class="token comment"># 主要用于处理环境变量</span><span class="token target symbol">&lt;target ...&gt;</span> <span class="token punctuation">:</span> <span class="token keyword">override</span> &lt;variable-assignment&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">prog</span> <span class="token punctuation">:</span> CFLAGS <span class="token operator">=</span> -g<span class="token target symbol">prog</span> <span class="token punctuation">:</span> prog.o foo.o bar.o    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> prog.o foo.o bar.o<span class="token target symbol">prog.o</span> <span class="token punctuation">:</span> prog.c    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> prog.c<span class="token target symbol">foo.o</span> <span class="token punctuation">:</span> foo.c    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> foo.c<span class="token target symbol">bar.o</span> <span class="token punctuation">:</span> bar.c    <span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> bar.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>模式变量</p></blockquote><p>将变量定义在所有符合模式的目标上</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol">%.o</span> <span class="token punctuation">:</span> CFLAGS <span class="token operator">=</span> -o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>语法同目标变量</p><h2 id="6-条件判断"><a href="#6-条件判断" class="headerlink" title="6. 条件判断"></a>6. 条件判断</h2><blockquote><p>语法</p></blockquote><pre class="line-numbers language-none"><code class="language-none">&lt;conditional-directive&gt;&lt;text-if-true&gt;endif&lt;conditional-directive&gt;&lt;text-if-true&gt;else&lt;text-if-false&gt;endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>ifeq / ifneq</p></blockquote><p>比较两个参数的值是否相等/不相等</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">libs_for_gcc <span class="token operator">=</span> -lgnunormal_libs <span class="token operator">=</span><span class="token target symbol">foo</span><span class="token punctuation">:</span> <span class="token variable">$</span><span class="token punctuation">(</span>objects<span class="token punctuation">)</span><span class="token keyword">ifeq</span> <span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span>, gcc<span class="token punctuation">)</span><span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -o foo <span class="token variable">$</span><span class="token punctuation">(</span>objects<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>libs_for_gcc<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -o foo <span class="token variable">$</span><span class="token punctuation">(</span>objects<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>normal_libs<span class="token punctuation">)</span><span class="token keyword">endif</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>ifdef / ifndef</p></blockquote><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token keyword">ifdef</span> &lt;variable-name&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>判断变量的值是否为空，非空为真，空为假</p><p>仅判断一个变量是否有值，而不会将其展开</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile">bar <span class="token operator">=</span>foo <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token comment"># 此处判断为真 </span><span class="token keyword">ifdef</span> foo    frobozz <span class="token operator">=</span> yes<span class="token keyword">else</span>    frobozz <span class="token operator">=</span> no<span class="token keyword">endif</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>make在读取Makefile时就会计算条件表达式的值，因此不要在此处使用自动化变量</strong></p><h2 id="7-函数"><a href="#7-函数" class="headerlink" title="7. 函数"></a>7. 函数</h2><blockquote><p>调用语法</p></blockquote><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token variable">$</span><span class="token punctuation">(</span>&lt;function-name&gt; &lt;arguments&gt;<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>函数名与参数之间用空格分隔，参数之间用<code>,</code>分隔</p><h3 id="7-1-字符串处理函数"><a href="#7-1-字符串处理函数" class="headerlink" title="7.1 字符串处理函数"></a>7.1 字符串处理函数</h3><blockquote><p>subst</p></blockquote><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">subst</span> &lt;from&gt;, &lt;to&gt;, &lt;text&gt;<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>功能：将字串<code>&lt;text&gt;</code>中的<code>&lt;from&gt;</code>转换为<code>&lt;to&gt;</code></p><p>返回：替换后的字符串</p><blockquote><p>patsubst</p></blockquote><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">patsubst</span> &lt;pattern&gt;,&lt;replacement&gt;<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>功能：查找 <code>&lt;text&gt;</code> 中的单词<strong>（单词以“空格”、“Tab”或“回车”“换行”分隔）</strong>是否符合模式 <code>&lt;pattern&gt;</code> ，如果匹配的话，则以 <code>&lt;replacement&gt;</code> 替换。这里， <code>&lt;pattern&gt;</code> 可以包括通配符 <code>%</code> ，表示任意长度的字串。如果 <code>&lt;replacement&gt;</code> 中也包含 <code>%</code> ，那么， <code>&lt;replacement&gt;</code> 中的这个 <code>%</code> 将是 <code>&lt;pattern&gt;</code> 中的那个 <code>%</code> 所代表的字串。（可以用 <code>\</code> 来转义，以 <code>\%</code> 来表示真实含义的 <code>%</code> 字符）</p><p>返回：替换后的字符串</p><blockquote><p>strip</p></blockquote><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">strip</span> &lt;string&gt;<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>功能：去掉<string>字串开头和结尾的空格</string></p><p>返回：被去掉空格的字符串</p><blockquote><p>findstring</p></blockquote><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">findstring</span> &lt;find&gt;,&lt;in&gt;<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>功能：在字串<in>中查找<find>字串</find></in></p><p>返回：如果找到，返回<find>字串</find></p><blockquote><p>filter / filterout</p></blockquote><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">filter</span> &lt;pattern...&gt;, &lt;text&gt;<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>功能：以 <code>&lt;pattern&gt;</code> 模式过滤/去除 <code>&lt;text&gt;</code> 字符串中的单词，保留符合模式 <code>&lt;pattern&gt;</code> 的单词。可以有多个模式。</p><p>返回：符合模式的字串</p><blockquote><p>sort</p></blockquote><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">sort</span> &lt;list&gt;<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>功能：给字符串 <code>&lt;list&gt;</code> 中的单词排序（升序）。</p><p>返回：返回排序后的字符串。</p><p>示例： <code>$(sort foo bar lose)</code> 返回 <code>bar foo lose</code> 。</p><p>备注： <code>sort</code> 函数会去掉 <code>&lt;list&gt;</code> 中相同的单词。</p><blockquote><p>word</p></blockquote><pre class="line-numbers language-none"><code class="language-none">$(word &lt;n&gt;,&lt;text&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>名称：取单词函数</p><p>功能：取字符串 <code>&lt;text&gt;</code> 中第 <code>&lt;n&gt;</code> 个单词。（从一开始）</p><p>返回：返回字符串 <code>&lt;text&gt;</code> 中第 <code>&lt;n&gt;</code> 个单词。如果 <code>&lt;n&gt;</code> 比 <code>&lt;text&gt;</code> 中的单词数要大，那么返回空字符串。</p><p>示例： <code>$(word 2, foo bar baz)</code> 返回值是 <code>bar</code> 。</p><blockquote><p>wordlist</p></blockquote><pre class="line-numbers language-none"><code class="language-none">$(wordlist &lt;ss&gt;,&lt;e&gt;,&lt;text&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>名称：取单词串函数</p><p>功能：从字符串 <code>&lt;text&gt;</code> 中取从 <code>&lt;ss&gt;</code> 开始到 <code>&lt;e&gt;</code> 的单词串。 <code>&lt;ss&gt;</code> 和 <code>&lt;e&gt;</code> 是一个数字。</p><p>返回：返回字符串 <code>&lt;text&gt;</code> 中从 <code>&lt;ss&gt;</code> 到 <code>&lt;e&gt;</code> 的单词字串。如果 <code>&lt;ss&gt;</code> 比 <code>&lt;text&gt;</code> 中的单词数要大，那么返回空字符串。如果 <code>&lt;e&gt;</code> 大于 <code>&lt;text&gt;</code> 的单词数，那么返回从 <code>&lt;ss&gt;</code> 开始，到 <code>&lt;text&gt;</code> 结束的单词串。</p><p>示例： <code>$(wordlist 2, 3, foo bar baz)</code> 返回值是 <code>bar baz</code> 。</p><blockquote><p>firstword</p></blockquote><pre class="line-numbers language-none"><code class="language-none">$(firstword &lt;text&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>名称：首单词函数——firstword。</p><p>功能：取字符串 <code>&lt;text&gt;</code> 中的第一个单词。</p><p>返回：返回字符串 <code>&lt;text&gt;</code> 的第一个单词。</p><p>示例： <code>$(firstword foo bar)</code> 返回值是 <code>foo</code>。</p><p>备注：这个函数可以用 <code>word</code> 函数来实现： <code>$(word 1,&lt;text&gt;)</code> 。</p><h3 id="7-2-文件名处理函数"><a href="#7-2-文件名处理函数" class="headerlink" title="7.2 文件名处理函数"></a>7.2 文件名处理函数</h3><blockquote><p>dir</p></blockquote><pre class="line-numbers language-none"><code class="language-none">$(dir &lt;names...&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>名称：取目录函数——dir。</p><p>功能：从文件名序列 <code>&lt;names&gt;</code> 中取出目录部分。目录部分是指最后一个反斜杠（ <code>/</code> ）之前的部分。如果没有反斜杠，那么返回 <code>./</code> 。</p><p>返回：返回文件名序列 <code>&lt;names&gt;</code> 的目录部分。</p><p>示例： <code>$(dir src/foo.c hacks)</code> 返回值是 <code>src/ ./</code> 。</p><blockquote><p>notdir</p></blockquote><pre class="line-numbers language-none"><code class="language-none">$(notdir &lt;names...&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>名称：取文件函数——notdir。</p><p>功能：从文件名序列 <code>&lt;names&gt;</code> 中取出非目录部分。非目录部分是指最後一个反斜杠（ <code>/</code> ）之后的部分。</p><p>返回：返回文件名序列 <code>&lt;names&gt;</code> 的非目录部分。</p><p>示例: <code>$(notdir src/foo.c hacks)</code> 返回值是 <code>foo.c hacks</code> 。</p><blockquote><p>suffix</p></blockquote><pre class="line-numbers language-none"><code class="language-none">$(suffix &lt;names...&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>名称：取後缀函数——suffix。</p><p>功能：从文件名序列 <code>&lt;names&gt;</code> 中取出各个文件名的后缀。</p><p>返回：返回文件名序列 <code>&lt;names&gt;</code> 的后缀序列，如果文件没有后缀，则返回空字串。</p><p>示例： <code>$(suffix src/foo.c src-1.0/bar.c hacks)</code> 返回值是 <code>.c .c</code>。</p><blockquote><p>basename</p></blockquote><pre class="line-numbers language-none"><code class="language-none">$(basename &lt;names...&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>名称：取前缀函数——basename。</p><p>功能：从文件名序列 <code>&lt;names&gt;</code> 中取出各个文件名的前缀部分。</p><p>返回：返回文件名序列 <code>&lt;names&gt;</code> 的前缀序列，如果文件没有前缀，则返回空字串。</p><p>示例： <code>$(basename src/foo.c src-1.0/bar.c hacks)</code> 返回值是 <code>src/foo src-1.0/bar hacks</code> 。</p><blockquote><p>addsuffix</p></blockquote><pre class="line-numbers language-none"><code class="language-none">$(addsuffix &lt;suffix&gt;,&lt;names...&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>名称：加后缀函数——addsuffix。</p><p>功能：把后缀 <code>&lt;suffix&gt;</code> 加到 <code>&lt;names&gt;</code> 中的每个单词后面。</p><p>返回：返回加过后缀的文件名序列。</p><p>示例： <code>$(addsuffix .c,foo bar)</code> 返回值是 <code>foo.c bar.c</code> 。</p><blockquote><p> addprefix</p></blockquote><pre class="line-numbers language-none"><code class="language-none">$(addprefix &lt;prefix&gt;,&lt;names...&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>名称：加前缀函数——addprefix。</p><p>功能：把前缀 <code>&lt;prefix&gt;</code> 加到 <code>&lt;names&gt;</code> 中的每个单词后面。</p><p>返回：返回加过前缀的文件名序列。</p><p>示例： <code>$(addprefix src/,foo bar)</code> 返回值是 <code>src/foo src/bar</code> 。</p><blockquote><p>join</p></blockquote><pre class="line-numbers language-none"><code class="language-none">$(join &lt;list1&gt;,&lt;list2&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>名称：连接函数——join。</p><p>功能：把 <code>&lt;list2&gt;</code> 中的单词对应地加到 <code>&lt;list1&gt;</code> 的单词后面。如果 <code>&lt;list1&gt;</code> 的单词个数要比 <code>&lt;list2&gt;</code> 的多，那么， <code>&lt;list1&gt;</code> 中的多出来的单词将保持原样。如果 <code>&lt;list2&gt;</code> 的单词个数要比 <code>&lt;list1&gt;</code> 多，那么， <code>&lt;list2&gt;</code> 多出来的单词将被复制到 <code>&lt;list1&gt;</code> 中。</p><p>返回：返回连接过后的字符串。</p><p>示例： <code>$(join aaa bbb , 111 222 333)</code> 返回值是 <code>aaa111 bbb222 333</code> 。</p><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><pre class="line-numbers language-none"><code class="language-none">$(foreach &lt;var&gt;,&lt;list&gt;,&lt;text&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个函数的意思是，把参数 <code>&lt;list&gt;</code> 中的单词逐一取出放到参数 <code>&lt;var&gt;</code> 所指定的变量中，然后再执行 <code>&lt;text&gt;</code> 所包含的表达式。每一次 <code>&lt;text&gt;</code> 会返回一个字符串，循环过程中， <code>&lt;text&gt;</code> 的所返回的每个字符串会以空格分隔，最后当整个循环结束时， <code>&lt;text&gt;</code> 所返回的每个字符串所组成的整个字符串（以空格分隔）将会是foreach函数的返回值。</p><p>所以， <code>&lt;var&gt;</code> 最好是一个变量名， <code>&lt;list&gt;</code> 可以是一个表达式，而 <code>&lt;text&gt;</code> 中一般会使用 <code>&lt;var&gt;</code> 这个参数来依次枚举 <code>&lt;list&gt;</code> 中的单词。举个例子：</p><pre class="line-numbers language-none"><code class="language-none">names := a b c dfiles := $(foreach n,$(names),$(n).o)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面的例子中， <code>$(name)</code> 中的单词会被挨个取出，并存到变量 <code>n</code> 中， <code>$(n).o</code> 每次根据 <code>$(n)</code> 计算出一个值，这些值以空格分隔，最后作为foreach函数的返回，所以， <code>$(files)</code> 的值是 <code>a.o b.o c.o d.o</code> 。</p><p>注意，foreach中的 <code>&lt;var&gt;</code> 参数是一个临时的局部变量，foreach函数执行完后，参数 <code>&lt;var&gt;</code> 的变量将不在作用，其作用域只在foreach函数当中。</p><h3 id="call函数"><a href="#call函数" class="headerlink" title="call函数"></a>call函数</h3><p>call函数是唯一一个可以用来创建新的参数化的函数。你可以写一个非常复杂的表达式，这个表达式中，你可以定义许多参数，然后你可以call函数来向这个表达式传递参数。其语法是：</p><pre class="line-numbers language-none"><code class="language-none">$(call &lt;expression&gt;,&lt;parm1&gt;,&lt;parm2&gt;,...,&lt;parmn&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当make执行这个函数时， <code>&lt;expression&gt;</code> 参数中的变量，如 <code>$(1)</code> 、 <code>$(2)</code> 等，会被参数 <code>&lt;parm1&gt;</code> 、 <code>&lt;parm2&gt;</code> 、 <code>&lt;parm3&gt;</code> 依次取代。而 <code>&lt;expression&gt;</code> 的返回值就是 call 函数的返回值。例如：</p><pre class="line-numbers language-none"><code class="language-none">reverse =  $(1) $(2)foo = $(call reverse,a,b)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>那么， <code>foo</code> 的值就是 <code>a b</code> 。当然，参数的次序是可以自定义的，不一定是顺序的，如：</p><pre class="line-numbers language-none"><code class="language-none">reverse =  $(2) $(1)foo = $(call reverse,a,b)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>此时的 <code>foo</code> 的值就是 <code>b a</code> 。</p><p>需要注意：在向 call 函数传递参数时要尤其注意空格的使用。call 函数在处理参数时，第2个及其之后的参数中的空格会被保留，因而可能造成一些奇怪的效果。因而在向call函数提供参数时，最安全的做法是去除所有多余的空格。</p><h3 id="origin函数"><a href="#origin函数" class="headerlink" title="origin函数"></a>origin函数</h3><p>origin函数不像其它的函数，他并不操作变量的值，他只是告诉你你的这个变量是哪里来的？其语法是：</p><pre class="line-numbers language-none"><code class="language-none">$(origin &lt;variable&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>注意， <code>&lt;variable&gt;</code> 是变量的名字，不应该是引用。所以你最好不要在 <code>&lt;variable&gt;</code> 中使用</p><p><code>$</code> 字符。Origin函数会以其返回值来告诉你这个变量的“出生情况”，下面，是origin函数的返回值:</p></li><li><p><code>undefined</code></p><p>如果 <code>&lt;variable&gt;</code> 从来没有定义过，origin函数返回这个值 <code>undefined</code></p></li><li><p><code>default</code></p><p>如果 <code>&lt;variable&gt;</code> 是一个默认的定义，比如“CC”这个变量，这种变量我们将在后面讲述。</p></li><li><p><code>environment</code></p><p>如果 <code>&lt;variable&gt;</code> 是一个环境变量，并且当Makefile被执行时， <code>-e</code> 参数没有被打开。</p></li><li><p><code>file</code></p><p>如果 <code>&lt;variable&gt;</code> 这个变量被定义在Makefile中。</p></li><li><p><code>command line</code></p><p>如果 <code>&lt;variable&gt;</code> 这个变量是被命令行定义的。</p></li><li><p><code>override</code></p><p>如果 <code>&lt;variable&gt;</code> 是被override指示符重新定义的。</p></li><li><p><code>automatic</code></p><p>如果 <code>&lt;variable&gt;</code> 是一个命令运行中的自动化变量。关于自动化变量将在后面讲述。</p></li></ul><p>这些信息对于我们编写Makefile是非常有用的，例如，假设我们有一个Makefile其包了一个定义文件 Make.def，在 Make.def中定义了一个变量“bletch”，而我们的环境中也有一个环境变量“bletch”，此时，我们想判断一下，如果变量来源于环境，那么我们就把之重定义了，如果来源于Make.def或是命令行等非环境的，那么我们就不重新定义它。于是，在我们的Makefile中，我们可以这样写：</p><pre class="line-numbers language-none"><code class="language-none">ifdef bletch    ifeq "$(origin bletch)" "environment"        bletch = barf, gag, etc.    endifendif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，你也许会说，使用 <code>override</code> 关键字不就可以重新定义环境中的变量了吗？为什么需要使用这样的步骤？是的，我们用 <code>override</code> 是可以达到这样的效果，可是 <code>override</code> 过于粗暴，它同时会把从命令行定义的变量也覆盖了，而我们只想重新定义环境传来的，而不想重新定义命令行传来的。</p><h3 id="shell函数"><a href="#shell函数" class="headerlink" title="shell函数"></a>shell函数</h3><p>shell函数也不像其它的函数。顾名思义，它的参数应该就是操作系统Shell的命令。它和反引号“`”是相同的功能。这就是说，shell函数把执行操作系统命令后的输出作为函数返回。于是，我们可以用操作系统命令以及字符串处理命令awk，sed等等命令来生成一个变量，如：</p><pre class="line-numbers language-none"><code class="language-none">contents := $(shell cat foo)files := $(shell echo *.c)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意，这个函数会新生成一个Shell程序来执行命令，所以你要注意其运行性能，如果你的Makefile中有一些比较复杂的规则，并大量使用了这个函数，那么对于你的系统性能是有害的。特别是Makefile的隐晦的规则可能会让你的shell函数执行的次数比你想像的多得多。</p>]]></content>
      
      
      <categories>
          
          <category> Remake </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Remake | 数据结构</title>
      <link href="/2022/06/29/DataStructure/"/>
      <url>/2022/06/29/DataStructure/</url>
      
        <content type="html"><![CDATA[<p>菜狗的Remake之路 – 数据结构篇</p><span id="more"></span><p>使用语言：Java</p><blockquote><p>实例化对象的过程</p></blockquote><p>首先根据构造函数传入的参数初始化对象中的属性，然后该对象的属性的首个bit所在的位置返回，作为该对象的地址被存入到对应的变量中。</p><p>所有地址长度位64位，null的地址为全0。</p><p>tips：所有的赋值操作都是将该变量存储的字节全部拷贝到另一个变量中。</p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>尽量避免特判可有效提高代码健壮性。</p><p>表头添加哨兵结点的思想：让链表在任何情况下的状态都遵循同一套操作逻辑。</p><p>在单链表中添加头部哑节点的原因是，在某些情况下无法访问链表中结点的next属性，因此我们通过添加哑节点来使next属性在任何时刻都可以被访问。</p><p>而对于双向链表，又出现了某些结点的prev属性不能被访问或是说不应该被访问。例如，按照原先单链表的设计，我们将需要在前插时对是否是头部哑节点进行特判。</p><p>此时有两种解决方法：</p><ol><li>在尾部也添加一个哑节点。</li><li>将链表设计成循环链表。</li></ol><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><blockquote><p>resize</p></blockquote><p>当顺序表需要进行resize操作时，将数组大小进行指数级更改，而非简单的加减。因为加减无法根据当前数据量的大小动态进行调整，导致在数据量过大时频繁地调用resize操作拖慢速度且占用大量空间。</p><p>若顺序表中数组存储的不是基本数据类型，则不推荐懒惰删除，因为被删除对象的引用仍然保存着，不会被gc回收，占用内存。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承会从父类继承所有的成员变量，静态变量，所有的方法和内部类。</p><p>但被private修饰的不可直接访问。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 调用父类方法</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>tips:构造器都不会被继承，但Java会默认在子类构造器中首先调用基类默认<em>无参</em>构造器。</p><blockquote><p>继承会破坏封装</p></blockquote><p>Java根据动态数据类型调用方法，若子类中覆写了一个方法，其中调用了从基类继承来的方法，但此方法调用了基类中被覆写的方法，则此时不会调用父类中被覆写的方法，而是子类的方法，最终陷入无限循环。</p><p>封装被破坏的直接体现：模组中的方法不再以整体的形式被调用</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="合并排序-选择排序"><a href="#合并排序-选择排序" class="headerlink" title="合并排序 (+ 选择排序)"></a>合并排序 (+ 选择排序)</h3><p>合并排序在处理有序数组时仅有O(N)的复杂度，因此可以选择将无序数组切分成若干部分，对其分别调用选择排序，再进行合并，实现排序加速。</p><p>但若将数组切分到只剩单个元素的小块，则可直接用合并排序实现一切，复杂度为O(NlogN)，代价是内存占用较大。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Sort</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * merge two sorted array to a sorted array     * @param &lt;T&gt; type of data     * @param datas1 a sorted array and all of its elements are not null     * @param datas2 a sorted array and all of its elements are not null     * @param c The comparator of type T     * @return a sorted array containing all elements in datas1 and datas2     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> datas1<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> datas2<span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> cc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>        i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// ret = (T[])(new Object[datas1.length + datas2.length]);</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> datas1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> datas2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> cmp <span class="token operator">=</span> cc<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>datas1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> datas2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cmp <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>datas1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                ret<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>datas2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">++</span>j<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            idx<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> datas1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ret<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>datas1<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> datas1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">!=</span> datas2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ret<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>datas2<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> datas2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> datas<span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> cc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> datas<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">T</span> elem <span class="token operator">=</span> datas<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> cc<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>datas<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> elem<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                datas<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> datas<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            datas<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> elem<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> datas<span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> cc<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>datas<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">insertSort</span><span class="token punctuation">(</span>datas<span class="token punctuation">,</span> cc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> datas<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> datas<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> sort1 <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>datas<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">,</span> cc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> sort2 <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>datas<span class="token punctuation">.</span><span class="token function">subList</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span> datas<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> ret <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>sort1<span class="token punctuation">,</span> sort2<span class="token punctuation">,</span> cc<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>划分域：在数组中选取一个元素，在对元素重新组织后，使得在该元素的左边均为</p><p>小于他的元素，右边均为大于他的元素。</p><p>划分域 -&gt; 被选取的元素已经就位</p><p>因此快排的思路就是，在数组中选取一个枢纽点，以他为中心重新组织数组，使其满足划分域的要求。然后对划分的左右两边继续调用快排直至数组中没有元素或只剩1个元素。</p><p>快排的本质仍旧是一棵以枢纽点为节点的二叉树，树的平均高度为logN，而在树的每一层中进行的重组织的时间复杂度为O(N)，因此快排的时间复杂度为O(NlogN)</p><p>但要注意的是，若枢纽点选取不当，会导致树退化成单链表，例如当数组基本有序或有大量重复元时，每次划分都只会划分出1个元素。</p><blockquote><p>优化方法</p></blockquote><ol><li>使用随机算法进行枢纽元选取，有大概率会选到在中间大小的元素</li><li>当数组元素数量不大时，切换为稳定的排序算法（插排/归并），避免树的深度在最后大幅增加</li></ol><blockquote><p>Hora partition</p></blockquote><p>使一个指针i指向数组起点，一个指针j指向数组终点，当i所指的元素小于pivot时，右移i，当j所指元素大于pivot时，左移j。i和j都停下时，交换所指元素。重复上述步骤，直至i与j交叉，然后将pivot与j交换。（此时j必定处于最后一个小于pivot的位置，因此需要如此交换）</p><h3 id="快速选择"><a href="#快速选择" class="headerlink" title="快速选择"></a>快速选择</h3><p>若要选取数组中第k小的元素，则将数组中的最后一个元素作为pivot，初始化pivotloc于数组起点，然后遍历数组，若当前元素小于pivot，则将其与pivotloc交换，并移动pivotloc，最后交换pivotloc所指元素与pivot。这样就将数组切分成两块，然后检查获得的pivotloc是否与k相等，若大于，则对左半部分继续切分，若小于，则对右半部分继续切分。（此时，左半部分均小于pivotloc的元素，右半部分反之）</p><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><p>不实质性将两个结点连接，而是将其存储在同一个集合中，表明他们之间有链接。</p><p>这样在查询两个结点之间是否连接时只需要看他们是否在同一集合中。</p><p>re:我们不需要像图那样直到具体的连接情况，因此可以用逻辑上的连接代替。</p><blockquote><p>implement</p></blockquote><p>实现方式1：哈希表（通用）</p><p>对于整形</p><p>实现方式2：创建一个大小为N的数组，数组中存储的是其对应下标数组所属的集合的代表数字。</p><p>快速连接的方法：直接修改集合的代表元素指向的父级结点的值。但此时父级结点的计算仍可能是一个昂贵的操作。最坏情况会退化到O(N)。</p><p>因此我们选择将一个结合中所有的元素都指向结合代表元素，这样查询当前集合的父节点的时间就被大大压缩。</p><p>此时需要考虑在合并时应将小的集合并到大的集合来减少树的深度。</p><p>-&gt; 使用一个数组来追踪集合大小，确保每一次都是小的往大的合，这样树的深度永远被控制在logN。</p><p>路径压缩：在执行isConnect时，将单个集合中的所有结点指向其最高父结点。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Union</span> <span class="token punctuation">{</span>        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parent<span class="token punctuation">;</span>    <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> size<span class="token punctuation">;</span>    <span class="token comment">/*        AF(n) : a union containing n elements,         their parent nodes are stored in {parent}        every set's size is stored in size        Rep invarient:        parent != null, elements in parent are greater than or equal to 0, less than n        size != null, elements in size are not less than 1    */</span>    <span class="token keyword">public</span> <span class="token class-name">Union</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        parent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            size<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * check if p and q are belong to the same set     * compress the path at the same time     * @param p node p     * @param q node q     * @return if they are belong to the same set     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isConnect</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> i <span class="token operator">==</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * find parent of p     * @param p node p     * @return its parent     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> parent<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> parent<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>parent<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * connect set containing p and set containing q together     * @param p node p     * @param q node q     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> parent<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> parent<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>size<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> size<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            parent<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            size<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> size<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            parent<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>            size<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> size<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><blockquote><p>前/中/后序遍历时间复杂度</p></blockquote><p>因为该遍历算法针对每一个结点作处理，其时间复杂度增长与结点个数有关。一次遍历要考虑N个节点，因此时间复杂度为O(N)</p><blockquote><p>层序遍历</p></blockquote><p>层序遍历的区别在于，该算法时间复杂度的增长与层数有关，假设层数为H，操作次数为1 + 2^1 + 2^2 + …</p><p>因此其时间复杂度为O(2^H)，而H=logN，所以时间复杂度为O(N)</p><h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><p>对于一张有序的顺序表，可以通过不断的将其二分来进行压缩，BST就是二分查找的显式表现。</p><p>根节点的左子树这种的元素均小于根节点的元素，右子树的均大于根节点元素。</p><blockquote><p>删除操作</p></blockquote><p>对于叶子节点，直接将其删除即可。</p><p>对于有单个孩子的结点，用其孩子结点顶替当前结点。</p><p>对于有两个孩子的结点，找到其左子树中最大的结点或右子树中最小的结点(必然是叶子结点或只有一个孩子的结点)来顶替它，然后删除用于顶替的结点。</p><p>tip：但是删除操作做的越多，树的高度就会不断增高，因为每次删除都相当于让树的某一端的结点数量减少，最后失去平衡。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinSearchTree</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> root<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getHelper</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> <span class="token function">getHelper</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> key<span class="token punctuation">,</span> <span class="token class-name">Node</span> troot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>troot <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>troot<span class="token punctuation">.</span>elem<span class="token punctuation">.</span>key <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> troot<span class="token punctuation">.</span>elem<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>troot<span class="token punctuation">.</span>elem<span class="token punctuation">.</span>key <span class="token operator">&lt;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">getHelper</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> troot<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">getHelper</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> troot<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">Node</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> key<span class="token punctuation">,</span> <span class="token class-name">Integer</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        root <span class="token operator">=</span> <span class="token function">insertHelper</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">insertHelper</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> key<span class="token punctuation">,</span> <span class="token class-name">Integer</span> value<span class="token punctuation">,</span> <span class="token class-name">Node</span> troot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>troot <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            size<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>troot<span class="token punctuation">.</span>elem<span class="token punctuation">.</span>key <span class="token operator">&gt;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>                troot<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">insertHelper</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> troot<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>troot<span class="token punctuation">.</span>elem<span class="token punctuation">.</span>key <span class="token operator">&lt;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>                troot<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">insertHelper</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> troot<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> troot<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getHelper</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> root<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">deleteHelper</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">deleteHelper</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> key<span class="token punctuation">,</span> <span class="token class-name">Node</span> troot<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>troot <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>troot<span class="token punctuation">.</span>elem<span class="token punctuation">.</span>key <span class="token operator">&lt;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            troot<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token function">deleteHelper</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> troot<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>troot<span class="token punctuation">.</span>elem<span class="token punctuation">.</span>key <span class="token operator">&gt;</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            troot<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">deleteHelper</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> troot<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>troot<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> troot<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">Node</span> tmp <span class="token operator">=</span> <span class="token function">findMax</span><span class="token punctuation">(</span>troot<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                troot<span class="token punctuation">.</span>elem <span class="token operator">=</span> tmp<span class="token punctuation">.</span>elem<span class="token punctuation">;</span>                troot<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token function">deleteHelper</span><span class="token punctuation">(</span>troot<span class="token punctuation">.</span>elem<span class="token punctuation">.</span>key<span class="token punctuation">,</span> troot<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>troot<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    troot <span class="token operator">=</span> troot<span class="token punctuation">.</span>right<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>troot<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    troot <span class="token operator">=</span> troot<span class="token punctuation">.</span>left<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> troot<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">findMax</span><span class="token punctuation">(</span><span class="token class-name">Node</span> troot<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>troot <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>troot<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            troot <span class="token operator">=</span> troot<span class="token punctuation">.</span>right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> troot<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">Pair</span> elem<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Node</span> left<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Node</span> right<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Pair</span> elem<span class="token punctuation">,</span> <span class="token class-name">BinSearchTree<span class="token punctuation">.</span>Node</span> left<span class="token punctuation">,</span> <span class="token class-name">BinSearchTree<span class="token punctuation">.</span>Node</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elem <span class="token operator">=</span> elem<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>           <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">Pair</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> key<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token class-name">Integer</span> value<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">Pair</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> key<span class="token punctuation">,</span> <span class="token class-name">Integer</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h3><p>在已知一组数据的情况下，若将其按随机顺序插入，则复杂度大概率是O(logN)，但若不提前知道数据，那么有可能会让树退化成单链表，因为先前并没有考虑该往哪里插入数据，基本都是插在底部，因此很有可能只往一端插入数据，让树的高度大幅增加。</p><p>因此我们需要在每一次插入与删除之后检查树的平衡，若失衡则进行调整。</p><blockquote><p>左旋</p></blockquote><p>右端大量的数据破坏了树的平衡，则将原来的根节点作为新根节点的左子树，新根节点原来的左子树接到原根结点的右端。右旋同理。</p><blockquote><p>B tree</p></blockquote><p>使一个结点能够存储多个数据，例如每个结点允许存储3个数据，当数据量大于3时，将当前结点拆分，将第2大的数据放到父节点中存储。这样之后每个结点都有4棵子树，分别存储 &lt; val1, &gt;val1 &amp;&amp; &lt; val2，…的数据。只有当根节点中的数据也超过上限时，树的高度才会增加，将第2大的数据作为新的根节点，然后重新分配子树。</p><blockquote><p>红黑树</p></blockquote><p>红黑树即是B树(2-3树)和二叉树的结合，对于含有两个数据的结点，<strong>逻辑上</strong>添加一个哑结点作为这两个数据的父节点，这样就将他们拆分成二叉树，这个哑结点即为红黑树中的红。</p><h2 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h2><p>将数据本身当作索引，仅仅把数据看作是位，而在数组对应的位置存储布尔值。</p><p>但该方法会占用大量空间，且对于非数字类型不友好（但可以进行映射，确保任何值都会被分配到唯一的一个空间）。</p><p>将元素转换为下标的过程即为hash，注意不要让hash生成负数，或对其进行特殊处理。</p><p>对于超过2亿的数据量，必然会有多个元素共享空间的情况，因此我们不在数组中存储true/false,而是对应的元素</p><p>哈希的速度取决于它存储的数据量（越多的数据量代表越多的冲突），N个数据分布在M个桶里时，其平均访问速度为O(N/M), L=N/M即为装在因子。当装载因子超过阈值时，就要进行rehash操作，通过使用更多的桶来减少冲突。</p><p>但装载因子不是唯一需要考虑的东西，当一系列数据共享同一个空间时，其装载因子也可能非常小，因此哈希函数的涉及应确保哈希表中的数据分散存放。</p><h2 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h2><p>可以追踪或移除最大/最小元素</p><p>堆用树的形式体现具有如下特质：</p><ol><li>所有的结点都要小于等于它的子节点</li><li>完全</li></ol><blockquote><p>add</p></blockquote><p>先将要插入的结点放在最后一个位置，若其父节点的值大于其值，则将父节点沉降，直到父节点的值小于该节点的值，此时空槽到达满足要求的位置。</p><blockquote><p>remove</p></blockquote><p>先将最后一个结点提升为root结点，然后沉降直到它的值小于它的孩子节点。</p><blockquote><p>用数组表示树</p></blockquote><ol><li><p>将键存储在一个数组中，将对应的父节点id存在另一个数组中</p></li><li><p>只存储数据，不存储结构，假设是一个完整二叉树。</p><p>父节点与子节点的下标关系：</p><p>从1开始存储</p><ul><li>parent = k/2</li><li>left child = 2 * k</li><li>right child = 2 *</li></ul></li></ol><h2 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h2><h3 id="图的实现方式"><a href="#图的实现方式" class="headerlink" title="图的实现方式"></a>图的实现方式</h3><blockquote><p>临接矩阵</p></blockquote><p>用二维数组存储图，其矩阵的行列分别表示起点与终点，矩阵中存储的内容表示两点是否连接，或者是两点间边的权重。</p><p>遍历的时间复杂度为O(V^2)</p><p>首先要将所有点当作起点展开一层循环，该层循环会持续执行V次，接着要检查当前起点所连接到的点，要遍历数组matrix[v][]，该层循环每轮要执行V次，由此可得时间复杂度为V^2次</p><blockquote><p>临接表</p></blockquote><p>维护一组链表，用数组下标表示起点，链表内容表示它连通的结点</p><p>遍历的时间复杂度为O(V + E)</p><p>首先仍要将所有结点都搜索一遍，但针对相邻点的处理有所不同，临接矩阵需要访问所有的点来确定是否连接，而临接矩阵只要访问对应下标上的链表长度的数据。对于没有相邻点的结点，其访问连接点只需要进行1次操作，即在图中没有边时，临接表只需进行V次操作，而当临接矩阵中出现边时，就需要再加上E次操作，因此总时间复杂度为O(V + E)</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><blockquote><p>深度优先搜索</p></blockquote><p>遍历完某一结点的所有子节点后再转向另一结点。需要一个数组来保存访问情况，避免重复访问导致无限递归。</p><blockquote><p>图论算法的设计模式</p></blockquote><p>将图的信息传递给专门进行处理的客户类，让客户直接从对应的类中获取需要的处理后的信息。</p><blockquote><p>Topological Sort</p></blockquote><p>拓扑排序是一个<strong>有向无环图</strong>的所有顶点的线性序列，且具有如下特质：</p><ol><li>每一个顶点出现且只出现一次</li><li>若存在一条从A到B的路径，则在序列中A出现在B之前。</li></ol><p>实现：</p><ol><li>维护一个存储入度为0的节点的数组</li><li>每次从该数组中取出一个节点并删除该顶点及所有相关的有向边。</li><li>更新图中其余节点的入度。</li><li>重复2，3直到图为空。</li></ol><p>应用：拓扑排序常用来排序具有依赖关系的任务。</p><h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><blockquote><p>Shortest Path</p></blockquote><p>广度优先搜索不适合做最短路检索的原因：没有考虑边的权值。</p><p>最短路径最后的生成结果是一棵树</p><p>树的特性：</p><ol><li>没有环路(最短路径问题本身需要满足的条件)</li><li>每一个节点都最多只有一个父节点(对于图中的每一个节点来说，到达它的最短路径数永远&lt;=1)</li></ol><p>Dijkstra算法</p><p>按照当前已知最短路的顺序访问各个节点，然后对该节点拥有的边进行松弛操作。</p><p>A*算法</p><p>基本和Dijkstra算法一致，但他访问节点的顺序是按照已知最短路再加上到达下一个节点的估计。和Dijkstra算法相比，该算法的速度会更快，因为D算法的执行顺序是根据到起点的距离，而A*算法加入了对终点距离的估计。</p><h3 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h3><blockquote><p>Spanning tree</p></blockquote><p>最小生成树与最短路径树的区别：</p><p>最短路径树的生成与起点有关，而最小生成树与选取的起点无关。</p><blockquote><p> cut property</p></blockquote><p>对于两棵树来说，要生成他们融合后的最小生成树，那么连接他们的边中权重最小的那一条必然在最小生成树中。</p><p>利用该性质我们可以得出，先将一棵树分割成两部分，一部分有一个节点，另一部分有剩余的所有结点，找出权重最小的连接着两棵树的边加入到MST中，重复上述步骤知道没有节点在第二部分，MST就生成了。</p><p>和最短路径算法相比，最小生成树在增加节点时，更多的考虑该节点与树的距离，而非该节点与某一特定起点的距离。</p><blockquote><p>Kruskal</p></blockquote><p>每次都从图中抽取出权重最小的那条边，若没有构成环路，则将其加入MST中。</p><blockquote><p>判断图中有无环路的方法</p></blockquote><p>使用并查集存储已经连接起来的节点，若在检查某条边时，其对应的节点已经处于同一个集合中，则代表有环路。</p><h2 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h2><blockquote><p>Topological sort + Dijkstra</p></blockquote><p>拓扑排序会按照节点之间的依赖关系进行排序，也就是说，当某个节点被访问时，代表能到达它的边已经都被访问过了，因此，到达他的最短路径已经找到，可以在此基础上继续寻找最短路径。</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>当一个问题的规模不断增大时，若其与对应的子问题有联系时，可以通过分割成子问题，然后通过子问题的答案推断出当前问题的答案。</p>]]></content>
      
      
      <categories>
          
          <category> Remake </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
